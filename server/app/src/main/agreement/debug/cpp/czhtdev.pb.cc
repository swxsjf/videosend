// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: czhtdev.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "czhtdev.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Czhtdev {

namespace {

const ::google::protobuf::Descriptor* DeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DevConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DevConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigDescribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigDescribe_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigPartDescribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigPartDescribe_reflection_ = NULL;
const ::google::protobuf::Descriptor* Week_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Week_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeAuth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeAuth_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserPic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserPic_reflection_ = NULL;
const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteLocalUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteLocalUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryLocalUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryLocalUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryLocalUserList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryLocalUserList_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryPassageRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPassageRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryPassageRecordList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPassageRecordList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimePeriod_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimePeriod_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassageRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassageRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* Face_Param_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Face_Param_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassageRecordList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassageRecordList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddPicture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddPicture_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdatePicture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdatePicture_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelPicture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelPicture_reflection_ = NULL;
const ::google::protobuf::Descriptor* IDCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IDCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* IPTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IPTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* IP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IP_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ErrorType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_czhtdev_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_czhtdev_2eproto() {
  protobuf_AddDesc_czhtdev_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "czhtdev.proto");
  GOOGLE_CHECK(file != NULL);
  DeviceInfo_descriptor_ = file->message_type(0);
  static const int DeviceInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, device_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, device_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, device_android_id_),
  };
  DeviceInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeviceInfo_descriptor_,
      DeviceInfo::internal_default_instance(),
      DeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, _has_bits_),
      -1,
      -1,
      sizeof(DeviceInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, _internal_metadata_));
  DevConfig_descriptor_ = file->message_type(1);
  static const int DevConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevConfig, config_),
  };
  DevConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DevConfig_descriptor_,
      DevConfig::internal_default_instance(),
      DevConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevConfig, _has_bits_),
      -1,
      -1,
      sizeof(DevConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevConfig, _internal_metadata_));
  QueryConfig_descriptor_ = file->message_type(2);
  static const int QueryConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryConfig, save_),
  };
  QueryConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryConfig_descriptor_,
      QueryConfig::internal_default_instance(),
      QueryConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryConfig, _has_bits_),
      -1,
      -1,
      sizeof(QueryConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryConfig, _internal_metadata_));
  ModifyConfig_descriptor_ = file->message_type(3);
  static const int ModifyConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyConfig, save_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyConfig, config_),
  };
  ModifyConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModifyConfig_descriptor_,
      ModifyConfig::internal_default_instance(),
      ModifyConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyConfig, _has_bits_),
      -1,
      -1,
      sizeof(ModifyConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyConfig, _internal_metadata_));
  ConfigDescribe_descriptor_ = file->message_type(4);
  static const int ConfigDescribe_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigDescribe, emnu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigDescribe, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigDescribe, mask1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigDescribe, mask2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigDescribe, cfg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigDescribe, scope_),
  };
  ConfigDescribe_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfigDescribe_descriptor_,
      ConfigDescribe::internal_default_instance(),
      ConfigDescribe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigDescribe, _has_bits_),
      -1,
      -1,
      sizeof(ConfigDescribe),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigDescribe, _internal_metadata_));
  ConfigPartDescribe_descriptor_ = file->message_type(5);
  static const int ConfigPartDescribe_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigPartDescribe, emnu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigPartDescribe, mask2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigPartDescribe, cfg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigPartDescribe, scope_),
  };
  ConfigPartDescribe_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfigPartDescribe_descriptor_,
      ConfigPartDescribe::internal_default_instance(),
      ConfigPartDescribe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigPartDescribe, _has_bits_),
      -1,
      -1,
      sizeof(ConfigPartDescribe),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigPartDescribe, _internal_metadata_));
  Week_descriptor_ = file->message_type(6);
  static const int Week_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Week, week1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Week, week2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Week, week3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Week, week4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Week, week5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Week, week6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Week, week7_),
  };
  Week_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Week_descriptor_,
      Week::internal_default_instance(),
      Week_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Week, _has_bits_),
      -1,
      -1,
      sizeof(Week),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Week, _internal_metadata_));
  TimeAuth_descriptor_ = file->message_type(7);
  static const int TimeAuth_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAuth, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAuth, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAuth, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAuth, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAuth, weekday_),
  };
  TimeAuth_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TimeAuth_descriptor_,
      TimeAuth::internal_default_instance(),
      TimeAuth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAuth, _has_bits_),
      -1,
      -1,
      sizeof(TimeAuth),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAuth, _internal_metadata_));
  UserPic_descriptor_ = file->message_type(8);
  static const int UserPic_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPic, user_pic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPic, face_data_),
  };
  UserPic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserPic_descriptor_,
      UserPic::internal_default_instance(),
      UserPic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPic, _has_bits_),
      -1,
      -1,
      sizeof(UserPic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPic, _internal_metadata_));
  User_descriptor_ = file->message_type(9);
  static const int User_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, user_areas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, user_register_pics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, user_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, visit_starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, visit_endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, user_time_auth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, fingerprint_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, company_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, id_card_),
  };
  User_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      User_descriptor_,
      User::internal_default_instance(),
      User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _has_bits_),
      -1,
      -1,
      sizeof(User),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _internal_metadata_));
  UserList_descriptor_ = file->message_type(10);
  static const int UserList_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, user_areas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, pics_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, user_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, visit_starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, visit_endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, user_time_auth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, company_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, id_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, modify_type_),
  };
  UserList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserList_descriptor_,
      UserList::internal_default_instance(),
      UserList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, _has_bits_),
      -1,
      -1,
      sizeof(UserList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, _internal_metadata_));
  DeleteLocalUser_descriptor_ = file->message_type(11);
  static const int DeleteLocalUser_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteLocalUser, user_id_),
  };
  DeleteLocalUser_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteLocalUser_descriptor_,
      DeleteLocalUser::internal_default_instance(),
      DeleteLocalUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteLocalUser, _has_bits_),
      -1,
      -1,
      sizeof(DeleteLocalUser),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteLocalUser, _internal_metadata_));
  QueryLocalUser_descriptor_ = file->message_type(12);
  static const int QueryLocalUser_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLocalUser, user_id_),
  };
  QueryLocalUser_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryLocalUser_descriptor_,
      QueryLocalUser::internal_default_instance(),
      QueryLocalUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLocalUser, _has_bits_),
      -1,
      -1,
      sizeof(QueryLocalUser),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLocalUser, _internal_metadata_));
  QueryLocalUserList_descriptor_ = file->message_type(13);
  static const int QueryLocalUserList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLocalUserList, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLocalUserList, name_),
  };
  QueryLocalUserList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryLocalUserList_descriptor_,
      QueryLocalUserList::internal_default_instance(),
      QueryLocalUserList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLocalUserList, _has_bits_),
      -1,
      -1,
      sizeof(QueryLocalUserList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLocalUserList, _internal_metadata_));
  QueryPassageRecord_descriptor_ = file->message_type(14);
  static const int QueryPassageRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPassageRecord, id_),
  };
  QueryPassageRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryPassageRecord_descriptor_,
      QueryPassageRecord::internal_default_instance(),
      QueryPassageRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPassageRecord, _has_bits_),
      -1,
      -1,
      sizeof(QueryPassageRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPassageRecord, _internal_metadata_));
  QueryPassageRecordList_descriptor_ = file->message_type(15);
  static const int QueryPassageRecordList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPassageRecordList, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPassageRecordList, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPassageRecordList, time_),
  };
  QueryPassageRecordList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryPassageRecordList_descriptor_,
      QueryPassageRecordList::internal_default_instance(),
      QueryPassageRecordList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPassageRecordList, _has_bits_),
      -1,
      -1,
      sizeof(QueryPassageRecordList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPassageRecordList, _internal_metadata_));
  TimePeriod_descriptor_ = file->message_type(16);
  static const int TimePeriod_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimePeriod, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimePeriod, endtime_),
  };
  TimePeriod_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TimePeriod_descriptor_,
      TimePeriod::internal_default_instance(),
      TimePeriod_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimePeriod, _has_bits_),
      -1,
      -1,
      sizeof(TimePeriod),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimePeriod, _internal_metadata_));
  PassageRecord_descriptor_ = file->message_type(17);
  static const int PassageRecord_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageRecord, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageRecord, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageRecord, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageRecord, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageRecord, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageRecord, permission_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageRecord, permission_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageRecord, living_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageRecord, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageRecord, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageRecord, faceparam_),
  };
  PassageRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PassageRecord_descriptor_,
      PassageRecord::internal_default_instance(),
      PassageRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageRecord, _has_bits_),
      -1,
      -1,
      sizeof(PassageRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageRecord, _internal_metadata_));
  Face_Param_descriptor_ = file->message_type(18);
  static const int Face_Param_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face_Param, facelefttopx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face_Param, facelefttopy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face_Param, facewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face_Param, faceheight_),
  };
  Face_Param_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Face_Param_descriptor_,
      Face_Param::internal_default_instance(),
      Face_Param_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face_Param, _has_bits_),
      -1,
      -1,
      sizeof(Face_Param),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face_Param, _internal_metadata_));
  PassageRecordList_descriptor_ = file->message_type(19);
  static const int PassageRecordList_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageRecordList, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageRecordList, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageRecordList, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageRecordList, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageRecordList, permission_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageRecordList, permission_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageRecordList, living_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageRecordList, type_),
  };
  PassageRecordList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PassageRecordList_descriptor_,
      PassageRecordList::internal_default_instance(),
      PassageRecordList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageRecordList, _has_bits_),
      -1,
      -1,
      sizeof(PassageRecordList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageRecordList, _internal_metadata_));
  AddPicture_descriptor_ = file->message_type(20);
  static const int AddPicture_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPicture, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPicture, picture_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPicture, face_data_),
  };
  AddPicture_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddPicture_descriptor_,
      AddPicture::internal_default_instance(),
      AddPicture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPicture, _has_bits_),
      -1,
      -1,
      sizeof(AddPicture),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPicture, _internal_metadata_));
  UpdatePicture_descriptor_ = file->message_type(21);
  static const int UpdatePicture_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePicture, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePicture, picture_old_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePicture, picture_new_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePicture, face_data_),
  };
  UpdatePicture_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdatePicture_descriptor_,
      UpdatePicture::internal_default_instance(),
      UpdatePicture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePicture, _has_bits_),
      -1,
      -1,
      sizeof(UpdatePicture),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePicture, _internal_metadata_));
  DelPicture_descriptor_ = file->message_type(22);
  static const int DelPicture_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPicture, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPicture, picture_id_),
  };
  DelPicture_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DelPicture_descriptor_,
      DelPicture::internal_default_instance(),
      DelPicture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPicture, _has_bits_),
      -1,
      -1,
      sizeof(DelPicture),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPicture, _internal_metadata_));
  IDCard_descriptor_ = file->message_type(23);
  static const int IDCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDCard, card_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDCard, status_),
  };
  IDCard_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IDCard_descriptor_,
      IDCard::internal_default_instance(),
      IDCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDCard, _has_bits_),
      -1,
      -1,
      sizeof(IDCard),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDCard, _internal_metadata_));
  IPTable_descriptor_ = file->message_type(24);
  static const int IPTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPTable, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPTable, house_number_),
  };
  IPTable_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IPTable_descriptor_,
      IPTable::internal_default_instance(),
      IPTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPTable, _has_bits_),
      -1,
      -1,
      sizeof(IPTable),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IPTable, _internal_metadata_));
  IP_descriptor_ = file->message_type(25);
  static const int IP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IP, ip_),
  };
  IP_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IP_descriptor_,
      IP::internal_default_instance(),
      IP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IP, _has_bits_),
      -1,
      -1,
      sizeof(IP),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IP, _internal_metadata_));
  Request_descriptor_ = file->message_type(26);
  static const int Request_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, add_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, detele_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, update_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, query_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, query_user_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, add_picture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, update_picture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, detele_picture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, query_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, query_record_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, synchronous_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, modify_cfg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, query_cfg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, add_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, detele_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, add_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, detele_ip_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::internal_default_instance(),
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_),
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_));
  Response_descriptor_ = file->message_type(27);
  static const int Response_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, error_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, user_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, passge_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, passge_record_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, passge_synchronous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cfg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, devinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, card_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, ip_list_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::internal_default_instance(),
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_),
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_));
  Message_descriptor_ = file->message_type(28);
  static const int Message_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, response_),
  };
  Message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_descriptor_,
      Message::internal_default_instance(),
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_),
      -1,
      -1,
      sizeof(Message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_));
  MessageType_descriptor_ = file->enum_type(0);
  ErrorType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_czhtdev_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeviceInfo_descriptor_, DeviceInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DevConfig_descriptor_, DevConfig::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryConfig_descriptor_, QueryConfig::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModifyConfig_descriptor_, ModifyConfig::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfigDescribe_descriptor_, ConfigDescribe::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfigPartDescribe_descriptor_, ConfigPartDescribe::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Week_descriptor_, Week::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TimeAuth_descriptor_, TimeAuth::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserPic_descriptor_, UserPic::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      User_descriptor_, User::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserList_descriptor_, UserList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteLocalUser_descriptor_, DeleteLocalUser::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryLocalUser_descriptor_, QueryLocalUser::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryLocalUserList_descriptor_, QueryLocalUserList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryPassageRecord_descriptor_, QueryPassageRecord::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryPassageRecordList_descriptor_, QueryPassageRecordList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TimePeriod_descriptor_, TimePeriod::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PassageRecord_descriptor_, PassageRecord::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Face_Param_descriptor_, Face_Param::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PassageRecordList_descriptor_, PassageRecordList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddPicture_descriptor_, AddPicture::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdatePicture_descriptor_, UpdatePicture::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DelPicture_descriptor_, DelPicture::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IDCard_descriptor_, IDCard::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IPTable_descriptor_, IPTable::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IP_descriptor_, IP::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, Request::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, Response::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_descriptor_, Message::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_czhtdev_2eproto() {
  DeviceInfo_default_instance_.Shutdown();
  delete DeviceInfo_reflection_;
  DevConfig_default_instance_.Shutdown();
  delete DevConfig_reflection_;
  QueryConfig_default_instance_.Shutdown();
  delete QueryConfig_reflection_;
  ModifyConfig_default_instance_.Shutdown();
  delete ModifyConfig_reflection_;
  ConfigDescribe_default_instance_.Shutdown();
  delete ConfigDescribe_reflection_;
  ConfigPartDescribe_default_instance_.Shutdown();
  delete ConfigPartDescribe_reflection_;
  Week_default_instance_.Shutdown();
  delete Week_reflection_;
  TimeAuth_default_instance_.Shutdown();
  delete TimeAuth_reflection_;
  UserPic_default_instance_.Shutdown();
  delete UserPic_reflection_;
  User_default_instance_.Shutdown();
  delete User_reflection_;
  UserList_default_instance_.Shutdown();
  delete UserList_reflection_;
  DeleteLocalUser_default_instance_.Shutdown();
  delete DeleteLocalUser_reflection_;
  QueryLocalUser_default_instance_.Shutdown();
  delete QueryLocalUser_reflection_;
  QueryLocalUserList_default_instance_.Shutdown();
  delete QueryLocalUserList_reflection_;
  QueryPassageRecord_default_instance_.Shutdown();
  delete QueryPassageRecord_reflection_;
  QueryPassageRecordList_default_instance_.Shutdown();
  delete QueryPassageRecordList_reflection_;
  TimePeriod_default_instance_.Shutdown();
  delete TimePeriod_reflection_;
  PassageRecord_default_instance_.Shutdown();
  delete PassageRecord_reflection_;
  Face_Param_default_instance_.Shutdown();
  delete Face_Param_reflection_;
  PassageRecordList_default_instance_.Shutdown();
  delete PassageRecordList_reflection_;
  AddPicture_default_instance_.Shutdown();
  delete AddPicture_reflection_;
  UpdatePicture_default_instance_.Shutdown();
  delete UpdatePicture_reflection_;
  DelPicture_default_instance_.Shutdown();
  delete DelPicture_reflection_;
  IDCard_default_instance_.Shutdown();
  delete IDCard_reflection_;
  IPTable_default_instance_.Shutdown();
  delete IPTable_reflection_;
  IP_default_instance_.Shutdown();
  delete IP_reflection_;
  Request_default_instance_.Shutdown();
  delete Request_reflection_;
  Response_default_instance_.Shutdown();
  delete Response_reflection_;
  Message_default_instance_.Shutdown();
  delete Message_reflection_;
}

void protobuf_InitDefaults_czhtdev_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  DeviceInfo_default_instance_.DefaultConstruct();
  DevConfig_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  QueryConfig_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ModifyConfig_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ConfigDescribe_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ConfigPartDescribe_default_instance_.DefaultConstruct();
  Week_default_instance_.DefaultConstruct();
  TimeAuth_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UserPic_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  User_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UserList_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DeleteLocalUser_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  QueryLocalUser_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  QueryLocalUserList_default_instance_.DefaultConstruct();
  QueryPassageRecord_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  QueryPassageRecordList_default_instance_.DefaultConstruct();
  TimePeriod_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PassageRecord_default_instance_.DefaultConstruct();
  Face_Param_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PassageRecordList_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AddPicture_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UpdatePicture_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DelPicture_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  IDCard_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  IPTable_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  IP_default_instance_.DefaultConstruct();
  Request_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Response_default_instance_.DefaultConstruct();
  Message_default_instance_.DefaultConstruct();
  DeviceInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  DevConfig_default_instance_.get_mutable()->InitAsDefaultInstance();
  QueryConfig_default_instance_.get_mutable()->InitAsDefaultInstance();
  ModifyConfig_default_instance_.get_mutable()->InitAsDefaultInstance();
  ConfigDescribe_default_instance_.get_mutable()->InitAsDefaultInstance();
  ConfigPartDescribe_default_instance_.get_mutable()->InitAsDefaultInstance();
  Week_default_instance_.get_mutable()->InitAsDefaultInstance();
  TimeAuth_default_instance_.get_mutable()->InitAsDefaultInstance();
  UserPic_default_instance_.get_mutable()->InitAsDefaultInstance();
  User_default_instance_.get_mutable()->InitAsDefaultInstance();
  UserList_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeleteLocalUser_default_instance_.get_mutable()->InitAsDefaultInstance();
  QueryLocalUser_default_instance_.get_mutable()->InitAsDefaultInstance();
  QueryLocalUserList_default_instance_.get_mutable()->InitAsDefaultInstance();
  QueryPassageRecord_default_instance_.get_mutable()->InitAsDefaultInstance();
  QueryPassageRecordList_default_instance_.get_mutable()->InitAsDefaultInstance();
  TimePeriod_default_instance_.get_mutable()->InitAsDefaultInstance();
  PassageRecord_default_instance_.get_mutable()->InitAsDefaultInstance();
  Face_Param_default_instance_.get_mutable()->InitAsDefaultInstance();
  PassageRecordList_default_instance_.get_mutable()->InitAsDefaultInstance();
  AddPicture_default_instance_.get_mutable()->InitAsDefaultInstance();
  UpdatePicture_default_instance_.get_mutable()->InitAsDefaultInstance();
  DelPicture_default_instance_.get_mutable()->InitAsDefaultInstance();
  IDCard_default_instance_.get_mutable()->InitAsDefaultInstance();
  IPTable_default_instance_.get_mutable()->InitAsDefaultInstance();
  IP_default_instance_.get_mutable()->InitAsDefaultInstance();
  Request_default_instance_.get_mutable()->InitAsDefaultInstance();
  Response_default_instance_.get_mutable()->InitAsDefaultInstance();
  Message_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_czhtdev_2eproto_once_);
void protobuf_InitDefaults_czhtdev_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_czhtdev_2eproto_once_,
                 &protobuf_InitDefaults_czhtdev_2eproto_impl);
}
void protobuf_AddDesc_czhtdev_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_czhtdev_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rczhtdev.proto\022\007Czhtdev\"|\n\nDeviceInfo\022\021"
    "\n\tdevice_id\030\001 \001(\t\022\023\n\013device_name\030\002 \001(\t\022\023"
    "\n\013device_type\030\003 \001(\005\022\026\n\016device_version\030\004 "
    "\001(\t\022\031\n\021device_android_id\030\005 \001(\t\"4\n\tDevCon"
    "fig\022\'\n\006config\030\001 \003(\0132\027.Czhtdev.ConfigDesc"
    "ribe\"\033\n\013QueryConfig\022\014\n\004save\030\001 \001(\t\"I\n\014Mod"
    "ifyConfig\022\014\n\004save\030\001 \001(\t\022+\n\006config\030\002 \003(\0132"
    "\033.Czhtdev.ConfigPartDescribe\"e\n\016ConfigDe"
    "scribe\022\014\n\004emnu\030\001 \002(\t\022\013\n\003msg\030\002 \002(\t\022\r\n\005mas"
    "k1\030\003 \002(\005\022\r\n\005mask2\030\004 \002(\005\022\013\n\003cfg\030\005 \002(\t\022\r\n\005"
    "scope\030\006 \002(\t\"M\n\022ConfigPartDescribe\022\014\n\004emn"
    "u\030\001 \002(\t\022\r\n\005mask2\030\002 \002(\005\022\013\n\003cfg\030\003 \002(\t\022\r\n\005s"
    "cope\030\004 \002(\t\"o\n\004Week\022\r\n\005week1\030\001 \002(\010\022\r\n\005wee"
    "k2\030\002 \002(\010\022\r\n\005week3\030\003 \002(\010\022\r\n\005week4\030\004 \002(\010\022\r"
    "\n\005week5\030\005 \002(\010\022\r\n\005week6\030\006 \002(\010\022\r\n\005week7\030\007 "
    "\002(\010\"v\n\010TimeAuth\022\022\n\nstart_date\030\001 \002(\004\022\020\n\010e"
    "nd_date\030\002 \002(\004\022\022\n\nstart_time\030\003 \002(\005\022\020\n\010end"
    "_time\030\004 \002(\005\022\036\n\007weekday\030\005 \001(\0132\r.Czhtdev.W"
    "eek\"1\n\007UserPic\022\023\n\013user_pic_id\030\001 \002(\005\022\021\n\tf"
    "ace_data\030\002 \002(\014\"\264\002\n\004User\022\017\n\007user_id\030\001 \002(\t"
    "\022\021\n\tuser_name\030\002 \002(\t\022\013\n\003sex\030\003 \002(\t\022\022\n\nuser"
    "_areas\030\004 \002(\010\022,\n\022user_register_pics\030\005 \003(\013"
    "2\020.Czhtdev.UserPic\022\021\n\tuser_type\030\006 \001(\005\022\027\n"
    "\017visit_starttime\030\007 \001(\004\022\025\n\rvisit_endtime\030"
    "\010 \001(\004\022)\n\016user_time_auth\030\t \001(\0132\021.Czhtdev."
    "TimeAuth\022\030\n\020fingerprint_data\030\n \001(\014\022\022\n\nco"
    "mpany_id\030\013 \001(\t\022\014\n\004card\030\014 \001(\t\022\017\n\007id_card\030"
    "\r \001(\t\"\226\002\n\010UserList\022\017\n\007user_id\030\001 \002(\t\022\021\n\tu"
    "ser_name\030\002 \002(\t\022\013\n\003sex\030\003 \002(\t\022\022\n\nuser_area"
    "s\030\004 \002(\010\022\017\n\007pics_id\030\005 \003(\005\022\021\n\tuser_type\030\006 "
    "\001(\005\022\027\n\017visit_starttime\030\007 \001(\004\022\025\n\rvisit_en"
    "dtime\030\010 \001(\004\022)\n\016user_time_auth\030\t \001(\0132\021.Cz"
    "htdev.TimeAuth\022\022\n\ncompany_id\030\n \001(\t\022\014\n\004ca"
    "rd\030\013 \001(\t\022\017\n\007id_card\030\014 \001(\t\022\023\n\013modify_type"
    "\030\r \001(\005\"\"\n\017DeleteLocalUser\022\017\n\007user_id\030\001 \002"
    "(\t\"!\n\016QueryLocalUser\022\017\n\007user_id\030\001 \002(\t\"1\n"
    "\022QueryLocalUserList\022\r\n\005state\030\001 \002(\005\022\014\n\004na"
    "me\030\002 \001(\t\" \n\022QueryPassageRecord\022\n\n\002id\030\002 \002"
    "(\005\"X\n\026QueryPassageRecordList\022\r\n\005state\030\001 "
    "\002(\005\022\014\n\004name\030\002 \001(\t\022!\n\004time\030\003 \001(\0132\023.Czhtde"
    "v.TimePeriod\"0\n\nTimePeriod\022\021\n\tbegintime\030"
    "\001 \002(\004\022\017\n\007endtime\030\002 \002(\004\"\336\001\n\rPassageRecord"
    "\022\n\n\002id\030\001 \002(\005\022\r\n\005image\030\002 \002(\014\022\014\n\004time\030\003 \002("
    "\004\022\017\n\007user_id\030\004 \001(\t\022\014\n\004name\030\005 \001(\t\022\027\n\017perm"
    "ission_time\030\006 \001(\010\022\027\n\017permission_area\030\007 \001"
    "(\010\022\016\n\006living\030\010 \001(\010\022\014\n\004type\030\t \001(\005\022\r\n\005scor"
    "e\030\n \001(\005\022&\n\tfaceparam\030\013 \001(\0132\023.Czhtdev.Fac"
    "e_Param\"_\n\nFace_Param\022\024\n\014faceLeftTopX\030\001 "
    "\002(\005\022\024\n\014faceLeftTopY\030\002 \002(\005\022\021\n\tfaceWidth\030\003"
    " \002(\005\022\022\n\nfaceHeight\030\004 \002(\005\"\234\001\n\021PassageReco"
    "rdList\022\n\n\002id\030\001 \002(\005\022\014\n\004time\030\003 \002(\004\022\017\n\007user"
    "_id\030\004 \001(\t\022\014\n\004name\030\005 \001(\t\022\027\n\017permission_ti"
    "me\030\006 \001(\010\022\027\n\017permission_area\030\007 \001(\010\022\016\n\006liv"
    "ing\030\010 \001(\010\022\014\n\004type\030\t \001(\005\"D\n\nAddPicture\022\017\n"
    "\007user_id\030\001 \002(\t\022\022\n\npicture_id\030\002 \002(\005\022\021\n\tfa"
    "ce_data\030\003 \002(\014\"]\n\rUpdatePicture\022\017\n\007user_i"
    "d\030\001 \002(\t\022\023\n\013picture_old\030\002 \002(\005\022\023\n\013picture_"
    "new\030\003 \002(\005\022\021\n\tface_data\030\004 \002(\014\"1\n\nDelPictu"
    "re\022\017\n\007user_id\030\001 \002(\t\022\022\n\npicture_id\030\002 \002(\005\""
    ")\n\006IDCard\022\017\n\007card_id\030\001 \002(\t\022\016\n\006status\030\002 \001"
    "(\005\"+\n\007IPTable\022\n\n\002ip\030\001 \002(\t\022\024\n\014house_numbe"
    "r\030\002 \002(\t\"\020\n\002IP\022\n\n\002ip\030\001 \002(\t\"\356\005\n\007Request\022\037\n"
    "\010add_user\030\001 \001(\0132\r.Czhtdev.User\022-\n\013detele"
    "_user\030\002 \001(\0132\030.Czhtdev.DeleteLocalUser\022\"\n"
    "\013update_user\030\003 \001(\0132\r.Czhtdev.User\022+\n\nque"
    "ry_user\030\004 \001(\0132\027.Czhtdev.QueryLocalUser\0224"
    "\n\017query_user_list\030\005 \001(\0132\033.Czhtdev.QueryL"
    "ocalUserList\022(\n\013add_picture\030\006 \001(\0132\023.Czht"
    "dev.AddPicture\022.\n\016update_picture\030\007 \001(\0132\026"
    ".Czhtdev.UpdatePicture\022+\n\016detele_picture"
    "\030\010 \001(\0132\023.Czhtdev.DelPicture\0221\n\014query_rec"
    "ord\030\t \001(\0132\033.Czhtdev.QueryPassageRecord\022:"
    "\n\021query_record_list\030\n \001(\0132\037.Czhtdev.Quer"
    "yPassageRecordList\0227\n\022synchronous_record"
    "\030\013 \001(\0132\033.Czhtdev.QueryPassageRecord\022)\n\nm"
    "odify_cfg\030\014 \001(\0132\025.Czhtdev.ModifyConfig\022\'"
    "\n\tquery_cfg\030\r \001(\0132\024.Czhtdev.QueryConfig\022"
    "!\n\010add_card\030\016 \001(\0132\017.Czhtdev.IDCard\022$\n\013de"
    "tele_card\030\017 \001(\0132\017.Czhtdev.IDCard\022 \n\006add_"
    "ip\030\020 \001(\0132\020.Czhtdev.IPTable\022\036\n\tdetele_ip\030"
    "\021 \001(\0132\013.Czhtdev.IP\"\311\003\n\010Response\022\016\n\006resul"
    "t\030\001 \002(\010\022&\n\nerror_code\030\002 \001(\0162\022.Czhtdev.Er"
    "rorType\022\031\n\021error_description\030\003 \001(\t\022\033\n\004us"
    "er\030\005 \001(\0132\r.Czhtdev.User\022$\n\tuser_list\030\006 \003"
    "(\0132\021.Czhtdev.UserList\022-\n\rpassge_record\030\007"
    " \001(\0132\026.Czhtdev.PassageRecord\0226\n\022passge_r"
    "ecord_list\030\010 \003(\0132\032.Czhtdev.PassageRecord"
    "List\0222\n\022passge_synchronous\030\t \001(\0132\026.Czhtd"
    "ev.PassageRecord\022\037\n\003cfg\030\n \001(\0132\022.Czhtdev."
    "DevConfig\022$\n\007devinfo\030\013 \001(\0132\023.Czhtdev.Dev"
    "iceInfo\022\"\n\tcard_list\030\r \003(\0132\017.Czhtdev.IDC"
    "ard\022!\n\007ip_list\030\016 \003(\0132\020.Czhtdev.IPTable\"u"
    "\n\007Message\022\"\n\004type\030\001 \002(\0162\024.Czhtdev.Messag"
    "eType\022!\n\007request\030\002 \001(\0132\020.Czhtdev.Request"
    "\022#\n\010response\030\003 \001(\0132\021.Czhtdev.Response*\274\t"
    "\n\013MessageType\022\023\n\017MsgDefaultReply\020\001\022\022\n\014Ms"
    "gGetDevice\020\201\240\002\022\027\n\021MsgGetDeviceReply\020\202\240\002\022"
    "\022\n\014MsgSetDevice\020\203\240\002\022\027\n\021MsgSetDeviceReply"
    "\020\204\240\002\022\030\n\022MsgGetDeviceConfig\020\205\240\002\022\035\n\027MsgGet"
    "DeviceConfigReply\020\206\240\002\022\030\n\022MsgSetDeviceCon"
    "fig\020\207\240\002\022\035\n\027MsgSetDeviceConfigReply\020\210\240\002\022\020"
    "\n\nMsgGetUser\020\211\240\002\022\025\n\017MsgGetUserReply\020\212\240\002\022"
    "\024\n\016MsgGetUserList\020\213\240\002\022\031\n\023MsgGetUserReply"
    "List\020\214\240\002\022\020\n\nMsgAddUser\020\215\240\002\022\025\n\017MsgAddUser"
    "Reply\020\216\240\002\022\020\n\nMsgDelUser\020\217\240\002\022\025\n\017MsgDelUse"
    "rReply\020\220\240\002\022\023\n\rMsgModifyUser\020\221\240\002\022\030\n\022MsgMo"
    "difyUserReply\020\222\240\002\022\027\n\021MsgGetLocalRecord\020\223"
    "\240\002\022\034\n\026MsgGetLocalRecordReply\020\224\240\002\022\033\n\025MsgG"
    "etLocalRecordList\020\225\240\002\022 \n\032MsgGetLocalReco"
    "rdReplyList\020\226\240\002\022\"\n\034MsgGetLocalRecordSync"
    "hronous\020\227\240\002\022\'\n!MsgGetLocalRecordSynchron"
    "ousReply\020\230\240\002\022\023\n\rMsgAddPicture\020\231\240\002\022\030\n\022Msg"
    "AddPictureReply\020\240\240\002\022\023\n\rMsgDelPicture\020\241\240\002"
    "\022\030\n\022MsgDelPictureReply\020\242\240\002\022\026\n\020MsgModifyP"
    "icture\020\243\240\002\022\033\n\025MsgModifyPictureReply\020\244\240\002\022"
    "\022\n\014MsgAddIDCard\020\245\240\002\022\027\n\021MsgAddIDCardReply"
    "\020\246\240\002\022\022\n\014MsgDelIDCard\020\247\240\002\022\027\n\021MsgDelIDCard"
    "Reply\020\250\240\002\022\022\n\014MsgGetIDCard\020\253\240\002\022\027\n\021MsgGetI"
    "DCardReply\020\254\240\002\022\022\n\014MsgAddIPList\020\260\240\002\022\027\n\021Ms"
    "gAddIPListeeply\020\261\240\002\022\022\n\014MsgDelIPList\020\262\240\002\022"
    "\027\n\021MsgDelIPListReply\020\263\240\002\022\022\n\014MsgGetIPList"
    "\020\264\240\002\022\027\n\021MsgGetIPListReply\020\265\240\002\022\021\n\013MsgOpen"
    "Door\020\266\240\002\022\026\n\020MsgOpenDoorReply\020\267\240\002\022\022\n\014MsgC"
    "loseDoor\020\270\240\002\022\027\n\021MsgCloseDoorReply\020\271\240\002\022\027\n"
    "\021MsgRestartDevices\020\272\240\002\022\034\n\026MsgRestartDevi"
    "cesReply\020\273\240\002*\324\001\n\tErrorType\022\020\n\014ErrorNoErr"
    "or\020\000\022\021\n\013ErrorSameID\020\200\252\002\022\021\n\013ErrorNoface\020\201"
    "\252\002\022\016\n\010ErrorPic\020\202\252\002\022\026\n\020ErrorTooManyFace\020\203"
    "\252\002\022\017\n\tErrorNoID\020\204\252\002\022\020\n\nErrorState\020\205\252\002\022\032\n"
    "\024ErrorinsertUserTable\020\206\252\002\022\025\n\017Errorinsert"
    "User\020\207\252\002\022\021\n\013Errorupdate\020\210\252\002B\033\n\031com.czht."
    "face.recognition", 5256);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "czhtdev.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_czhtdev_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_czhtdev_2eproto_once_);
void protobuf_AddDesc_czhtdev_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_czhtdev_2eproto_once_,
                 &protobuf_AddDesc_czhtdev_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_czhtdev_2eproto {
  StaticDescriptorInitializer_czhtdev_2eproto() {
    protobuf_AddDesc_czhtdev_2eproto();
  }
} static_descriptor_initializer_czhtdev_2eproto_;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 36865:
    case 36866:
    case 36867:
    case 36868:
    case 36869:
    case 36870:
    case 36871:
    case 36872:
    case 36873:
    case 36874:
    case 36875:
    case 36876:
    case 36877:
    case 36878:
    case 36879:
    case 36880:
    case 36881:
    case 36882:
    case 36883:
    case 36884:
    case 36885:
    case 36886:
    case 36887:
    case 36888:
    case 36889:
    case 36896:
    case 36897:
    case 36898:
    case 36899:
    case 36900:
    case 36901:
    case 36902:
    case 36903:
    case 36904:
    case 36907:
    case 36908:
    case 36912:
    case 36913:
    case 36914:
    case 36915:
    case 36916:
    case 36917:
    case 36918:
    case 36919:
    case 36920:
    case 36921:
    case 36922:
    case 36923:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ErrorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorType_descriptor_;
}
bool ErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 38144:
    case 38145:
    case 38146:
    case 38147:
    case 38148:
    case 38149:
    case 38150:
    case 38151:
    case 38152:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceInfo::kDeviceIdFieldNumber;
const int DeviceInfo::kDeviceNameFieldNumber;
const int DeviceInfo::kDeviceTypeFieldNumber;
const int DeviceInfo::kDeviceVersionFieldNumber;
const int DeviceInfo::kDeviceAndroidIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInfo::DeviceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.DeviceInfo)
}

void DeviceInfo::InitAsDefaultInstance() {
}

DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  _cached_size_ = 0;
  device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_android_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_type_ = 0;
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:Czhtdev.DeviceInfo)
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_android_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceInfo_descriptor_;
}

const DeviceInfo& DeviceInfo::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeviceInfo> DeviceInfo_default_instance_;

DeviceInfo* DeviceInfo::New(::google::protobuf::Arena* arena) const {
  DeviceInfo* n = new DeviceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.DeviceInfo)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_device_id()) {
      device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_device_name()) {
      device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    device_type_ = 0;
    if (has_device_version()) {
      device_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_device_android_id()) {
      device_android_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.DeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.DeviceInfo.device_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_device_name;
        break;
      }

      // optional string device_name = 2;
      case 2: {
        if (tag == 18) {
         parse_device_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.DeviceInfo.device_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_device_type;
        break;
      }

      // optional int32 device_type = 3;
      case 3: {
        if (tag == 24) {
         parse_device_type:
          set_has_device_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_device_version;
        break;
      }

      // optional string device_version = 4;
      case 4: {
        if (tag == 34) {
         parse_device_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_version().data(), this->device_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.DeviceInfo.device_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_device_android_id;
        break;
      }

      // optional string device_android_id = 5;
      case 5: {
        if (tag == 42) {
         parse_device_android_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_android_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_android_id().data(), this->device_android_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.DeviceInfo.device_android_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.DeviceInfo)
  return false;
#undef DO_
}

void DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.DeviceInfo)
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.DeviceInfo.device_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_id(), output);
  }

  // optional string device_name = 2;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.DeviceInfo.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->device_name(), output);
  }

  // optional int32 device_type = 3;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->device_type(), output);
  }

  // optional string device_version = 4;
  if (has_device_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_version().data(), this->device_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.DeviceInfo.device_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->device_version(), output);
  }

  // optional string device_android_id = 5;
  if (has_device_android_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_android_id().data(), this->device_android_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.DeviceInfo.device_android_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->device_android_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.DeviceInfo)
}

::google::protobuf::uint8* DeviceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.DeviceInfo)
  // optional string device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.DeviceInfo.device_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_id(), target);
  }

  // optional string device_name = 2;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.DeviceInfo.device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_name(), target);
  }

  // optional int32 device_type = 3;
  if (has_device_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->device_type(), target);
  }

  // optional string device_version = 4;
  if (has_device_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_version().data(), this->device_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.DeviceInfo.device_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->device_version(), target);
  }

  // optional string device_android_id = 5;
  if (has_device_android_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_android_id().data(), this->device_android_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.DeviceInfo.device_android_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->device_android_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.DeviceInfo)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional string device_name = 2;
    if (has_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }

    // optional int32 device_type = 3;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_type());
    }

    // optional string device_version = 4;
    if (has_device_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_version());
    }

    // optional string device_android_id = 5;
    if (has_device_android_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_android_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.DeviceInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeviceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.DeviceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.DeviceInfo)
    UnsafeMergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.DeviceInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeviceInfo::UnsafeMergeFrom(const DeviceInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_has_device_id();
      device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_id_);
    }
    if (from.has_device_name()) {
      set_has_device_name();
      device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
    }
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
    if (from.has_device_version()) {
      set_has_device_version();
      device_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_version_);
    }
    if (from.has_device_android_id()) {
      set_has_device_android_id();
      device_android_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_android_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.DeviceInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {

  return true;
}

void DeviceInfo::Swap(DeviceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceInfo::InternalSwap(DeviceInfo* other) {
  device_id_.Swap(&other->device_id_);
  device_name_.Swap(&other->device_name_);
  std::swap(device_type_, other->device_type_);
  device_version_.Swap(&other->device_version_);
  device_android_id_.Swap(&other->device_android_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceInfo_descriptor_;
  metadata.reflection = DeviceInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceInfo

// optional string device_id = 1;
bool DeviceInfo::has_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceInfo::set_has_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceInfo::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceInfo::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_id();
}
const ::std::string& DeviceInfo::device_id() const {
  // @@protoc_insertion_point(field_get:Czhtdev.DeviceInfo.device_id)
  return device_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_device_id(const ::std::string& value) {
  set_has_device_id();
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.DeviceInfo.device_id)
}
void DeviceInfo::set_device_id(const char* value) {
  set_has_device_id();
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.DeviceInfo.device_id)
}
void DeviceInfo::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.DeviceInfo.device_id)
}
::std::string* DeviceInfo::mutable_device_id() {
  set_has_device_id();
  // @@protoc_insertion_point(field_mutable:Czhtdev.DeviceInfo.device_id)
  return device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfo::release_device_id() {
  // @@protoc_insertion_point(field_release:Czhtdev.DeviceInfo.device_id)
  clear_has_device_id();
  return device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_allocated_device_id(::std::string* device_id) {
  if (device_id != NULL) {
    set_has_device_id();
  } else {
    clear_has_device_id();
  }
  device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.DeviceInfo.device_id)
}

// optional string device_name = 2;
bool DeviceInfo::has_device_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceInfo::set_has_device_name() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceInfo::clear_has_device_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceInfo::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_name();
}
const ::std::string& DeviceInfo::device_name() const {
  // @@protoc_insertion_point(field_get:Czhtdev.DeviceInfo.device_name)
  return device_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_device_name(const ::std::string& value) {
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.DeviceInfo.device_name)
}
void DeviceInfo::set_device_name(const char* value) {
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.DeviceInfo.device_name)
}
void DeviceInfo::set_device_name(const char* value, size_t size) {
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.DeviceInfo.device_name)
}
::std::string* DeviceInfo::mutable_device_name() {
  set_has_device_name();
  // @@protoc_insertion_point(field_mutable:Czhtdev.DeviceInfo.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfo::release_device_name() {
  // @@protoc_insertion_point(field_release:Czhtdev.DeviceInfo.device_name)
  clear_has_device_name();
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    set_has_device_name();
  } else {
    clear_has_device_name();
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.DeviceInfo.device_name)
}

// optional int32 device_type = 3;
bool DeviceInfo::has_device_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceInfo::set_has_device_type() {
  _has_bits_[0] |= 0x00000004u;
}
void DeviceInfo::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeviceInfo::clear_device_type() {
  device_type_ = 0;
  clear_has_device_type();
}
::google::protobuf::int32 DeviceInfo::device_type() const {
  // @@protoc_insertion_point(field_get:Czhtdev.DeviceInfo.device_type)
  return device_type_;
}
void DeviceInfo::set_device_type(::google::protobuf::int32 value) {
  set_has_device_type();
  device_type_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.DeviceInfo.device_type)
}

// optional string device_version = 4;
bool DeviceInfo::has_device_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeviceInfo::set_has_device_version() {
  _has_bits_[0] |= 0x00000008u;
}
void DeviceInfo::clear_has_device_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void DeviceInfo::clear_device_version() {
  device_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_version();
}
const ::std::string& DeviceInfo::device_version() const {
  // @@protoc_insertion_point(field_get:Czhtdev.DeviceInfo.device_version)
  return device_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_device_version(const ::std::string& value) {
  set_has_device_version();
  device_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.DeviceInfo.device_version)
}
void DeviceInfo::set_device_version(const char* value) {
  set_has_device_version();
  device_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.DeviceInfo.device_version)
}
void DeviceInfo::set_device_version(const char* value, size_t size) {
  set_has_device_version();
  device_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.DeviceInfo.device_version)
}
::std::string* DeviceInfo::mutable_device_version() {
  set_has_device_version();
  // @@protoc_insertion_point(field_mutable:Czhtdev.DeviceInfo.device_version)
  return device_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfo::release_device_version() {
  // @@protoc_insertion_point(field_release:Czhtdev.DeviceInfo.device_version)
  clear_has_device_version();
  return device_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_allocated_device_version(::std::string* device_version) {
  if (device_version != NULL) {
    set_has_device_version();
  } else {
    clear_has_device_version();
  }
  device_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_version);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.DeviceInfo.device_version)
}

// optional string device_android_id = 5;
bool DeviceInfo::has_device_android_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DeviceInfo::set_has_device_android_id() {
  _has_bits_[0] |= 0x00000010u;
}
void DeviceInfo::clear_has_device_android_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void DeviceInfo::clear_device_android_id() {
  device_android_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_android_id();
}
const ::std::string& DeviceInfo::device_android_id() const {
  // @@protoc_insertion_point(field_get:Czhtdev.DeviceInfo.device_android_id)
  return device_android_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_device_android_id(const ::std::string& value) {
  set_has_device_android_id();
  device_android_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.DeviceInfo.device_android_id)
}
void DeviceInfo::set_device_android_id(const char* value) {
  set_has_device_android_id();
  device_android_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.DeviceInfo.device_android_id)
}
void DeviceInfo::set_device_android_id(const char* value, size_t size) {
  set_has_device_android_id();
  device_android_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.DeviceInfo.device_android_id)
}
::std::string* DeviceInfo::mutable_device_android_id() {
  set_has_device_android_id();
  // @@protoc_insertion_point(field_mutable:Czhtdev.DeviceInfo.device_android_id)
  return device_android_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceInfo::release_device_android_id() {
  // @@protoc_insertion_point(field_release:Czhtdev.DeviceInfo.device_android_id)
  clear_has_device_android_id();
  return device_android_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceInfo::set_allocated_device_android_id(::std::string* device_android_id) {
  if (device_android_id != NULL) {
    set_has_device_android_id();
  } else {
    clear_has_device_android_id();
  }
  device_android_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_android_id);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.DeviceInfo.device_android_id)
}

inline const DeviceInfo* DeviceInfo::internal_default_instance() {
  return &DeviceInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DevConfig::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DevConfig::DevConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.DevConfig)
}

void DevConfig::InitAsDefaultInstance() {
}

DevConfig::DevConfig(const DevConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.DevConfig)
}

void DevConfig::SharedCtor() {
  _cached_size_ = 0;
}

DevConfig::~DevConfig() {
  // @@protoc_insertion_point(destructor:Czhtdev.DevConfig)
  SharedDtor();
}

void DevConfig::SharedDtor() {
}

void DevConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DevConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DevConfig_descriptor_;
}

const DevConfig& DevConfig::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DevConfig> DevConfig_default_instance_;

DevConfig* DevConfig::New(::google::protobuf::Arena* arena) const {
  DevConfig* n = new DevConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DevConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.DevConfig)
  config_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DevConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.DevConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Czhtdev.ConfigDescribe config = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_config;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.DevConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.DevConfig)
  return false;
#undef DO_
}

void DevConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.DevConfig)
  // repeated .Czhtdev.ConfigDescribe config = 1;
  for (unsigned int i = 0, n = this->config_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->config(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.DevConfig)
}

::google::protobuf::uint8* DevConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.DevConfig)
  // repeated .Czhtdev.ConfigDescribe config = 1;
  for (unsigned int i = 0, n = this->config_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->config(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.DevConfig)
  return target;
}

size_t DevConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.DevConfig)
  size_t total_size = 0;

  // repeated .Czhtdev.ConfigDescribe config = 1;
  {
    unsigned int count = this->config_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DevConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.DevConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DevConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DevConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.DevConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.DevConfig)
    UnsafeMergeFrom(*source);
  }
}

void DevConfig::MergeFrom(const DevConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.DevConfig)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DevConfig::UnsafeMergeFrom(const DevConfig& from) {
  GOOGLE_DCHECK(&from != this);
  config_.MergeFrom(from.config_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void DevConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.DevConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DevConfig::CopyFrom(const DevConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.DevConfig)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DevConfig::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->config())) return false;
  return true;
}

void DevConfig::Swap(DevConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DevConfig::InternalSwap(DevConfig* other) {
  config_.UnsafeArenaSwap(&other->config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DevConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DevConfig_descriptor_;
  metadata.reflection = DevConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DevConfig

// repeated .Czhtdev.ConfigDescribe config = 1;
int DevConfig::config_size() const {
  return config_.size();
}
void DevConfig::clear_config() {
  config_.Clear();
}
const ::Czhtdev::ConfigDescribe& DevConfig::config(int index) const {
  // @@protoc_insertion_point(field_get:Czhtdev.DevConfig.config)
  return config_.Get(index);
}
::Czhtdev::ConfigDescribe* DevConfig::mutable_config(int index) {
  // @@protoc_insertion_point(field_mutable:Czhtdev.DevConfig.config)
  return config_.Mutable(index);
}
::Czhtdev::ConfigDescribe* DevConfig::add_config() {
  // @@protoc_insertion_point(field_add:Czhtdev.DevConfig.config)
  return config_.Add();
}
::google::protobuf::RepeatedPtrField< ::Czhtdev::ConfigDescribe >*
DevConfig::mutable_config() {
  // @@protoc_insertion_point(field_mutable_list:Czhtdev.DevConfig.config)
  return &config_;
}
const ::google::protobuf::RepeatedPtrField< ::Czhtdev::ConfigDescribe >&
DevConfig::config() const {
  // @@protoc_insertion_point(field_list:Czhtdev.DevConfig.config)
  return config_;
}

inline const DevConfig* DevConfig::internal_default_instance() {
  return &DevConfig_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryConfig::kSaveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryConfig::QueryConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.QueryConfig)
}

void QueryConfig::InitAsDefaultInstance() {
}

QueryConfig::QueryConfig(const QueryConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.QueryConfig)
}

void QueryConfig::SharedCtor() {
  _cached_size_ = 0;
  save_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

QueryConfig::~QueryConfig() {
  // @@protoc_insertion_point(destructor:Czhtdev.QueryConfig)
  SharedDtor();
}

void QueryConfig::SharedDtor() {
  save_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryConfig_descriptor_;
}

const QueryConfig& QueryConfig::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QueryConfig> QueryConfig_default_instance_;

QueryConfig* QueryConfig::New(::google::protobuf::Arena* arena) const {
  QueryConfig* n = new QueryConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.QueryConfig)
  if (has_save()) {
    save_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QueryConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.QueryConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string save = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_save()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->save().data(), this->save().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.QueryConfig.save");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.QueryConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.QueryConfig)
  return false;
#undef DO_
}

void QueryConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.QueryConfig)
  // optional string save = 1;
  if (has_save()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save().data(), this->save().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.QueryConfig.save");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->save(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.QueryConfig)
}

::google::protobuf::uint8* QueryConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.QueryConfig)
  // optional string save = 1;
  if (has_save()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save().data(), this->save().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.QueryConfig.save");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->save(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.QueryConfig)
  return target;
}

size_t QueryConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.QueryConfig)
  size_t total_size = 0;

  // optional string save = 1;
  if (has_save()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->save());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.QueryConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.QueryConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.QueryConfig)
    UnsafeMergeFrom(*source);
  }
}

void QueryConfig::MergeFrom(const QueryConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.QueryConfig)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QueryConfig::UnsafeMergeFrom(const QueryConfig& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_save()) {
      set_has_save();
      save_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void QueryConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.QueryConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryConfig::CopyFrom(const QueryConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.QueryConfig)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QueryConfig::IsInitialized() const {

  return true;
}

void QueryConfig::Swap(QueryConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryConfig::InternalSwap(QueryConfig* other) {
  save_.Swap(&other->save_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryConfig_descriptor_;
  metadata.reflection = QueryConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryConfig

// optional string save = 1;
bool QueryConfig::has_save() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryConfig::set_has_save() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryConfig::clear_has_save() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryConfig::clear_save() {
  save_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_save();
}
const ::std::string& QueryConfig::save() const {
  // @@protoc_insertion_point(field_get:Czhtdev.QueryConfig.save)
  return save_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryConfig::set_save(const ::std::string& value) {
  set_has_save();
  save_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.QueryConfig.save)
}
void QueryConfig::set_save(const char* value) {
  set_has_save();
  save_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.QueryConfig.save)
}
void QueryConfig::set_save(const char* value, size_t size) {
  set_has_save();
  save_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.QueryConfig.save)
}
::std::string* QueryConfig::mutable_save() {
  set_has_save();
  // @@protoc_insertion_point(field_mutable:Czhtdev.QueryConfig.save)
  return save_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryConfig::release_save() {
  // @@protoc_insertion_point(field_release:Czhtdev.QueryConfig.save)
  clear_has_save();
  return save_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryConfig::set_allocated_save(::std::string* save) {
  if (save != NULL) {
    set_has_save();
  } else {
    clear_has_save();
  }
  save_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.QueryConfig.save)
}

inline const QueryConfig* QueryConfig::internal_default_instance() {
  return &QueryConfig_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModifyConfig::kSaveFieldNumber;
const int ModifyConfig::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModifyConfig::ModifyConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.ModifyConfig)
}

void ModifyConfig::InitAsDefaultInstance() {
}

ModifyConfig::ModifyConfig(const ModifyConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.ModifyConfig)
}

void ModifyConfig::SharedCtor() {
  _cached_size_ = 0;
  save_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ModifyConfig::~ModifyConfig() {
  // @@protoc_insertion_point(destructor:Czhtdev.ModifyConfig)
  SharedDtor();
}

void ModifyConfig::SharedDtor() {
  save_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ModifyConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyConfig_descriptor_;
}

const ModifyConfig& ModifyConfig::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ModifyConfig> ModifyConfig_default_instance_;

ModifyConfig* ModifyConfig::New(::google::protobuf::Arena* arena) const {
  ModifyConfig* n = new ModifyConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModifyConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.ModifyConfig)
  if (has_save()) {
    save_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  config_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ModifyConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.ModifyConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string save = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_save()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->save().data(), this->save().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.ModifyConfig.save");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_config;
        break;
      }

      // repeated .Czhtdev.ConfigPartDescribe config = 2;
      case 2: {
        if (tag == 18) {
         parse_config:
          DO_(input->IncrementRecursionDepth());
         parse_loop_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_config;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.ModifyConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.ModifyConfig)
  return false;
#undef DO_
}

void ModifyConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.ModifyConfig)
  // optional string save = 1;
  if (has_save()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save().data(), this->save().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.ModifyConfig.save");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->save(), output);
  }

  // repeated .Czhtdev.ConfigPartDescribe config = 2;
  for (unsigned int i = 0, n = this->config_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->config(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.ModifyConfig)
}

::google::protobuf::uint8* ModifyConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.ModifyConfig)
  // optional string save = 1;
  if (has_save()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save().data(), this->save().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.ModifyConfig.save");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->save(), target);
  }

  // repeated .Czhtdev.ConfigPartDescribe config = 2;
  for (unsigned int i = 0, n = this->config_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->config(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.ModifyConfig)
  return target;
}

size_t ModifyConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.ModifyConfig)
  size_t total_size = 0;

  // optional string save = 1;
  if (has_save()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->save());
  }

  // repeated .Czhtdev.ConfigPartDescribe config = 2;
  {
    unsigned int count = this->config_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.ModifyConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ModifyConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModifyConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.ModifyConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.ModifyConfig)
    UnsafeMergeFrom(*source);
  }
}

void ModifyConfig::MergeFrom(const ModifyConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.ModifyConfig)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ModifyConfig::UnsafeMergeFrom(const ModifyConfig& from) {
  GOOGLE_DCHECK(&from != this);
  config_.MergeFrom(from.config_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_save()) {
      set_has_save();
      save_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ModifyConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.ModifyConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyConfig::CopyFrom(const ModifyConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.ModifyConfig)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ModifyConfig::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->config())) return false;
  return true;
}

void ModifyConfig::Swap(ModifyConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModifyConfig::InternalSwap(ModifyConfig* other) {
  save_.Swap(&other->save_);
  config_.UnsafeArenaSwap(&other->config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModifyConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyConfig_descriptor_;
  metadata.reflection = ModifyConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModifyConfig

// optional string save = 1;
bool ModifyConfig::has_save() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModifyConfig::set_has_save() {
  _has_bits_[0] |= 0x00000001u;
}
void ModifyConfig::clear_has_save() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModifyConfig::clear_save() {
  save_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_save();
}
const ::std::string& ModifyConfig::save() const {
  // @@protoc_insertion_point(field_get:Czhtdev.ModifyConfig.save)
  return save_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModifyConfig::set_save(const ::std::string& value) {
  set_has_save();
  save_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.ModifyConfig.save)
}
void ModifyConfig::set_save(const char* value) {
  set_has_save();
  save_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.ModifyConfig.save)
}
void ModifyConfig::set_save(const char* value, size_t size) {
  set_has_save();
  save_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.ModifyConfig.save)
}
::std::string* ModifyConfig::mutable_save() {
  set_has_save();
  // @@protoc_insertion_point(field_mutable:Czhtdev.ModifyConfig.save)
  return save_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModifyConfig::release_save() {
  // @@protoc_insertion_point(field_release:Czhtdev.ModifyConfig.save)
  clear_has_save();
  return save_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModifyConfig::set_allocated_save(::std::string* save) {
  if (save != NULL) {
    set_has_save();
  } else {
    clear_has_save();
  }
  save_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.ModifyConfig.save)
}

// repeated .Czhtdev.ConfigPartDescribe config = 2;
int ModifyConfig::config_size() const {
  return config_.size();
}
void ModifyConfig::clear_config() {
  config_.Clear();
}
const ::Czhtdev::ConfigPartDescribe& ModifyConfig::config(int index) const {
  // @@protoc_insertion_point(field_get:Czhtdev.ModifyConfig.config)
  return config_.Get(index);
}
::Czhtdev::ConfigPartDescribe* ModifyConfig::mutable_config(int index) {
  // @@protoc_insertion_point(field_mutable:Czhtdev.ModifyConfig.config)
  return config_.Mutable(index);
}
::Czhtdev::ConfigPartDescribe* ModifyConfig::add_config() {
  // @@protoc_insertion_point(field_add:Czhtdev.ModifyConfig.config)
  return config_.Add();
}
::google::protobuf::RepeatedPtrField< ::Czhtdev::ConfigPartDescribe >*
ModifyConfig::mutable_config() {
  // @@protoc_insertion_point(field_mutable_list:Czhtdev.ModifyConfig.config)
  return &config_;
}
const ::google::protobuf::RepeatedPtrField< ::Czhtdev::ConfigPartDescribe >&
ModifyConfig::config() const {
  // @@protoc_insertion_point(field_list:Czhtdev.ModifyConfig.config)
  return config_;
}

inline const ModifyConfig* ModifyConfig::internal_default_instance() {
  return &ModifyConfig_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigDescribe::kEmnuFieldNumber;
const int ConfigDescribe::kMsgFieldNumber;
const int ConfigDescribe::kMask1FieldNumber;
const int ConfigDescribe::kMask2FieldNumber;
const int ConfigDescribe::kCfgFieldNumber;
const int ConfigDescribe::kScopeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigDescribe::ConfigDescribe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.ConfigDescribe)
}

void ConfigDescribe::InitAsDefaultInstance() {
}

ConfigDescribe::ConfigDescribe(const ConfigDescribe& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.ConfigDescribe)
}

void ConfigDescribe::SharedCtor() {
  _cached_size_ = 0;
  emnu_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scope_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mask1_, 0, reinterpret_cast<char*>(&mask2_) -
    reinterpret_cast<char*>(&mask1_) + sizeof(mask2_));
}

ConfigDescribe::~ConfigDescribe() {
  // @@protoc_insertion_point(destructor:Czhtdev.ConfigDescribe)
  SharedDtor();
}

void ConfigDescribe::SharedDtor() {
  emnu_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scope_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigDescribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigDescribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigDescribe_descriptor_;
}

const ConfigDescribe& ConfigDescribe::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ConfigDescribe> ConfigDescribe_default_instance_;

ConfigDescribe* ConfigDescribe::New(::google::protobuf::Arena* arena) const {
  ConfigDescribe* n = new ConfigDescribe;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigDescribe::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.ConfigDescribe)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConfigDescribe, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConfigDescribe*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(mask1_, mask2_);
    if (has_emnu()) {
      emnu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_msg()) {
      msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cfg()) {
      cfg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_scope()) {
      scope_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConfigDescribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.ConfigDescribe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string emnu = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emnu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->emnu().data(), this->emnu().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.ConfigDescribe.emnu");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.ConfigDescribe.msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mask1;
        break;
      }

      // required int32 mask1 = 3;
      case 3: {
        if (tag == 24) {
         parse_mask1:
          set_has_mask1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask1_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mask2;
        break;
      }

      // required int32 mask2 = 4;
      case 4: {
        if (tag == 32) {
         parse_mask2:
          set_has_mask2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask2_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cfg;
        break;
      }

      // required string cfg = 5;
      case 5: {
        if (tag == 42) {
         parse_cfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cfg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cfg().data(), this->cfg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.ConfigDescribe.cfg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_scope;
        break;
      }

      // required string scope = 6;
      case 6: {
        if (tag == 50) {
         parse_scope:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scope()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scope().data(), this->scope().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.ConfigDescribe.scope");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.ConfigDescribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.ConfigDescribe)
  return false;
#undef DO_
}

void ConfigDescribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.ConfigDescribe)
  // required string emnu = 1;
  if (has_emnu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->emnu().data(), this->emnu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.ConfigDescribe.emnu");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->emnu(), output);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.ConfigDescribe.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // required int32 mask1 = 3;
  if (has_mask1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mask1(), output);
  }

  // required int32 mask2 = 4;
  if (has_mask2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mask2(), output);
  }

  // required string cfg = 5;
  if (has_cfg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cfg().data(), this->cfg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.ConfigDescribe.cfg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cfg(), output);
  }

  // required string scope = 6;
  if (has_scope()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scope().data(), this->scope().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.ConfigDescribe.scope");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->scope(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.ConfigDescribe)
}

::google::protobuf::uint8* ConfigDescribe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.ConfigDescribe)
  // required string emnu = 1;
  if (has_emnu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->emnu().data(), this->emnu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.ConfigDescribe.emnu");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->emnu(), target);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.ConfigDescribe.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // required int32 mask1 = 3;
  if (has_mask1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mask1(), target);
  }

  // required int32 mask2 = 4;
  if (has_mask2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mask2(), target);
  }

  // required string cfg = 5;
  if (has_cfg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cfg().data(), this->cfg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.ConfigDescribe.cfg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cfg(), target);
  }

  // required string scope = 6;
  if (has_scope()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scope().data(), this->scope().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.ConfigDescribe.scope");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->scope(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.ConfigDescribe)
  return target;
}

size_t ConfigDescribe::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Czhtdev.ConfigDescribe)
  size_t total_size = 0;

  if (has_emnu()) {
    // required string emnu = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->emnu());
  }

  if (has_msg()) {
    // required string msg = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  if (has_mask1()) {
    // required int32 mask1 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mask1());
  }

  if (has_mask2()) {
    // required int32 mask2 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mask2());
  }

  if (has_cfg()) {
    // required string cfg = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cfg());
  }

  if (has_scope()) {
    // required string scope = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scope());
  }

  return total_size;
}
size_t ConfigDescribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.ConfigDescribe)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string emnu = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->emnu());

    // required string msg = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());

    // required int32 mask1 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mask1());

    // required int32 mask2 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mask2());

    // required string cfg = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cfg());

    // required string scope = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scope());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigDescribe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.ConfigDescribe)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConfigDescribe* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigDescribe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.ConfigDescribe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.ConfigDescribe)
    UnsafeMergeFrom(*source);
  }
}

void ConfigDescribe::MergeFrom(const ConfigDescribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.ConfigDescribe)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ConfigDescribe::UnsafeMergeFrom(const ConfigDescribe& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_emnu()) {
      set_has_emnu();
      emnu_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emnu_);
    }
    if (from.has_msg()) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (from.has_mask1()) {
      set_mask1(from.mask1());
    }
    if (from.has_mask2()) {
      set_mask2(from.mask2());
    }
    if (from.has_cfg()) {
      set_has_cfg();
      cfg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cfg_);
    }
    if (from.has_scope()) {
      set_has_scope();
      scope_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scope_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ConfigDescribe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.ConfigDescribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigDescribe::CopyFrom(const ConfigDescribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.ConfigDescribe)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ConfigDescribe::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ConfigDescribe::Swap(ConfigDescribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigDescribe::InternalSwap(ConfigDescribe* other) {
  emnu_.Swap(&other->emnu_);
  msg_.Swap(&other->msg_);
  std::swap(mask1_, other->mask1_);
  std::swap(mask2_, other->mask2_);
  cfg_.Swap(&other->cfg_);
  scope_.Swap(&other->scope_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigDescribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigDescribe_descriptor_;
  metadata.reflection = ConfigDescribe_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigDescribe

// required string emnu = 1;
bool ConfigDescribe::has_emnu() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConfigDescribe::set_has_emnu() {
  _has_bits_[0] |= 0x00000001u;
}
void ConfigDescribe::clear_has_emnu() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConfigDescribe::clear_emnu() {
  emnu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_emnu();
}
const ::std::string& ConfigDescribe::emnu() const {
  // @@protoc_insertion_point(field_get:Czhtdev.ConfigDescribe.emnu)
  return emnu_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigDescribe::set_emnu(const ::std::string& value) {
  set_has_emnu();
  emnu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.ConfigDescribe.emnu)
}
void ConfigDescribe::set_emnu(const char* value) {
  set_has_emnu();
  emnu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.ConfigDescribe.emnu)
}
void ConfigDescribe::set_emnu(const char* value, size_t size) {
  set_has_emnu();
  emnu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.ConfigDescribe.emnu)
}
::std::string* ConfigDescribe::mutable_emnu() {
  set_has_emnu();
  // @@protoc_insertion_point(field_mutable:Czhtdev.ConfigDescribe.emnu)
  return emnu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfigDescribe::release_emnu() {
  // @@protoc_insertion_point(field_release:Czhtdev.ConfigDescribe.emnu)
  clear_has_emnu();
  return emnu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigDescribe::set_allocated_emnu(::std::string* emnu) {
  if (emnu != NULL) {
    set_has_emnu();
  } else {
    clear_has_emnu();
  }
  emnu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), emnu);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.ConfigDescribe.emnu)
}

// required string msg = 2;
bool ConfigDescribe::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConfigDescribe::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
void ConfigDescribe::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConfigDescribe::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
const ::std::string& ConfigDescribe::msg() const {
  // @@protoc_insertion_point(field_get:Czhtdev.ConfigDescribe.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigDescribe::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.ConfigDescribe.msg)
}
void ConfigDescribe::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.ConfigDescribe.msg)
}
void ConfigDescribe::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.ConfigDescribe.msg)
}
::std::string* ConfigDescribe::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:Czhtdev.ConfigDescribe.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfigDescribe::release_msg() {
  // @@protoc_insertion_point(field_release:Czhtdev.ConfigDescribe.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigDescribe::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.ConfigDescribe.msg)
}

// required int32 mask1 = 3;
bool ConfigDescribe::has_mask1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConfigDescribe::set_has_mask1() {
  _has_bits_[0] |= 0x00000004u;
}
void ConfigDescribe::clear_has_mask1() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConfigDescribe::clear_mask1() {
  mask1_ = 0;
  clear_has_mask1();
}
::google::protobuf::int32 ConfigDescribe::mask1() const {
  // @@protoc_insertion_point(field_get:Czhtdev.ConfigDescribe.mask1)
  return mask1_;
}
void ConfigDescribe::set_mask1(::google::protobuf::int32 value) {
  set_has_mask1();
  mask1_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.ConfigDescribe.mask1)
}

// required int32 mask2 = 4;
bool ConfigDescribe::has_mask2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConfigDescribe::set_has_mask2() {
  _has_bits_[0] |= 0x00000008u;
}
void ConfigDescribe::clear_has_mask2() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConfigDescribe::clear_mask2() {
  mask2_ = 0;
  clear_has_mask2();
}
::google::protobuf::int32 ConfigDescribe::mask2() const {
  // @@protoc_insertion_point(field_get:Czhtdev.ConfigDescribe.mask2)
  return mask2_;
}
void ConfigDescribe::set_mask2(::google::protobuf::int32 value) {
  set_has_mask2();
  mask2_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.ConfigDescribe.mask2)
}

// required string cfg = 5;
bool ConfigDescribe::has_cfg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ConfigDescribe::set_has_cfg() {
  _has_bits_[0] |= 0x00000010u;
}
void ConfigDescribe::clear_has_cfg() {
  _has_bits_[0] &= ~0x00000010u;
}
void ConfigDescribe::clear_cfg() {
  cfg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cfg();
}
const ::std::string& ConfigDescribe::cfg() const {
  // @@protoc_insertion_point(field_get:Czhtdev.ConfigDescribe.cfg)
  return cfg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigDescribe::set_cfg(const ::std::string& value) {
  set_has_cfg();
  cfg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.ConfigDescribe.cfg)
}
void ConfigDescribe::set_cfg(const char* value) {
  set_has_cfg();
  cfg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.ConfigDescribe.cfg)
}
void ConfigDescribe::set_cfg(const char* value, size_t size) {
  set_has_cfg();
  cfg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.ConfigDescribe.cfg)
}
::std::string* ConfigDescribe::mutable_cfg() {
  set_has_cfg();
  // @@protoc_insertion_point(field_mutable:Czhtdev.ConfigDescribe.cfg)
  return cfg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfigDescribe::release_cfg() {
  // @@protoc_insertion_point(field_release:Czhtdev.ConfigDescribe.cfg)
  clear_has_cfg();
  return cfg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigDescribe::set_allocated_cfg(::std::string* cfg) {
  if (cfg != NULL) {
    set_has_cfg();
  } else {
    clear_has_cfg();
  }
  cfg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cfg);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.ConfigDescribe.cfg)
}

// required string scope = 6;
bool ConfigDescribe::has_scope() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ConfigDescribe::set_has_scope() {
  _has_bits_[0] |= 0x00000020u;
}
void ConfigDescribe::clear_has_scope() {
  _has_bits_[0] &= ~0x00000020u;
}
void ConfigDescribe::clear_scope() {
  scope_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scope();
}
const ::std::string& ConfigDescribe::scope() const {
  // @@protoc_insertion_point(field_get:Czhtdev.ConfigDescribe.scope)
  return scope_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigDescribe::set_scope(const ::std::string& value) {
  set_has_scope();
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.ConfigDescribe.scope)
}
void ConfigDescribe::set_scope(const char* value) {
  set_has_scope();
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.ConfigDescribe.scope)
}
void ConfigDescribe::set_scope(const char* value, size_t size) {
  set_has_scope();
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.ConfigDescribe.scope)
}
::std::string* ConfigDescribe::mutable_scope() {
  set_has_scope();
  // @@protoc_insertion_point(field_mutable:Czhtdev.ConfigDescribe.scope)
  return scope_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfigDescribe::release_scope() {
  // @@protoc_insertion_point(field_release:Czhtdev.ConfigDescribe.scope)
  clear_has_scope();
  return scope_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigDescribe::set_allocated_scope(::std::string* scope) {
  if (scope != NULL) {
    set_has_scope();
  } else {
    clear_has_scope();
  }
  scope_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scope);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.ConfigDescribe.scope)
}

inline const ConfigDescribe* ConfigDescribe::internal_default_instance() {
  return &ConfigDescribe_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigPartDescribe::kEmnuFieldNumber;
const int ConfigPartDescribe::kMask2FieldNumber;
const int ConfigPartDescribe::kCfgFieldNumber;
const int ConfigPartDescribe::kScopeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigPartDescribe::ConfigPartDescribe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.ConfigPartDescribe)
}

void ConfigPartDescribe::InitAsDefaultInstance() {
}

ConfigPartDescribe::ConfigPartDescribe(const ConfigPartDescribe& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.ConfigPartDescribe)
}

void ConfigPartDescribe::SharedCtor() {
  _cached_size_ = 0;
  emnu_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scope_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask2_ = 0;
}

ConfigPartDescribe::~ConfigPartDescribe() {
  // @@protoc_insertion_point(destructor:Czhtdev.ConfigPartDescribe)
  SharedDtor();
}

void ConfigPartDescribe::SharedDtor() {
  emnu_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scope_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigPartDescribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigPartDescribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigPartDescribe_descriptor_;
}

const ConfigPartDescribe& ConfigPartDescribe::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ConfigPartDescribe> ConfigPartDescribe_default_instance_;

ConfigPartDescribe* ConfigPartDescribe::New(::google::protobuf::Arena* arena) const {
  ConfigPartDescribe* n = new ConfigPartDescribe;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigPartDescribe::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.ConfigPartDescribe)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_emnu()) {
      emnu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    mask2_ = 0;
    if (has_cfg()) {
      cfg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_scope()) {
      scope_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConfigPartDescribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.ConfigPartDescribe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string emnu = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emnu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->emnu().data(), this->emnu().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.ConfigPartDescribe.emnu");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mask2;
        break;
      }

      // required int32 mask2 = 2;
      case 2: {
        if (tag == 16) {
         parse_mask2:
          set_has_mask2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask2_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cfg;
        break;
      }

      // required string cfg = 3;
      case 3: {
        if (tag == 26) {
         parse_cfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cfg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cfg().data(), this->cfg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.ConfigPartDescribe.cfg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_scope;
        break;
      }

      // required string scope = 4;
      case 4: {
        if (tag == 34) {
         parse_scope:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scope()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scope().data(), this->scope().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.ConfigPartDescribe.scope");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.ConfigPartDescribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.ConfigPartDescribe)
  return false;
#undef DO_
}

void ConfigPartDescribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.ConfigPartDescribe)
  // required string emnu = 1;
  if (has_emnu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->emnu().data(), this->emnu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.ConfigPartDescribe.emnu");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->emnu(), output);
  }

  // required int32 mask2 = 2;
  if (has_mask2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mask2(), output);
  }

  // required string cfg = 3;
  if (has_cfg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cfg().data(), this->cfg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.ConfigPartDescribe.cfg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cfg(), output);
  }

  // required string scope = 4;
  if (has_scope()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scope().data(), this->scope().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.ConfigPartDescribe.scope");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->scope(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.ConfigPartDescribe)
}

::google::protobuf::uint8* ConfigPartDescribe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.ConfigPartDescribe)
  // required string emnu = 1;
  if (has_emnu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->emnu().data(), this->emnu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.ConfigPartDescribe.emnu");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->emnu(), target);
  }

  // required int32 mask2 = 2;
  if (has_mask2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mask2(), target);
  }

  // required string cfg = 3;
  if (has_cfg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cfg().data(), this->cfg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.ConfigPartDescribe.cfg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cfg(), target);
  }

  // required string scope = 4;
  if (has_scope()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scope().data(), this->scope().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.ConfigPartDescribe.scope");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->scope(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.ConfigPartDescribe)
  return target;
}

size_t ConfigPartDescribe::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Czhtdev.ConfigPartDescribe)
  size_t total_size = 0;

  if (has_emnu()) {
    // required string emnu = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->emnu());
  }

  if (has_mask2()) {
    // required int32 mask2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mask2());
  }

  if (has_cfg()) {
    // required string cfg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cfg());
  }

  if (has_scope()) {
    // required string scope = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scope());
  }

  return total_size;
}
size_t ConfigPartDescribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.ConfigPartDescribe)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string emnu = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->emnu());

    // required int32 mask2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mask2());

    // required string cfg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cfg());

    // required string scope = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scope());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigPartDescribe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.ConfigPartDescribe)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConfigPartDescribe* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigPartDescribe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.ConfigPartDescribe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.ConfigPartDescribe)
    UnsafeMergeFrom(*source);
  }
}

void ConfigPartDescribe::MergeFrom(const ConfigPartDescribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.ConfigPartDescribe)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ConfigPartDescribe::UnsafeMergeFrom(const ConfigPartDescribe& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_emnu()) {
      set_has_emnu();
      emnu_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emnu_);
    }
    if (from.has_mask2()) {
      set_mask2(from.mask2());
    }
    if (from.has_cfg()) {
      set_has_cfg();
      cfg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cfg_);
    }
    if (from.has_scope()) {
      set_has_scope();
      scope_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scope_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ConfigPartDescribe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.ConfigPartDescribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigPartDescribe::CopyFrom(const ConfigPartDescribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.ConfigPartDescribe)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ConfigPartDescribe::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ConfigPartDescribe::Swap(ConfigPartDescribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigPartDescribe::InternalSwap(ConfigPartDescribe* other) {
  emnu_.Swap(&other->emnu_);
  std::swap(mask2_, other->mask2_);
  cfg_.Swap(&other->cfg_);
  scope_.Swap(&other->scope_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigPartDescribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigPartDescribe_descriptor_;
  metadata.reflection = ConfigPartDescribe_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigPartDescribe

// required string emnu = 1;
bool ConfigPartDescribe::has_emnu() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConfigPartDescribe::set_has_emnu() {
  _has_bits_[0] |= 0x00000001u;
}
void ConfigPartDescribe::clear_has_emnu() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConfigPartDescribe::clear_emnu() {
  emnu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_emnu();
}
const ::std::string& ConfigPartDescribe::emnu() const {
  // @@protoc_insertion_point(field_get:Czhtdev.ConfigPartDescribe.emnu)
  return emnu_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigPartDescribe::set_emnu(const ::std::string& value) {
  set_has_emnu();
  emnu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.ConfigPartDescribe.emnu)
}
void ConfigPartDescribe::set_emnu(const char* value) {
  set_has_emnu();
  emnu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.ConfigPartDescribe.emnu)
}
void ConfigPartDescribe::set_emnu(const char* value, size_t size) {
  set_has_emnu();
  emnu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.ConfigPartDescribe.emnu)
}
::std::string* ConfigPartDescribe::mutable_emnu() {
  set_has_emnu();
  // @@protoc_insertion_point(field_mutable:Czhtdev.ConfigPartDescribe.emnu)
  return emnu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfigPartDescribe::release_emnu() {
  // @@protoc_insertion_point(field_release:Czhtdev.ConfigPartDescribe.emnu)
  clear_has_emnu();
  return emnu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigPartDescribe::set_allocated_emnu(::std::string* emnu) {
  if (emnu != NULL) {
    set_has_emnu();
  } else {
    clear_has_emnu();
  }
  emnu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), emnu);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.ConfigPartDescribe.emnu)
}

// required int32 mask2 = 2;
bool ConfigPartDescribe::has_mask2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConfigPartDescribe::set_has_mask2() {
  _has_bits_[0] |= 0x00000002u;
}
void ConfigPartDescribe::clear_has_mask2() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConfigPartDescribe::clear_mask2() {
  mask2_ = 0;
  clear_has_mask2();
}
::google::protobuf::int32 ConfigPartDescribe::mask2() const {
  // @@protoc_insertion_point(field_get:Czhtdev.ConfigPartDescribe.mask2)
  return mask2_;
}
void ConfigPartDescribe::set_mask2(::google::protobuf::int32 value) {
  set_has_mask2();
  mask2_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.ConfigPartDescribe.mask2)
}

// required string cfg = 3;
bool ConfigPartDescribe::has_cfg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConfigPartDescribe::set_has_cfg() {
  _has_bits_[0] |= 0x00000004u;
}
void ConfigPartDescribe::clear_has_cfg() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConfigPartDescribe::clear_cfg() {
  cfg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cfg();
}
const ::std::string& ConfigPartDescribe::cfg() const {
  // @@protoc_insertion_point(field_get:Czhtdev.ConfigPartDescribe.cfg)
  return cfg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigPartDescribe::set_cfg(const ::std::string& value) {
  set_has_cfg();
  cfg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.ConfigPartDescribe.cfg)
}
void ConfigPartDescribe::set_cfg(const char* value) {
  set_has_cfg();
  cfg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.ConfigPartDescribe.cfg)
}
void ConfigPartDescribe::set_cfg(const char* value, size_t size) {
  set_has_cfg();
  cfg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.ConfigPartDescribe.cfg)
}
::std::string* ConfigPartDescribe::mutable_cfg() {
  set_has_cfg();
  // @@protoc_insertion_point(field_mutable:Czhtdev.ConfigPartDescribe.cfg)
  return cfg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfigPartDescribe::release_cfg() {
  // @@protoc_insertion_point(field_release:Czhtdev.ConfigPartDescribe.cfg)
  clear_has_cfg();
  return cfg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigPartDescribe::set_allocated_cfg(::std::string* cfg) {
  if (cfg != NULL) {
    set_has_cfg();
  } else {
    clear_has_cfg();
  }
  cfg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cfg);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.ConfigPartDescribe.cfg)
}

// required string scope = 4;
bool ConfigPartDescribe::has_scope() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConfigPartDescribe::set_has_scope() {
  _has_bits_[0] |= 0x00000008u;
}
void ConfigPartDescribe::clear_has_scope() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConfigPartDescribe::clear_scope() {
  scope_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scope();
}
const ::std::string& ConfigPartDescribe::scope() const {
  // @@protoc_insertion_point(field_get:Czhtdev.ConfigPartDescribe.scope)
  return scope_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigPartDescribe::set_scope(const ::std::string& value) {
  set_has_scope();
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.ConfigPartDescribe.scope)
}
void ConfigPartDescribe::set_scope(const char* value) {
  set_has_scope();
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.ConfigPartDescribe.scope)
}
void ConfigPartDescribe::set_scope(const char* value, size_t size) {
  set_has_scope();
  scope_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.ConfigPartDescribe.scope)
}
::std::string* ConfigPartDescribe::mutable_scope() {
  set_has_scope();
  // @@protoc_insertion_point(field_mutable:Czhtdev.ConfigPartDescribe.scope)
  return scope_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfigPartDescribe::release_scope() {
  // @@protoc_insertion_point(field_release:Czhtdev.ConfigPartDescribe.scope)
  clear_has_scope();
  return scope_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigPartDescribe::set_allocated_scope(::std::string* scope) {
  if (scope != NULL) {
    set_has_scope();
  } else {
    clear_has_scope();
  }
  scope_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scope);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.ConfigPartDescribe.scope)
}

inline const ConfigPartDescribe* ConfigPartDescribe::internal_default_instance() {
  return &ConfigPartDescribe_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Week::kWeek1FieldNumber;
const int Week::kWeek2FieldNumber;
const int Week::kWeek3FieldNumber;
const int Week::kWeek4FieldNumber;
const int Week::kWeek5FieldNumber;
const int Week::kWeek6FieldNumber;
const int Week::kWeek7FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Week::Week()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.Week)
}

void Week::InitAsDefaultInstance() {
}

Week::Week(const Week& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.Week)
}

void Week::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&week1_, 0, reinterpret_cast<char*>(&week7_) -
    reinterpret_cast<char*>(&week1_) + sizeof(week7_));
}

Week::~Week() {
  // @@protoc_insertion_point(destructor:Czhtdev.Week)
  SharedDtor();
}

void Week::SharedDtor() {
}

void Week::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Week::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Week_descriptor_;
}

const Week& Week::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Week> Week_default_instance_;

Week* Week::New(::google::protobuf::Arena* arena) const {
  Week* n = new Week;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Week::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.Week)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Week, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Week*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(week1_, week7_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Week::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.Week)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool week1 = 1;
      case 1: {
        if (tag == 8) {
          set_has_week1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &week1_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_week2;
        break;
      }

      // required bool week2 = 2;
      case 2: {
        if (tag == 16) {
         parse_week2:
          set_has_week2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &week2_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_week3;
        break;
      }

      // required bool week3 = 3;
      case 3: {
        if (tag == 24) {
         parse_week3:
          set_has_week3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &week3_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_week4;
        break;
      }

      // required bool week4 = 4;
      case 4: {
        if (tag == 32) {
         parse_week4:
          set_has_week4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &week4_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_week5;
        break;
      }

      // required bool week5 = 5;
      case 5: {
        if (tag == 40) {
         parse_week5:
          set_has_week5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &week5_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_week6;
        break;
      }

      // required bool week6 = 6;
      case 6: {
        if (tag == 48) {
         parse_week6:
          set_has_week6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &week6_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_week7;
        break;
      }

      // required bool week7 = 7;
      case 7: {
        if (tag == 56) {
         parse_week7:
          set_has_week7();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &week7_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.Week)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.Week)
  return false;
#undef DO_
}

void Week::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.Week)
  // required bool week1 = 1;
  if (has_week1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->week1(), output);
  }

  // required bool week2 = 2;
  if (has_week2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->week2(), output);
  }

  // required bool week3 = 3;
  if (has_week3()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->week3(), output);
  }

  // required bool week4 = 4;
  if (has_week4()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->week4(), output);
  }

  // required bool week5 = 5;
  if (has_week5()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->week5(), output);
  }

  // required bool week6 = 6;
  if (has_week6()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->week6(), output);
  }

  // required bool week7 = 7;
  if (has_week7()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->week7(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.Week)
}

::google::protobuf::uint8* Week::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.Week)
  // required bool week1 = 1;
  if (has_week1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->week1(), target);
  }

  // required bool week2 = 2;
  if (has_week2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->week2(), target);
  }

  // required bool week3 = 3;
  if (has_week3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->week3(), target);
  }

  // required bool week4 = 4;
  if (has_week4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->week4(), target);
  }

  // required bool week5 = 5;
  if (has_week5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->week5(), target);
  }

  // required bool week6 = 6;
  if (has_week6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->week6(), target);
  }

  // required bool week7 = 7;
  if (has_week7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->week7(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.Week)
  return target;
}

size_t Week::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Czhtdev.Week)
  size_t total_size = 0;

  if (has_week1()) {
    // required bool week1 = 1;
    total_size += 1 + 1;
  }

  if (has_week2()) {
    // required bool week2 = 2;
    total_size += 1 + 1;
  }

  if (has_week3()) {
    // required bool week3 = 3;
    total_size += 1 + 1;
  }

  if (has_week4()) {
    // required bool week4 = 4;
    total_size += 1 + 1;
  }

  if (has_week5()) {
    // required bool week5 = 5;
    total_size += 1 + 1;
  }

  if (has_week6()) {
    // required bool week6 = 6;
    total_size += 1 + 1;
  }

  if (has_week7()) {
    // required bool week7 = 7;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Week::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.Week)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required bool week1 = 1;
    total_size += 1 + 1;

    // required bool week2 = 2;
    total_size += 1 + 1;

    // required bool week3 = 3;
    total_size += 1 + 1;

    // required bool week4 = 4;
    total_size += 1 + 1;

    // required bool week5 = 5;
    total_size += 1 + 1;

    // required bool week6 = 6;
    total_size += 1 + 1;

    // required bool week7 = 7;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Week::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.Week)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Week* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Week>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.Week)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.Week)
    UnsafeMergeFrom(*source);
  }
}

void Week::MergeFrom(const Week& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.Week)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Week::UnsafeMergeFrom(const Week& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_week1()) {
      set_week1(from.week1());
    }
    if (from.has_week2()) {
      set_week2(from.week2());
    }
    if (from.has_week3()) {
      set_week3(from.week3());
    }
    if (from.has_week4()) {
      set_week4(from.week4());
    }
    if (from.has_week5()) {
      set_week5(from.week5());
    }
    if (from.has_week6()) {
      set_week6(from.week6());
    }
    if (from.has_week7()) {
      set_week7(from.week7());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Week::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.Week)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Week::CopyFrom(const Week& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.Week)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Week::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void Week::Swap(Week* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Week::InternalSwap(Week* other) {
  std::swap(week1_, other->week1_);
  std::swap(week2_, other->week2_);
  std::swap(week3_, other->week3_);
  std::swap(week4_, other->week4_);
  std::swap(week5_, other->week5_);
  std::swap(week6_, other->week6_);
  std::swap(week7_, other->week7_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Week::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Week_descriptor_;
  metadata.reflection = Week_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Week

// required bool week1 = 1;
bool Week::has_week1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Week::set_has_week1() {
  _has_bits_[0] |= 0x00000001u;
}
void Week::clear_has_week1() {
  _has_bits_[0] &= ~0x00000001u;
}
void Week::clear_week1() {
  week1_ = false;
  clear_has_week1();
}
bool Week::week1() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Week.week1)
  return week1_;
}
void Week::set_week1(bool value) {
  set_has_week1();
  week1_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.Week.week1)
}

// required bool week2 = 2;
bool Week::has_week2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Week::set_has_week2() {
  _has_bits_[0] |= 0x00000002u;
}
void Week::clear_has_week2() {
  _has_bits_[0] &= ~0x00000002u;
}
void Week::clear_week2() {
  week2_ = false;
  clear_has_week2();
}
bool Week::week2() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Week.week2)
  return week2_;
}
void Week::set_week2(bool value) {
  set_has_week2();
  week2_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.Week.week2)
}

// required bool week3 = 3;
bool Week::has_week3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Week::set_has_week3() {
  _has_bits_[0] |= 0x00000004u;
}
void Week::clear_has_week3() {
  _has_bits_[0] &= ~0x00000004u;
}
void Week::clear_week3() {
  week3_ = false;
  clear_has_week3();
}
bool Week::week3() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Week.week3)
  return week3_;
}
void Week::set_week3(bool value) {
  set_has_week3();
  week3_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.Week.week3)
}

// required bool week4 = 4;
bool Week::has_week4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Week::set_has_week4() {
  _has_bits_[0] |= 0x00000008u;
}
void Week::clear_has_week4() {
  _has_bits_[0] &= ~0x00000008u;
}
void Week::clear_week4() {
  week4_ = false;
  clear_has_week4();
}
bool Week::week4() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Week.week4)
  return week4_;
}
void Week::set_week4(bool value) {
  set_has_week4();
  week4_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.Week.week4)
}

// required bool week5 = 5;
bool Week::has_week5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Week::set_has_week5() {
  _has_bits_[0] |= 0x00000010u;
}
void Week::clear_has_week5() {
  _has_bits_[0] &= ~0x00000010u;
}
void Week::clear_week5() {
  week5_ = false;
  clear_has_week5();
}
bool Week::week5() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Week.week5)
  return week5_;
}
void Week::set_week5(bool value) {
  set_has_week5();
  week5_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.Week.week5)
}

// required bool week6 = 6;
bool Week::has_week6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Week::set_has_week6() {
  _has_bits_[0] |= 0x00000020u;
}
void Week::clear_has_week6() {
  _has_bits_[0] &= ~0x00000020u;
}
void Week::clear_week6() {
  week6_ = false;
  clear_has_week6();
}
bool Week::week6() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Week.week6)
  return week6_;
}
void Week::set_week6(bool value) {
  set_has_week6();
  week6_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.Week.week6)
}

// required bool week7 = 7;
bool Week::has_week7() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Week::set_has_week7() {
  _has_bits_[0] |= 0x00000040u;
}
void Week::clear_has_week7() {
  _has_bits_[0] &= ~0x00000040u;
}
void Week::clear_week7() {
  week7_ = false;
  clear_has_week7();
}
bool Week::week7() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Week.week7)
  return week7_;
}
void Week::set_week7(bool value) {
  set_has_week7();
  week7_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.Week.week7)
}

inline const Week* Week::internal_default_instance() {
  return &Week_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeAuth::kStartDateFieldNumber;
const int TimeAuth::kEndDateFieldNumber;
const int TimeAuth::kStartTimeFieldNumber;
const int TimeAuth::kEndTimeFieldNumber;
const int TimeAuth::kWeekdayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeAuth::TimeAuth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.TimeAuth)
}

void TimeAuth::InitAsDefaultInstance() {
  weekday_ = const_cast< ::Czhtdev::Week*>(
      ::Czhtdev::Week::internal_default_instance());
}

TimeAuth::TimeAuth(const TimeAuth& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.TimeAuth)
}

void TimeAuth::SharedCtor() {
  _cached_size_ = 0;
  weekday_ = NULL;
  ::memset(&start_date_, 0, reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_date_) + sizeof(end_time_));
}

TimeAuth::~TimeAuth() {
  // @@protoc_insertion_point(destructor:Czhtdev.TimeAuth)
  SharedDtor();
}

void TimeAuth::SharedDtor() {
  if (this != &TimeAuth_default_instance_.get()) {
    delete weekday_;
  }
}

void TimeAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeAuth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeAuth_descriptor_;
}

const TimeAuth& TimeAuth::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TimeAuth> TimeAuth_default_instance_;

TimeAuth* TimeAuth::New(::google::protobuf::Arena* arena) const {
  TimeAuth* n = new TimeAuth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.TimeAuth)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TimeAuth, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TimeAuth*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(start_date_, end_time_);
    if (has_weekday()) {
      if (weekday_ != NULL) weekday_->::Czhtdev::Week::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TimeAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.TimeAuth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 start_date = 1;
      case 1: {
        if (tag == 8) {
          set_has_start_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_date_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_date;
        break;
      }

      // required uint64 end_date = 2;
      case 2: {
        if (tag == 16) {
         parse_end_date:
          set_has_end_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_date_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }

      // required int32 start_time = 3;
      case 3: {
        if (tag == 24) {
         parse_start_time:
          set_has_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }

      // required int32 end_time = 4;
      case 4: {
        if (tag == 32) {
         parse_end_time:
          set_has_end_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_weekday;
        break;
      }

      // optional .Czhtdev.Week weekday = 5;
      case 5: {
        if (tag == 42) {
         parse_weekday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weekday()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.TimeAuth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.TimeAuth)
  return false;
#undef DO_
}

void TimeAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.TimeAuth)
  // required uint64 start_date = 1;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_date(), output);
  }

  // required uint64 end_date = 2;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_date(), output);
  }

  // required int32 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start_time(), output);
  }

  // required int32 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->end_time(), output);
  }

  // optional .Czhtdev.Week weekday = 5;
  if (has_weekday()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->weekday_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.TimeAuth)
}

::google::protobuf::uint8* TimeAuth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.TimeAuth)
  // required uint64 start_date = 1;
  if (has_start_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_date(), target);
  }

  // required uint64 end_date = 2;
  if (has_end_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_date(), target);
  }

  // required int32 start_time = 3;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start_time(), target);
  }

  // required int32 end_time = 4;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->end_time(), target);
  }

  // optional .Czhtdev.Week weekday = 5;
  if (has_weekday()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->weekday_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.TimeAuth)
  return target;
}

size_t TimeAuth::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Czhtdev.TimeAuth)
  size_t total_size = 0;

  if (has_start_date()) {
    // required uint64 start_date = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_date());
  }

  if (has_end_date()) {
    // required uint64 end_date = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_date());
  }

  if (has_start_time()) {
    // required int32 start_time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start_time());
  }

  if (has_end_time()) {
    // required int32 end_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end_time());
  }

  return total_size;
}
size_t TimeAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.TimeAuth)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 start_date = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_date());

    // required uint64 end_date = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_date());

    // required int32 start_time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start_time());

    // required int32 end_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .Czhtdev.Week weekday = 5;
  if (has_weekday()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->weekday_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeAuth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.TimeAuth)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TimeAuth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeAuth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.TimeAuth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.TimeAuth)
    UnsafeMergeFrom(*source);
  }
}

void TimeAuth::MergeFrom(const TimeAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.TimeAuth)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TimeAuth::UnsafeMergeFrom(const TimeAuth& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_weekday()) {
      mutable_weekday()->::Czhtdev::Week::MergeFrom(from.weekday());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void TimeAuth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.TimeAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeAuth::CopyFrom(const TimeAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.TimeAuth)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TimeAuth::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_weekday()) {
    if (!this->weekday_->IsInitialized()) return false;
  }
  return true;
}

void TimeAuth::Swap(TimeAuth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeAuth::InternalSwap(TimeAuth* other) {
  std::swap(start_date_, other->start_date_);
  std::swap(end_date_, other->end_date_);
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(weekday_, other->weekday_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeAuth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeAuth_descriptor_;
  metadata.reflection = TimeAuth_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeAuth

// required uint64 start_date = 1;
bool TimeAuth::has_start_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimeAuth::set_has_start_date() {
  _has_bits_[0] |= 0x00000001u;
}
void TimeAuth::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimeAuth::clear_start_date() {
  start_date_ = GOOGLE_ULONGLONG(0);
  clear_has_start_date();
}
::google::protobuf::uint64 TimeAuth::start_date() const {
  // @@protoc_insertion_point(field_get:Czhtdev.TimeAuth.start_date)
  return start_date_;
}
void TimeAuth::set_start_date(::google::protobuf::uint64 value) {
  set_has_start_date();
  start_date_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.TimeAuth.start_date)
}

// required uint64 end_date = 2;
bool TimeAuth::has_end_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimeAuth::set_has_end_date() {
  _has_bits_[0] |= 0x00000002u;
}
void TimeAuth::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000002u;
}
void TimeAuth::clear_end_date() {
  end_date_ = GOOGLE_ULONGLONG(0);
  clear_has_end_date();
}
::google::protobuf::uint64 TimeAuth::end_date() const {
  // @@protoc_insertion_point(field_get:Czhtdev.TimeAuth.end_date)
  return end_date_;
}
void TimeAuth::set_end_date(::google::protobuf::uint64 value) {
  set_has_end_date();
  end_date_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.TimeAuth.end_date)
}

// required int32 start_time = 3;
bool TimeAuth::has_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TimeAuth::set_has_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
void TimeAuth::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void TimeAuth::clear_start_time() {
  start_time_ = 0;
  clear_has_start_time();
}
::google::protobuf::int32 TimeAuth::start_time() const {
  // @@protoc_insertion_point(field_get:Czhtdev.TimeAuth.start_time)
  return start_time_;
}
void TimeAuth::set_start_time(::google::protobuf::int32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.TimeAuth.start_time)
}

// required int32 end_time = 4;
bool TimeAuth::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TimeAuth::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
void TimeAuth::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void TimeAuth::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
::google::protobuf::int32 TimeAuth::end_time() const {
  // @@protoc_insertion_point(field_get:Czhtdev.TimeAuth.end_time)
  return end_time_;
}
void TimeAuth::set_end_time(::google::protobuf::int32 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.TimeAuth.end_time)
}

// optional .Czhtdev.Week weekday = 5;
bool TimeAuth::has_weekday() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TimeAuth::set_has_weekday() {
  _has_bits_[0] |= 0x00000010u;
}
void TimeAuth::clear_has_weekday() {
  _has_bits_[0] &= ~0x00000010u;
}
void TimeAuth::clear_weekday() {
  if (weekday_ != NULL) weekday_->::Czhtdev::Week::Clear();
  clear_has_weekday();
}
const ::Czhtdev::Week& TimeAuth::weekday() const {
  // @@protoc_insertion_point(field_get:Czhtdev.TimeAuth.weekday)
  return weekday_ != NULL ? *weekday_
                         : *::Czhtdev::Week::internal_default_instance();
}
::Czhtdev::Week* TimeAuth::mutable_weekday() {
  set_has_weekday();
  if (weekday_ == NULL) {
    weekday_ = new ::Czhtdev::Week;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.TimeAuth.weekday)
  return weekday_;
}
::Czhtdev::Week* TimeAuth::release_weekday() {
  // @@protoc_insertion_point(field_release:Czhtdev.TimeAuth.weekday)
  clear_has_weekday();
  ::Czhtdev::Week* temp = weekday_;
  weekday_ = NULL;
  return temp;
}
void TimeAuth::set_allocated_weekday(::Czhtdev::Week* weekday) {
  delete weekday_;
  weekday_ = weekday;
  if (weekday) {
    set_has_weekday();
  } else {
    clear_has_weekday();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.TimeAuth.weekday)
}

inline const TimeAuth* TimeAuth::internal_default_instance() {
  return &TimeAuth_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserPic::kUserPicIdFieldNumber;
const int UserPic::kFaceDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserPic::UserPic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.UserPic)
}

void UserPic::InitAsDefaultInstance() {
}

UserPic::UserPic(const UserPic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.UserPic)
}

void UserPic::SharedCtor() {
  _cached_size_ = 0;
  face_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_pic_id_ = 0;
}

UserPic::~UserPic() {
  // @@protoc_insertion_point(destructor:Czhtdev.UserPic)
  SharedDtor();
}

void UserPic::SharedDtor() {
  face_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserPic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserPic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserPic_descriptor_;
}

const UserPic& UserPic::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UserPic> UserPic_default_instance_;

UserPic* UserPic::New(::google::protobuf::Arena* arena) const {
  UserPic* n = new UserPic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserPic::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.UserPic)
  if (_has_bits_[0 / 32] & 3u) {
    user_pic_id_ = 0;
    if (has_face_data()) {
      face_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserPic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.UserPic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_pic_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_user_pic_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_pic_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_face_data;
        break;
      }

      // required bytes face_data = 2;
      case 2: {
        if (tag == 18) {
         parse_face_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_face_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.UserPic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.UserPic)
  return false;
#undef DO_
}

void UserPic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.UserPic)
  // required int32 user_pic_id = 1;
  if (has_user_pic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_pic_id(), output);
  }

  // required bytes face_data = 2;
  if (has_face_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->face_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.UserPic)
}

::google::protobuf::uint8* UserPic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.UserPic)
  // required int32 user_pic_id = 1;
  if (has_user_pic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_pic_id(), target);
  }

  // required bytes face_data = 2;
  if (has_face_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->face_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.UserPic)
  return target;
}

size_t UserPic::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Czhtdev.UserPic)
  size_t total_size = 0;

  if (has_user_pic_id()) {
    // required int32 user_pic_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_pic_id());
  }

  if (has_face_data()) {
    // required bytes face_data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->face_data());
  }

  return total_size;
}
size_t UserPic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.UserPic)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 user_pic_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_pic_id());

    // required bytes face_data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->face_data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserPic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.UserPic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserPic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserPic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.UserPic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.UserPic)
    UnsafeMergeFrom(*source);
  }
}

void UserPic::MergeFrom(const UserPic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.UserPic)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UserPic::UnsafeMergeFrom(const UserPic& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_pic_id()) {
      set_user_pic_id(from.user_pic_id());
    }
    if (from.has_face_data()) {
      set_has_face_data();
      face_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.face_data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void UserPic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.UserPic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPic::CopyFrom(const UserPic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.UserPic)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UserPic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserPic::Swap(UserPic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserPic::InternalSwap(UserPic* other) {
  std::swap(user_pic_id_, other->user_pic_id_);
  face_data_.Swap(&other->face_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserPic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserPic_descriptor_;
  metadata.reflection = UserPic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserPic

// required int32 user_pic_id = 1;
bool UserPic::has_user_pic_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserPic::set_has_user_pic_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserPic::clear_has_user_pic_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserPic::clear_user_pic_id() {
  user_pic_id_ = 0;
  clear_has_user_pic_id();
}
::google::protobuf::int32 UserPic::user_pic_id() const {
  // @@protoc_insertion_point(field_get:Czhtdev.UserPic.user_pic_id)
  return user_pic_id_;
}
void UserPic::set_user_pic_id(::google::protobuf::int32 value) {
  set_has_user_pic_id();
  user_pic_id_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.UserPic.user_pic_id)
}

// required bytes face_data = 2;
bool UserPic::has_face_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserPic::set_has_face_data() {
  _has_bits_[0] |= 0x00000002u;
}
void UserPic::clear_has_face_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserPic::clear_face_data() {
  face_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_face_data();
}
const ::std::string& UserPic::face_data() const {
  // @@protoc_insertion_point(field_get:Czhtdev.UserPic.face_data)
  return face_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserPic::set_face_data(const ::std::string& value) {
  set_has_face_data();
  face_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.UserPic.face_data)
}
void UserPic::set_face_data(const char* value) {
  set_has_face_data();
  face_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.UserPic.face_data)
}
void UserPic::set_face_data(const void* value, size_t size) {
  set_has_face_data();
  face_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.UserPic.face_data)
}
::std::string* UserPic::mutable_face_data() {
  set_has_face_data();
  // @@protoc_insertion_point(field_mutable:Czhtdev.UserPic.face_data)
  return face_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserPic::release_face_data() {
  // @@protoc_insertion_point(field_release:Czhtdev.UserPic.face_data)
  clear_has_face_data();
  return face_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserPic::set_allocated_face_data(::std::string* face_data) {
  if (face_data != NULL) {
    set_has_face_data();
  } else {
    clear_has_face_data();
  }
  face_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), face_data);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.UserPic.face_data)
}

inline const UserPic* UserPic::internal_default_instance() {
  return &UserPic_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User::kUserIdFieldNumber;
const int User::kUserNameFieldNumber;
const int User::kSexFieldNumber;
const int User::kUserAreasFieldNumber;
const int User::kUserRegisterPicsFieldNumber;
const int User::kUserTypeFieldNumber;
const int User::kVisitStarttimeFieldNumber;
const int User::kVisitEndtimeFieldNumber;
const int User::kUserTimeAuthFieldNumber;
const int User::kFingerprintDataFieldNumber;
const int User::kCompanyIdFieldNumber;
const int User::kCardFieldNumber;
const int User::kIdCardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User::User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.User)
}

void User::InitAsDefaultInstance() {
  user_time_auth_ = const_cast< ::Czhtdev::TimeAuth*>(
      ::Czhtdev::TimeAuth::internal_default_instance());
}

User::User(const User& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.User)
}

void User::SharedCtor() {
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fingerprint_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_card_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_time_auth_ = NULL;
  ::memset(&user_areas_, 0, reinterpret_cast<char*>(&visit_endtime_) -
    reinterpret_cast<char*>(&user_areas_) + sizeof(visit_endtime_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:Czhtdev.User)
  SharedDtor();
}

void User::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fingerprint_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_card_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &User_default_instance_.get()) {
    delete user_time_auth_;
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<User> User_default_instance_;

User* User::New(::google::protobuf::Arena* arena) const {
  User* n = new User;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void User::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.User)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(User, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<User*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 239u) {
    ZR_(user_areas_, visit_endtime_);
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_name()) {
      user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sex()) {
      sex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 7936u) {
    if (has_user_time_auth()) {
      if (user_time_auth_ != NULL) user_time_auth_->::Czhtdev::TimeAuth::Clear();
    }
    if (has_fingerprint_data()) {
      fingerprint_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_company_id()) {
      company_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_card()) {
      card_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_id_card()) {
      id_card_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  user_register_pics_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.User.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // required string user_name = 2;
      case 2: {
        if (tag == 18) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.User.user_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sex;
        break;
      }

      // required string sex = 3;
      case 3: {
        if (tag == 26) {
         parse_sex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sex().data(), this->sex().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.User.sex");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_user_areas;
        break;
      }

      // required bool user_areas = 4;
      case 4: {
        if (tag == 32) {
         parse_user_areas:
          set_has_user_areas();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &user_areas_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user_register_pics;
        break;
      }

      // repeated .Czhtdev.UserPic user_register_pics = 5;
      case 5: {
        if (tag == 42) {
         parse_user_register_pics:
          DO_(input->IncrementRecursionDepth());
         parse_loop_user_register_pics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user_register_pics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_user_register_pics;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_user_type;
        break;
      }

      // optional int32 user_type = 6;
      case 6: {
        if (tag == 48) {
         parse_user_type:
          set_has_user_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_visit_starttime;
        break;
      }

      // optional uint64 visit_starttime = 7;
      case 7: {
        if (tag == 56) {
         parse_visit_starttime:
          set_has_visit_starttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &visit_starttime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_visit_endtime;
        break;
      }

      // optional uint64 visit_endtime = 8;
      case 8: {
        if (tag == 64) {
         parse_visit_endtime:
          set_has_visit_endtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &visit_endtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_user_time_auth;
        break;
      }

      // optional .Czhtdev.TimeAuth user_time_auth = 9;
      case 9: {
        if (tag == 74) {
         parse_user_time_auth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_time_auth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_fingerprint_data;
        break;
      }

      // optional bytes fingerprint_data = 10;
      case 10: {
        if (tag == 82) {
         parse_fingerprint_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fingerprint_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_company_id;
        break;
      }

      // optional string company_id = 11;
      case 11: {
        if (tag == 90) {
         parse_company_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->company_id().data(), this->company_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.User.company_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_card;
        break;
      }

      // optional string card = 12;
      case 12: {
        if (tag == 98) {
         parse_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card().data(), this->card().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.User.card");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_id_card;
        break;
      }

      // optional string id_card = 13;
      case 13: {
        if (tag == 106) {
         parse_id_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id_card()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id_card().data(), this->id_card().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.User.id_card");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.User)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.User.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.User.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_name(), output);
  }

  // required string sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sex().data(), this->sex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.User.sex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sex(), output);
  }

  // required bool user_areas = 4;
  if (has_user_areas()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->user_areas(), output);
  }

  // repeated .Czhtdev.UserPic user_register_pics = 5;
  for (unsigned int i = 0, n = this->user_register_pics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->user_register_pics(i), output);
  }

  // optional int32 user_type = 6;
  if (has_user_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->user_type(), output);
  }

  // optional uint64 visit_starttime = 7;
  if (has_visit_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->visit_starttime(), output);
  }

  // optional uint64 visit_endtime = 8;
  if (has_visit_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->visit_endtime(), output);
  }

  // optional .Czhtdev.TimeAuth user_time_auth = 9;
  if (has_user_time_auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->user_time_auth_, output);
  }

  // optional bytes fingerprint_data = 10;
  if (has_fingerprint_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->fingerprint_data(), output);
  }

  // optional string company_id = 11;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company_id().data(), this->company_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.User.company_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->company_id(), output);
  }

  // optional string card = 12;
  if (has_card()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card().data(), this->card().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.User.card");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->card(), output);
  }

  // optional string id_card = 13;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id_card().data(), this->id_card().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.User.id_card");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->id_card(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.User)
}

::google::protobuf::uint8* User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.User)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.User.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.User.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  // required string sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sex().data(), this->sex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.User.sex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sex(), target);
  }

  // required bool user_areas = 4;
  if (has_user_areas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->user_areas(), target);
  }

  // repeated .Czhtdev.UserPic user_register_pics = 5;
  for (unsigned int i = 0, n = this->user_register_pics_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->user_register_pics(i), false, target);
  }

  // optional int32 user_type = 6;
  if (has_user_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->user_type(), target);
  }

  // optional uint64 visit_starttime = 7;
  if (has_visit_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->visit_starttime(), target);
  }

  // optional uint64 visit_endtime = 8;
  if (has_visit_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->visit_endtime(), target);
  }

  // optional .Czhtdev.TimeAuth user_time_auth = 9;
  if (has_user_time_auth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->user_time_auth_, false, target);
  }

  // optional bytes fingerprint_data = 10;
  if (has_fingerprint_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->fingerprint_data(), target);
  }

  // optional string company_id = 11;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company_id().data(), this->company_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.User.company_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->company_id(), target);
  }

  // optional string card = 12;
  if (has_card()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card().data(), this->card().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.User.card");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->card(), target);
  }

  // optional string id_card = 13;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id_card().data(), this->id_card().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.User.id_card");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->id_card(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.User)
  return target;
}

size_t User::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Czhtdev.User)
  size_t total_size = 0;

  if (has_user_id()) {
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  if (has_user_name()) {
    // required string user_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  if (has_sex()) {
    // required string sex = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sex());
  }

  if (has_user_areas()) {
    // required bool user_areas = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.User)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());

    // required string user_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());

    // required string sex = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sex());

    // required bool user_areas = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 224u) {
    // optional int32 user_type = 6;
    if (has_user_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_type());
    }

    // optional uint64 visit_starttime = 7;
    if (has_visit_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->visit_starttime());
    }

    // optional uint64 visit_endtime = 8;
    if (has_visit_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->visit_endtime());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional .Czhtdev.TimeAuth user_time_auth = 9;
    if (has_user_time_auth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_time_auth_);
    }

    // optional bytes fingerprint_data = 10;
    if (has_fingerprint_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fingerprint_data());
    }

    // optional string company_id = 11;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company_id());
    }

    // optional string card = 12;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card());
    }

    // optional string id_card = 13;
    if (has_id_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id_card());
    }

  }
  // repeated .Czhtdev.UserPic user_register_pics = 5;
  {
    unsigned int count = this->user_register_pics_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_register_pics(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.User)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const User* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.User)
    UnsafeMergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.User)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void User::UnsafeMergeFrom(const User& from) {
  GOOGLE_DCHECK(&from != this);
  user_register_pics_.MergeFrom(from.user_register_pics_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_user_name()) {
      set_has_user_name();
      user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
    }
    if (from.has_sex()) {
      set_has_sex();
      sex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sex_);
    }
    if (from.has_user_areas()) {
      set_user_areas(from.user_areas());
    }
    if (from.has_user_type()) {
      set_user_type(from.user_type());
    }
    if (from.has_visit_starttime()) {
      set_visit_starttime(from.visit_starttime());
    }
    if (from.has_visit_endtime()) {
      set_visit_endtime(from.visit_endtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_user_time_auth()) {
      mutable_user_time_auth()->::Czhtdev::TimeAuth::MergeFrom(from.user_time_auth());
    }
    if (from.has_fingerprint_data()) {
      set_has_fingerprint_data();
      fingerprint_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fingerprint_data_);
    }
    if (from.has_company_id()) {
      set_has_company_id();
      company_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.company_id_);
    }
    if (from.has_card()) {
      set_has_card();
      card_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_);
    }
    if (from.has_id_card()) {
      set_has_id_card();
      id_card_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_card_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.User)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool User::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->user_register_pics())) return false;
  if (has_user_time_auth()) {
    if (!this->user_time_auth_->IsInitialized()) return false;
  }
  return true;
}

void User::Swap(User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User::InternalSwap(User* other) {
  user_id_.Swap(&other->user_id_);
  user_name_.Swap(&other->user_name_);
  sex_.Swap(&other->sex_);
  std::swap(user_areas_, other->user_areas_);
  user_register_pics_.UnsafeArenaSwap(&other->user_register_pics_);
  std::swap(user_type_, other->user_type_);
  std::swap(visit_starttime_, other->visit_starttime_);
  std::swap(visit_endtime_, other->visit_endtime_);
  std::swap(user_time_auth_, other->user_time_auth_);
  fingerprint_data_.Swap(&other->fingerprint_data_);
  company_id_.Swap(&other->company_id_);
  card_.Swap(&other->card_);
  id_card_.Swap(&other->id_card_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// User

// required string user_id = 1;
bool User::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void User::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void User::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void User::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& User::user_id() const {
  // @@protoc_insertion_point(field_get:Czhtdev.User.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.User.user_id)
}
void User::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.User.user_id)
}
void User::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.User.user_id)
}
::std::string* User::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:Czhtdev.User.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_user_id() {
  // @@protoc_insertion_point(field_release:Czhtdev.User.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.User.user_id)
}

// required string user_name = 2;
bool User::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void User::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
void User::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void User::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
const ::std::string& User::user_name() const {
  // @@protoc_insertion_point(field_get:Czhtdev.User.user_name)
  return user_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.User.user_name)
}
void User::set_user_name(const char* value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.User.user_name)
}
void User::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.User.user_name)
}
::std::string* User::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:Czhtdev.User.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_user_name() {
  // @@protoc_insertion_point(field_release:Czhtdev.User.user_name)
  clear_has_user_name();
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.User.user_name)
}

// required string sex = 3;
bool User::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void User::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
void User::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
void User::clear_sex() {
  sex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sex();
}
const ::std::string& User::sex() const {
  // @@protoc_insertion_point(field_get:Czhtdev.User.sex)
  return sex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_sex(const ::std::string& value) {
  set_has_sex();
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.User.sex)
}
void User::set_sex(const char* value) {
  set_has_sex();
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.User.sex)
}
void User::set_sex(const char* value, size_t size) {
  set_has_sex();
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.User.sex)
}
::std::string* User::mutable_sex() {
  set_has_sex();
  // @@protoc_insertion_point(field_mutable:Czhtdev.User.sex)
  return sex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_sex() {
  // @@protoc_insertion_point(field_release:Czhtdev.User.sex)
  clear_has_sex();
  return sex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_sex(::std::string* sex) {
  if (sex != NULL) {
    set_has_sex();
  } else {
    clear_has_sex();
  }
  sex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sex);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.User.sex)
}

// required bool user_areas = 4;
bool User::has_user_areas() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void User::set_has_user_areas() {
  _has_bits_[0] |= 0x00000008u;
}
void User::clear_has_user_areas() {
  _has_bits_[0] &= ~0x00000008u;
}
void User::clear_user_areas() {
  user_areas_ = false;
  clear_has_user_areas();
}
bool User::user_areas() const {
  // @@protoc_insertion_point(field_get:Czhtdev.User.user_areas)
  return user_areas_;
}
void User::set_user_areas(bool value) {
  set_has_user_areas();
  user_areas_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.User.user_areas)
}

// repeated .Czhtdev.UserPic user_register_pics = 5;
int User::user_register_pics_size() const {
  return user_register_pics_.size();
}
void User::clear_user_register_pics() {
  user_register_pics_.Clear();
}
const ::Czhtdev::UserPic& User::user_register_pics(int index) const {
  // @@protoc_insertion_point(field_get:Czhtdev.User.user_register_pics)
  return user_register_pics_.Get(index);
}
::Czhtdev::UserPic* User::mutable_user_register_pics(int index) {
  // @@protoc_insertion_point(field_mutable:Czhtdev.User.user_register_pics)
  return user_register_pics_.Mutable(index);
}
::Czhtdev::UserPic* User::add_user_register_pics() {
  // @@protoc_insertion_point(field_add:Czhtdev.User.user_register_pics)
  return user_register_pics_.Add();
}
::google::protobuf::RepeatedPtrField< ::Czhtdev::UserPic >*
User::mutable_user_register_pics() {
  // @@protoc_insertion_point(field_mutable_list:Czhtdev.User.user_register_pics)
  return &user_register_pics_;
}
const ::google::protobuf::RepeatedPtrField< ::Czhtdev::UserPic >&
User::user_register_pics() const {
  // @@protoc_insertion_point(field_list:Czhtdev.User.user_register_pics)
  return user_register_pics_;
}

// optional int32 user_type = 6;
bool User::has_user_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void User::set_has_user_type() {
  _has_bits_[0] |= 0x00000020u;
}
void User::clear_has_user_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void User::clear_user_type() {
  user_type_ = 0;
  clear_has_user_type();
}
::google::protobuf::int32 User::user_type() const {
  // @@protoc_insertion_point(field_get:Czhtdev.User.user_type)
  return user_type_;
}
void User::set_user_type(::google::protobuf::int32 value) {
  set_has_user_type();
  user_type_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.User.user_type)
}

// optional uint64 visit_starttime = 7;
bool User::has_visit_starttime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void User::set_has_visit_starttime() {
  _has_bits_[0] |= 0x00000040u;
}
void User::clear_has_visit_starttime() {
  _has_bits_[0] &= ~0x00000040u;
}
void User::clear_visit_starttime() {
  visit_starttime_ = GOOGLE_ULONGLONG(0);
  clear_has_visit_starttime();
}
::google::protobuf::uint64 User::visit_starttime() const {
  // @@protoc_insertion_point(field_get:Czhtdev.User.visit_starttime)
  return visit_starttime_;
}
void User::set_visit_starttime(::google::protobuf::uint64 value) {
  set_has_visit_starttime();
  visit_starttime_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.User.visit_starttime)
}

// optional uint64 visit_endtime = 8;
bool User::has_visit_endtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void User::set_has_visit_endtime() {
  _has_bits_[0] |= 0x00000080u;
}
void User::clear_has_visit_endtime() {
  _has_bits_[0] &= ~0x00000080u;
}
void User::clear_visit_endtime() {
  visit_endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_visit_endtime();
}
::google::protobuf::uint64 User::visit_endtime() const {
  // @@protoc_insertion_point(field_get:Czhtdev.User.visit_endtime)
  return visit_endtime_;
}
void User::set_visit_endtime(::google::protobuf::uint64 value) {
  set_has_visit_endtime();
  visit_endtime_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.User.visit_endtime)
}

// optional .Czhtdev.TimeAuth user_time_auth = 9;
bool User::has_user_time_auth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void User::set_has_user_time_auth() {
  _has_bits_[0] |= 0x00000100u;
}
void User::clear_has_user_time_auth() {
  _has_bits_[0] &= ~0x00000100u;
}
void User::clear_user_time_auth() {
  if (user_time_auth_ != NULL) user_time_auth_->::Czhtdev::TimeAuth::Clear();
  clear_has_user_time_auth();
}
const ::Czhtdev::TimeAuth& User::user_time_auth() const {
  // @@protoc_insertion_point(field_get:Czhtdev.User.user_time_auth)
  return user_time_auth_ != NULL ? *user_time_auth_
                         : *::Czhtdev::TimeAuth::internal_default_instance();
}
::Czhtdev::TimeAuth* User::mutable_user_time_auth() {
  set_has_user_time_auth();
  if (user_time_auth_ == NULL) {
    user_time_auth_ = new ::Czhtdev::TimeAuth;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.User.user_time_auth)
  return user_time_auth_;
}
::Czhtdev::TimeAuth* User::release_user_time_auth() {
  // @@protoc_insertion_point(field_release:Czhtdev.User.user_time_auth)
  clear_has_user_time_auth();
  ::Czhtdev::TimeAuth* temp = user_time_auth_;
  user_time_auth_ = NULL;
  return temp;
}
void User::set_allocated_user_time_auth(::Czhtdev::TimeAuth* user_time_auth) {
  delete user_time_auth_;
  user_time_auth_ = user_time_auth;
  if (user_time_auth) {
    set_has_user_time_auth();
  } else {
    clear_has_user_time_auth();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.User.user_time_auth)
}

// optional bytes fingerprint_data = 10;
bool User::has_fingerprint_data() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void User::set_has_fingerprint_data() {
  _has_bits_[0] |= 0x00000200u;
}
void User::clear_has_fingerprint_data() {
  _has_bits_[0] &= ~0x00000200u;
}
void User::clear_fingerprint_data() {
  fingerprint_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fingerprint_data();
}
const ::std::string& User::fingerprint_data() const {
  // @@protoc_insertion_point(field_get:Czhtdev.User.fingerprint_data)
  return fingerprint_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_fingerprint_data(const ::std::string& value) {
  set_has_fingerprint_data();
  fingerprint_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.User.fingerprint_data)
}
void User::set_fingerprint_data(const char* value) {
  set_has_fingerprint_data();
  fingerprint_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.User.fingerprint_data)
}
void User::set_fingerprint_data(const void* value, size_t size) {
  set_has_fingerprint_data();
  fingerprint_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.User.fingerprint_data)
}
::std::string* User::mutable_fingerprint_data() {
  set_has_fingerprint_data();
  // @@protoc_insertion_point(field_mutable:Czhtdev.User.fingerprint_data)
  return fingerprint_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_fingerprint_data() {
  // @@protoc_insertion_point(field_release:Czhtdev.User.fingerprint_data)
  clear_has_fingerprint_data();
  return fingerprint_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_fingerprint_data(::std::string* fingerprint_data) {
  if (fingerprint_data != NULL) {
    set_has_fingerprint_data();
  } else {
    clear_has_fingerprint_data();
  }
  fingerprint_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fingerprint_data);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.User.fingerprint_data)
}

// optional string company_id = 11;
bool User::has_company_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void User::set_has_company_id() {
  _has_bits_[0] |= 0x00000400u;
}
void User::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void User::clear_company_id() {
  company_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_company_id();
}
const ::std::string& User::company_id() const {
  // @@protoc_insertion_point(field_get:Czhtdev.User.company_id)
  return company_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_company_id(const ::std::string& value) {
  set_has_company_id();
  company_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.User.company_id)
}
void User::set_company_id(const char* value) {
  set_has_company_id();
  company_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.User.company_id)
}
void User::set_company_id(const char* value, size_t size) {
  set_has_company_id();
  company_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.User.company_id)
}
::std::string* User::mutable_company_id() {
  set_has_company_id();
  // @@protoc_insertion_point(field_mutable:Czhtdev.User.company_id)
  return company_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_company_id() {
  // @@protoc_insertion_point(field_release:Czhtdev.User.company_id)
  clear_has_company_id();
  return company_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_company_id(::std::string* company_id) {
  if (company_id != NULL) {
    set_has_company_id();
  } else {
    clear_has_company_id();
  }
  company_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company_id);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.User.company_id)
}

// optional string card = 12;
bool User::has_card() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void User::set_has_card() {
  _has_bits_[0] |= 0x00000800u;
}
void User::clear_has_card() {
  _has_bits_[0] &= ~0x00000800u;
}
void User::clear_card() {
  card_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card();
}
const ::std::string& User::card() const {
  // @@protoc_insertion_point(field_get:Czhtdev.User.card)
  return card_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_card(const ::std::string& value) {
  set_has_card();
  card_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.User.card)
}
void User::set_card(const char* value) {
  set_has_card();
  card_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.User.card)
}
void User::set_card(const char* value, size_t size) {
  set_has_card();
  card_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.User.card)
}
::std::string* User::mutable_card() {
  set_has_card();
  // @@protoc_insertion_point(field_mutable:Czhtdev.User.card)
  return card_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_card() {
  // @@protoc_insertion_point(field_release:Czhtdev.User.card)
  clear_has_card();
  return card_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_card(::std::string* card) {
  if (card != NULL) {
    set_has_card();
  } else {
    clear_has_card();
  }
  card_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.User.card)
}

// optional string id_card = 13;
bool User::has_id_card() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void User::set_has_id_card() {
  _has_bits_[0] |= 0x00001000u;
}
void User::clear_has_id_card() {
  _has_bits_[0] &= ~0x00001000u;
}
void User::clear_id_card() {
  id_card_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id_card();
}
const ::std::string& User::id_card() const {
  // @@protoc_insertion_point(field_get:Czhtdev.User.id_card)
  return id_card_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_id_card(const ::std::string& value) {
  set_has_id_card();
  id_card_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.User.id_card)
}
void User::set_id_card(const char* value) {
  set_has_id_card();
  id_card_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.User.id_card)
}
void User::set_id_card(const char* value, size_t size) {
  set_has_id_card();
  id_card_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.User.id_card)
}
::std::string* User::mutable_id_card() {
  set_has_id_card();
  // @@protoc_insertion_point(field_mutable:Czhtdev.User.id_card)
  return id_card_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_id_card() {
  // @@protoc_insertion_point(field_release:Czhtdev.User.id_card)
  clear_has_id_card();
  return id_card_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_id_card(::std::string* id_card) {
  if (id_card != NULL) {
    set_has_id_card();
  } else {
    clear_has_id_card();
  }
  id_card_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id_card);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.User.id_card)
}

inline const User* User::internal_default_instance() {
  return &User_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserList::kUserIdFieldNumber;
const int UserList::kUserNameFieldNumber;
const int UserList::kSexFieldNumber;
const int UserList::kUserAreasFieldNumber;
const int UserList::kPicsIdFieldNumber;
const int UserList::kUserTypeFieldNumber;
const int UserList::kVisitStarttimeFieldNumber;
const int UserList::kVisitEndtimeFieldNumber;
const int UserList::kUserTimeAuthFieldNumber;
const int UserList::kCompanyIdFieldNumber;
const int UserList::kCardFieldNumber;
const int UserList::kIdCardFieldNumber;
const int UserList::kModifyTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserList::UserList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.UserList)
}

void UserList::InitAsDefaultInstance() {
  user_time_auth_ = const_cast< ::Czhtdev::TimeAuth*>(
      ::Czhtdev::TimeAuth::internal_default_instance());
}

UserList::UserList(const UserList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.UserList)
}

void UserList::SharedCtor() {
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_card_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_time_auth_ = NULL;
  ::memset(&user_areas_, 0, reinterpret_cast<char*>(&modify_type_) -
    reinterpret_cast<char*>(&user_areas_) + sizeof(modify_type_));
}

UserList::~UserList() {
  // @@protoc_insertion_point(destructor:Czhtdev.UserList)
  SharedDtor();
}

void UserList::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_card_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &UserList_default_instance_.get()) {
    delete user_time_auth_;
  }
}

void UserList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserList_descriptor_;
}

const UserList& UserList::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UserList> UserList_default_instance_;

UserList* UserList::New(::google::protobuf::Arena* arena) const {
  UserList* n = new UserList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserList::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.UserList)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserList, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserList*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 239u) {
    ZR_(user_areas_, visit_endtime_);
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_name()) {
      user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sex()) {
      sex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 7936u) {
    if (has_user_time_auth()) {
      if (user_time_auth_ != NULL) user_time_auth_->::Czhtdev::TimeAuth::Clear();
    }
    if (has_company_id()) {
      company_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_card()) {
      card_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_id_card()) {
      id_card_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    modify_type_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  pics_id_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.UserList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.UserList.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // required string user_name = 2;
      case 2: {
        if (tag == 18) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.UserList.user_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sex;
        break;
      }

      // required string sex = 3;
      case 3: {
        if (tag == 26) {
         parse_sex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sex().data(), this->sex().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.UserList.sex");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_user_areas;
        break;
      }

      // required bool user_areas = 4;
      case 4: {
        if (tag == 32) {
         parse_user_areas:
          set_has_user_areas();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &user_areas_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pics_id;
        break;
      }

      // repeated int32 pics_id = 5;
      case 5: {
        if (tag == 40) {
         parse_pics_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_pics_id())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pics_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pics_id;
        if (input->ExpectTag(48)) goto parse_user_type;
        break;
      }

      // optional int32 user_type = 6;
      case 6: {
        if (tag == 48) {
         parse_user_type:
          set_has_user_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_visit_starttime;
        break;
      }

      // optional uint64 visit_starttime = 7;
      case 7: {
        if (tag == 56) {
         parse_visit_starttime:
          set_has_visit_starttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &visit_starttime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_visit_endtime;
        break;
      }

      // optional uint64 visit_endtime = 8;
      case 8: {
        if (tag == 64) {
         parse_visit_endtime:
          set_has_visit_endtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &visit_endtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_user_time_auth;
        break;
      }

      // optional .Czhtdev.TimeAuth user_time_auth = 9;
      case 9: {
        if (tag == 74) {
         parse_user_time_auth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_time_auth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_company_id;
        break;
      }

      // optional string company_id = 10;
      case 10: {
        if (tag == 82) {
         parse_company_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->company_id().data(), this->company_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.UserList.company_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_card;
        break;
      }

      // optional string card = 11;
      case 11: {
        if (tag == 90) {
         parse_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card().data(), this->card().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.UserList.card");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_id_card;
        break;
      }

      // optional string id_card = 12;
      case 12: {
        if (tag == 98) {
         parse_id_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id_card()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id_card().data(), this->id_card().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.UserList.id_card");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_modify_type;
        break;
      }

      // optional int32 modify_type = 13;
      case 13: {
        if (tag == 104) {
         parse_modify_type:
          set_has_modify_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modify_type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.UserList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.UserList)
  return false;
#undef DO_
}

void UserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.UserList)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.UserList.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.UserList.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_name(), output);
  }

  // required string sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sex().data(), this->sex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.UserList.sex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sex(), output);
  }

  // required bool user_areas = 4;
  if (has_user_areas()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->user_areas(), output);
  }

  // repeated int32 pics_id = 5;
  for (int i = 0; i < this->pics_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->pics_id(i), output);
  }

  // optional int32 user_type = 6;
  if (has_user_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->user_type(), output);
  }

  // optional uint64 visit_starttime = 7;
  if (has_visit_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->visit_starttime(), output);
  }

  // optional uint64 visit_endtime = 8;
  if (has_visit_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->visit_endtime(), output);
  }

  // optional .Czhtdev.TimeAuth user_time_auth = 9;
  if (has_user_time_auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->user_time_auth_, output);
  }

  // optional string company_id = 10;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company_id().data(), this->company_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.UserList.company_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->company_id(), output);
  }

  // optional string card = 11;
  if (has_card()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card().data(), this->card().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.UserList.card");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->card(), output);
  }

  // optional string id_card = 12;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id_card().data(), this->id_card().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.UserList.id_card");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->id_card(), output);
  }

  // optional int32 modify_type = 13;
  if (has_modify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->modify_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.UserList)
}

::google::protobuf::uint8* UserList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.UserList)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.UserList.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.UserList.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  // required string sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sex().data(), this->sex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.UserList.sex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sex(), target);
  }

  // required bool user_areas = 4;
  if (has_user_areas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->user_areas(), target);
  }

  // repeated int32 pics_id = 5;
  for (int i = 0; i < this->pics_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->pics_id(i), target);
  }

  // optional int32 user_type = 6;
  if (has_user_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->user_type(), target);
  }

  // optional uint64 visit_starttime = 7;
  if (has_visit_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->visit_starttime(), target);
  }

  // optional uint64 visit_endtime = 8;
  if (has_visit_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->visit_endtime(), target);
  }

  // optional .Czhtdev.TimeAuth user_time_auth = 9;
  if (has_user_time_auth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->user_time_auth_, false, target);
  }

  // optional string company_id = 10;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->company_id().data(), this->company_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.UserList.company_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->company_id(), target);
  }

  // optional string card = 11;
  if (has_card()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card().data(), this->card().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.UserList.card");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->card(), target);
  }

  // optional string id_card = 12;
  if (has_id_card()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id_card().data(), this->id_card().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.UserList.id_card");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->id_card(), target);
  }

  // optional int32 modify_type = 13;
  if (has_modify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->modify_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.UserList)
  return target;
}

size_t UserList::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Czhtdev.UserList)
  size_t total_size = 0;

  if (has_user_id()) {
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  if (has_user_name()) {
    // required string user_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  if (has_sex()) {
    // required string sex = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sex());
  }

  if (has_user_areas()) {
    // required bool user_areas = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t UserList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.UserList)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());

    // required string user_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());

    // required string sex = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sex());

    // required bool user_areas = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 224u) {
    // optional int32 user_type = 6;
    if (has_user_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_type());
    }

    // optional uint64 visit_starttime = 7;
    if (has_visit_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->visit_starttime());
    }

    // optional uint64 visit_endtime = 8;
    if (has_visit_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->visit_endtime());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional .Czhtdev.TimeAuth user_time_auth = 9;
    if (has_user_time_auth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_time_auth_);
    }

    // optional string company_id = 10;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->company_id());
    }

    // optional string card = 11;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card());
    }

    // optional string id_card = 12;
    if (has_id_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id_card());
    }

    // optional int32 modify_type = 13;
    if (has_modify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modify_type());
    }

  }
  // repeated int32 pics_id = 5;
  {
    size_t data_size = 0;
    unsigned int count = this->pics_id_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pics_id(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->pics_id_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.UserList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.UserList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.UserList)
    UnsafeMergeFrom(*source);
  }
}

void UserList::MergeFrom(const UserList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.UserList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UserList::UnsafeMergeFrom(const UserList& from) {
  GOOGLE_DCHECK(&from != this);
  pics_id_.UnsafeMergeFrom(from.pics_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_user_name()) {
      set_has_user_name();
      user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
    }
    if (from.has_sex()) {
      set_has_sex();
      sex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sex_);
    }
    if (from.has_user_areas()) {
      set_user_areas(from.user_areas());
    }
    if (from.has_user_type()) {
      set_user_type(from.user_type());
    }
    if (from.has_visit_starttime()) {
      set_visit_starttime(from.visit_starttime());
    }
    if (from.has_visit_endtime()) {
      set_visit_endtime(from.visit_endtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_user_time_auth()) {
      mutable_user_time_auth()->::Czhtdev::TimeAuth::MergeFrom(from.user_time_auth());
    }
    if (from.has_company_id()) {
      set_has_company_id();
      company_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.company_id_);
    }
    if (from.has_card()) {
      set_has_card();
      card_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_);
    }
    if (from.has_id_card()) {
      set_has_id_card();
      id_card_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_card_);
    }
    if (from.has_modify_type()) {
      set_modify_type(from.modify_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void UserList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.UserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserList::CopyFrom(const UserList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.UserList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UserList::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_user_time_auth()) {
    if (!this->user_time_auth_->IsInitialized()) return false;
  }
  return true;
}

void UserList::Swap(UserList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserList::InternalSwap(UserList* other) {
  user_id_.Swap(&other->user_id_);
  user_name_.Swap(&other->user_name_);
  sex_.Swap(&other->sex_);
  std::swap(user_areas_, other->user_areas_);
  pics_id_.UnsafeArenaSwap(&other->pics_id_);
  std::swap(user_type_, other->user_type_);
  std::swap(visit_starttime_, other->visit_starttime_);
  std::swap(visit_endtime_, other->visit_endtime_);
  std::swap(user_time_auth_, other->user_time_auth_);
  company_id_.Swap(&other->company_id_);
  card_.Swap(&other->card_);
  id_card_.Swap(&other->id_card_);
  std::swap(modify_type_, other->modify_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserList_descriptor_;
  metadata.reflection = UserList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserList

// required string user_id = 1;
bool UserList::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserList::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserList::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserList::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& UserList::user_id() const {
  // @@protoc_insertion_point(field_get:Czhtdev.UserList.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserList::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.UserList.user_id)
}
void UserList::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.UserList.user_id)
}
void UserList::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.UserList.user_id)
}
::std::string* UserList::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:Czhtdev.UserList.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserList::release_user_id() {
  // @@protoc_insertion_point(field_release:Czhtdev.UserList.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserList::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.UserList.user_id)
}

// required string user_name = 2;
bool UserList::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserList::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
void UserList::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserList::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
const ::std::string& UserList::user_name() const {
  // @@protoc_insertion_point(field_get:Czhtdev.UserList.user_name)
  return user_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserList::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.UserList.user_name)
}
void UserList::set_user_name(const char* value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.UserList.user_name)
}
void UserList::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.UserList.user_name)
}
::std::string* UserList::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:Czhtdev.UserList.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserList::release_user_name() {
  // @@protoc_insertion_point(field_release:Czhtdev.UserList.user_name)
  clear_has_user_name();
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserList::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.UserList.user_name)
}

// required string sex = 3;
bool UserList::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserList::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
void UserList::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserList::clear_sex() {
  sex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sex();
}
const ::std::string& UserList::sex() const {
  // @@protoc_insertion_point(field_get:Czhtdev.UserList.sex)
  return sex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserList::set_sex(const ::std::string& value) {
  set_has_sex();
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.UserList.sex)
}
void UserList::set_sex(const char* value) {
  set_has_sex();
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.UserList.sex)
}
void UserList::set_sex(const char* value, size_t size) {
  set_has_sex();
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.UserList.sex)
}
::std::string* UserList::mutable_sex() {
  set_has_sex();
  // @@protoc_insertion_point(field_mutable:Czhtdev.UserList.sex)
  return sex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserList::release_sex() {
  // @@protoc_insertion_point(field_release:Czhtdev.UserList.sex)
  clear_has_sex();
  return sex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserList::set_allocated_sex(::std::string* sex) {
  if (sex != NULL) {
    set_has_sex();
  } else {
    clear_has_sex();
  }
  sex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sex);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.UserList.sex)
}

// required bool user_areas = 4;
bool UserList::has_user_areas() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserList::set_has_user_areas() {
  _has_bits_[0] |= 0x00000008u;
}
void UserList::clear_has_user_areas() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserList::clear_user_areas() {
  user_areas_ = false;
  clear_has_user_areas();
}
bool UserList::user_areas() const {
  // @@protoc_insertion_point(field_get:Czhtdev.UserList.user_areas)
  return user_areas_;
}
void UserList::set_user_areas(bool value) {
  set_has_user_areas();
  user_areas_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.UserList.user_areas)
}

// repeated int32 pics_id = 5;
int UserList::pics_id_size() const {
  return pics_id_.size();
}
void UserList::clear_pics_id() {
  pics_id_.Clear();
}
::google::protobuf::int32 UserList::pics_id(int index) const {
  // @@protoc_insertion_point(field_get:Czhtdev.UserList.pics_id)
  return pics_id_.Get(index);
}
void UserList::set_pics_id(int index, ::google::protobuf::int32 value) {
  pics_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:Czhtdev.UserList.pics_id)
}
void UserList::add_pics_id(::google::protobuf::int32 value) {
  pics_id_.Add(value);
  // @@protoc_insertion_point(field_add:Czhtdev.UserList.pics_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserList::pics_id() const {
  // @@protoc_insertion_point(field_list:Czhtdev.UserList.pics_id)
  return pics_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserList::mutable_pics_id() {
  // @@protoc_insertion_point(field_mutable_list:Czhtdev.UserList.pics_id)
  return &pics_id_;
}

// optional int32 user_type = 6;
bool UserList::has_user_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserList::set_has_user_type() {
  _has_bits_[0] |= 0x00000020u;
}
void UserList::clear_has_user_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserList::clear_user_type() {
  user_type_ = 0;
  clear_has_user_type();
}
::google::protobuf::int32 UserList::user_type() const {
  // @@protoc_insertion_point(field_get:Czhtdev.UserList.user_type)
  return user_type_;
}
void UserList::set_user_type(::google::protobuf::int32 value) {
  set_has_user_type();
  user_type_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.UserList.user_type)
}

// optional uint64 visit_starttime = 7;
bool UserList::has_visit_starttime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UserList::set_has_visit_starttime() {
  _has_bits_[0] |= 0x00000040u;
}
void UserList::clear_has_visit_starttime() {
  _has_bits_[0] &= ~0x00000040u;
}
void UserList::clear_visit_starttime() {
  visit_starttime_ = GOOGLE_ULONGLONG(0);
  clear_has_visit_starttime();
}
::google::protobuf::uint64 UserList::visit_starttime() const {
  // @@protoc_insertion_point(field_get:Czhtdev.UserList.visit_starttime)
  return visit_starttime_;
}
void UserList::set_visit_starttime(::google::protobuf::uint64 value) {
  set_has_visit_starttime();
  visit_starttime_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.UserList.visit_starttime)
}

// optional uint64 visit_endtime = 8;
bool UserList::has_visit_endtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UserList::set_has_visit_endtime() {
  _has_bits_[0] |= 0x00000080u;
}
void UserList::clear_has_visit_endtime() {
  _has_bits_[0] &= ~0x00000080u;
}
void UserList::clear_visit_endtime() {
  visit_endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_visit_endtime();
}
::google::protobuf::uint64 UserList::visit_endtime() const {
  // @@protoc_insertion_point(field_get:Czhtdev.UserList.visit_endtime)
  return visit_endtime_;
}
void UserList::set_visit_endtime(::google::protobuf::uint64 value) {
  set_has_visit_endtime();
  visit_endtime_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.UserList.visit_endtime)
}

// optional .Czhtdev.TimeAuth user_time_auth = 9;
bool UserList::has_user_time_auth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UserList::set_has_user_time_auth() {
  _has_bits_[0] |= 0x00000100u;
}
void UserList::clear_has_user_time_auth() {
  _has_bits_[0] &= ~0x00000100u;
}
void UserList::clear_user_time_auth() {
  if (user_time_auth_ != NULL) user_time_auth_->::Czhtdev::TimeAuth::Clear();
  clear_has_user_time_auth();
}
const ::Czhtdev::TimeAuth& UserList::user_time_auth() const {
  // @@protoc_insertion_point(field_get:Czhtdev.UserList.user_time_auth)
  return user_time_auth_ != NULL ? *user_time_auth_
                         : *::Czhtdev::TimeAuth::internal_default_instance();
}
::Czhtdev::TimeAuth* UserList::mutable_user_time_auth() {
  set_has_user_time_auth();
  if (user_time_auth_ == NULL) {
    user_time_auth_ = new ::Czhtdev::TimeAuth;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.UserList.user_time_auth)
  return user_time_auth_;
}
::Czhtdev::TimeAuth* UserList::release_user_time_auth() {
  // @@protoc_insertion_point(field_release:Czhtdev.UserList.user_time_auth)
  clear_has_user_time_auth();
  ::Czhtdev::TimeAuth* temp = user_time_auth_;
  user_time_auth_ = NULL;
  return temp;
}
void UserList::set_allocated_user_time_auth(::Czhtdev::TimeAuth* user_time_auth) {
  delete user_time_auth_;
  user_time_auth_ = user_time_auth;
  if (user_time_auth) {
    set_has_user_time_auth();
  } else {
    clear_has_user_time_auth();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.UserList.user_time_auth)
}

// optional string company_id = 10;
bool UserList::has_company_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void UserList::set_has_company_id() {
  _has_bits_[0] |= 0x00000200u;
}
void UserList::clear_has_company_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void UserList::clear_company_id() {
  company_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_company_id();
}
const ::std::string& UserList::company_id() const {
  // @@protoc_insertion_point(field_get:Czhtdev.UserList.company_id)
  return company_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserList::set_company_id(const ::std::string& value) {
  set_has_company_id();
  company_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.UserList.company_id)
}
void UserList::set_company_id(const char* value) {
  set_has_company_id();
  company_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.UserList.company_id)
}
void UserList::set_company_id(const char* value, size_t size) {
  set_has_company_id();
  company_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.UserList.company_id)
}
::std::string* UserList::mutable_company_id() {
  set_has_company_id();
  // @@protoc_insertion_point(field_mutable:Czhtdev.UserList.company_id)
  return company_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserList::release_company_id() {
  // @@protoc_insertion_point(field_release:Czhtdev.UserList.company_id)
  clear_has_company_id();
  return company_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserList::set_allocated_company_id(::std::string* company_id) {
  if (company_id != NULL) {
    set_has_company_id();
  } else {
    clear_has_company_id();
  }
  company_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company_id);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.UserList.company_id)
}

// optional string card = 11;
bool UserList::has_card() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void UserList::set_has_card() {
  _has_bits_[0] |= 0x00000400u;
}
void UserList::clear_has_card() {
  _has_bits_[0] &= ~0x00000400u;
}
void UserList::clear_card() {
  card_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card();
}
const ::std::string& UserList::card() const {
  // @@protoc_insertion_point(field_get:Czhtdev.UserList.card)
  return card_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserList::set_card(const ::std::string& value) {
  set_has_card();
  card_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.UserList.card)
}
void UserList::set_card(const char* value) {
  set_has_card();
  card_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.UserList.card)
}
void UserList::set_card(const char* value, size_t size) {
  set_has_card();
  card_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.UserList.card)
}
::std::string* UserList::mutable_card() {
  set_has_card();
  // @@protoc_insertion_point(field_mutable:Czhtdev.UserList.card)
  return card_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserList::release_card() {
  // @@protoc_insertion_point(field_release:Czhtdev.UserList.card)
  clear_has_card();
  return card_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserList::set_allocated_card(::std::string* card) {
  if (card != NULL) {
    set_has_card();
  } else {
    clear_has_card();
  }
  card_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.UserList.card)
}

// optional string id_card = 12;
bool UserList::has_id_card() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void UserList::set_has_id_card() {
  _has_bits_[0] |= 0x00000800u;
}
void UserList::clear_has_id_card() {
  _has_bits_[0] &= ~0x00000800u;
}
void UserList::clear_id_card() {
  id_card_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id_card();
}
const ::std::string& UserList::id_card() const {
  // @@protoc_insertion_point(field_get:Czhtdev.UserList.id_card)
  return id_card_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserList::set_id_card(const ::std::string& value) {
  set_has_id_card();
  id_card_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.UserList.id_card)
}
void UserList::set_id_card(const char* value) {
  set_has_id_card();
  id_card_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.UserList.id_card)
}
void UserList::set_id_card(const char* value, size_t size) {
  set_has_id_card();
  id_card_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.UserList.id_card)
}
::std::string* UserList::mutable_id_card() {
  set_has_id_card();
  // @@protoc_insertion_point(field_mutable:Czhtdev.UserList.id_card)
  return id_card_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserList::release_id_card() {
  // @@protoc_insertion_point(field_release:Czhtdev.UserList.id_card)
  clear_has_id_card();
  return id_card_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserList::set_allocated_id_card(::std::string* id_card) {
  if (id_card != NULL) {
    set_has_id_card();
  } else {
    clear_has_id_card();
  }
  id_card_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id_card);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.UserList.id_card)
}

// optional int32 modify_type = 13;
bool UserList::has_modify_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void UserList::set_has_modify_type() {
  _has_bits_[0] |= 0x00001000u;
}
void UserList::clear_has_modify_type() {
  _has_bits_[0] &= ~0x00001000u;
}
void UserList::clear_modify_type() {
  modify_type_ = 0;
  clear_has_modify_type();
}
::google::protobuf::int32 UserList::modify_type() const {
  // @@protoc_insertion_point(field_get:Czhtdev.UserList.modify_type)
  return modify_type_;
}
void UserList::set_modify_type(::google::protobuf::int32 value) {
  set_has_modify_type();
  modify_type_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.UserList.modify_type)
}

inline const UserList* UserList::internal_default_instance() {
  return &UserList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteLocalUser::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteLocalUser::DeleteLocalUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.DeleteLocalUser)
}

void DeleteLocalUser::InitAsDefaultInstance() {
}

DeleteLocalUser::DeleteLocalUser(const DeleteLocalUser& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.DeleteLocalUser)
}

void DeleteLocalUser::SharedCtor() {
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeleteLocalUser::~DeleteLocalUser() {
  // @@protoc_insertion_point(destructor:Czhtdev.DeleteLocalUser)
  SharedDtor();
}

void DeleteLocalUser::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteLocalUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteLocalUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteLocalUser_descriptor_;
}

const DeleteLocalUser& DeleteLocalUser::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeleteLocalUser> DeleteLocalUser_default_instance_;

DeleteLocalUser* DeleteLocalUser::New(::google::protobuf::Arena* arena) const {
  DeleteLocalUser* n = new DeleteLocalUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteLocalUser::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.DeleteLocalUser)
  if (has_user_id()) {
    user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DeleteLocalUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.DeleteLocalUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.DeleteLocalUser.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.DeleteLocalUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.DeleteLocalUser)
  return false;
#undef DO_
}

void DeleteLocalUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.DeleteLocalUser)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.DeleteLocalUser.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.DeleteLocalUser)
}

::google::protobuf::uint8* DeleteLocalUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.DeleteLocalUser)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.DeleteLocalUser.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.DeleteLocalUser)
  return target;
}

size_t DeleteLocalUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.DeleteLocalUser)
  size_t total_size = 0;

  // required string user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteLocalUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.DeleteLocalUser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteLocalUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteLocalUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.DeleteLocalUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.DeleteLocalUser)
    UnsafeMergeFrom(*source);
  }
}

void DeleteLocalUser::MergeFrom(const DeleteLocalUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.DeleteLocalUser)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeleteLocalUser::UnsafeMergeFrom(const DeleteLocalUser& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void DeleteLocalUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.DeleteLocalUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteLocalUser::CopyFrom(const DeleteLocalUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.DeleteLocalUser)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeleteLocalUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteLocalUser::Swap(DeleteLocalUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteLocalUser::InternalSwap(DeleteLocalUser* other) {
  user_id_.Swap(&other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteLocalUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteLocalUser_descriptor_;
  metadata.reflection = DeleteLocalUser_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteLocalUser

// required string user_id = 1;
bool DeleteLocalUser::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeleteLocalUser::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DeleteLocalUser::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeleteLocalUser::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& DeleteLocalUser::user_id() const {
  // @@protoc_insertion_point(field_get:Czhtdev.DeleteLocalUser.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteLocalUser::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.DeleteLocalUser.user_id)
}
void DeleteLocalUser::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.DeleteLocalUser.user_id)
}
void DeleteLocalUser::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.DeleteLocalUser.user_id)
}
::std::string* DeleteLocalUser::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:Czhtdev.DeleteLocalUser.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteLocalUser::release_user_id() {
  // @@protoc_insertion_point(field_release:Czhtdev.DeleteLocalUser.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteLocalUser::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.DeleteLocalUser.user_id)
}

inline const DeleteLocalUser* DeleteLocalUser::internal_default_instance() {
  return &DeleteLocalUser_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryLocalUser::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryLocalUser::QueryLocalUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.QueryLocalUser)
}

void QueryLocalUser::InitAsDefaultInstance() {
}

QueryLocalUser::QueryLocalUser(const QueryLocalUser& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.QueryLocalUser)
}

void QueryLocalUser::SharedCtor() {
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

QueryLocalUser::~QueryLocalUser() {
  // @@protoc_insertion_point(destructor:Czhtdev.QueryLocalUser)
  SharedDtor();
}

void QueryLocalUser::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryLocalUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryLocalUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryLocalUser_descriptor_;
}

const QueryLocalUser& QueryLocalUser::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QueryLocalUser> QueryLocalUser_default_instance_;

QueryLocalUser* QueryLocalUser::New(::google::protobuf::Arena* arena) const {
  QueryLocalUser* n = new QueryLocalUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryLocalUser::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.QueryLocalUser)
  if (has_user_id()) {
    user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QueryLocalUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.QueryLocalUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.QueryLocalUser.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.QueryLocalUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.QueryLocalUser)
  return false;
#undef DO_
}

void QueryLocalUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.QueryLocalUser)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.QueryLocalUser.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.QueryLocalUser)
}

::google::protobuf::uint8* QueryLocalUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.QueryLocalUser)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.QueryLocalUser.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.QueryLocalUser)
  return target;
}

size_t QueryLocalUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.QueryLocalUser)
  size_t total_size = 0;

  // required string user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryLocalUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.QueryLocalUser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryLocalUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryLocalUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.QueryLocalUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.QueryLocalUser)
    UnsafeMergeFrom(*source);
  }
}

void QueryLocalUser::MergeFrom(const QueryLocalUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.QueryLocalUser)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QueryLocalUser::UnsafeMergeFrom(const QueryLocalUser& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void QueryLocalUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.QueryLocalUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryLocalUser::CopyFrom(const QueryLocalUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.QueryLocalUser)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QueryLocalUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QueryLocalUser::Swap(QueryLocalUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryLocalUser::InternalSwap(QueryLocalUser* other) {
  user_id_.Swap(&other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryLocalUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryLocalUser_descriptor_;
  metadata.reflection = QueryLocalUser_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryLocalUser

// required string user_id = 1;
bool QueryLocalUser::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryLocalUser::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryLocalUser::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryLocalUser::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& QueryLocalUser::user_id() const {
  // @@protoc_insertion_point(field_get:Czhtdev.QueryLocalUser.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryLocalUser::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.QueryLocalUser.user_id)
}
void QueryLocalUser::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.QueryLocalUser.user_id)
}
void QueryLocalUser::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.QueryLocalUser.user_id)
}
::std::string* QueryLocalUser::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:Czhtdev.QueryLocalUser.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryLocalUser::release_user_id() {
  // @@protoc_insertion_point(field_release:Czhtdev.QueryLocalUser.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryLocalUser::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.QueryLocalUser.user_id)
}

inline const QueryLocalUser* QueryLocalUser::internal_default_instance() {
  return &QueryLocalUser_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryLocalUserList::kStateFieldNumber;
const int QueryLocalUserList::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryLocalUserList::QueryLocalUserList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.QueryLocalUserList)
}

void QueryLocalUserList::InitAsDefaultInstance() {
}

QueryLocalUserList::QueryLocalUserList(const QueryLocalUserList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.QueryLocalUserList)
}

void QueryLocalUserList::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

QueryLocalUserList::~QueryLocalUserList() {
  // @@protoc_insertion_point(destructor:Czhtdev.QueryLocalUserList)
  SharedDtor();
}

void QueryLocalUserList::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryLocalUserList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryLocalUserList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryLocalUserList_descriptor_;
}

const QueryLocalUserList& QueryLocalUserList::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QueryLocalUserList> QueryLocalUserList_default_instance_;

QueryLocalUserList* QueryLocalUserList::New(::google::protobuf::Arena* arena) const {
  QueryLocalUserList* n = new QueryLocalUserList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryLocalUserList::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.QueryLocalUserList)
  if (_has_bits_[0 / 32] & 3u) {
    state_ = 0;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QueryLocalUserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.QueryLocalUserList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.QueryLocalUserList.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.QueryLocalUserList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.QueryLocalUserList)
  return false;
#undef DO_
}

void QueryLocalUserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.QueryLocalUserList)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.QueryLocalUserList.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.QueryLocalUserList)
}

::google::protobuf::uint8* QueryLocalUserList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.QueryLocalUserList)
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.QueryLocalUserList.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.QueryLocalUserList)
  return target;
}

size_t QueryLocalUserList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.QueryLocalUserList)
  size_t total_size = 0;

  // required int32 state = 1;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }
  // optional string name = 2;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryLocalUserList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.QueryLocalUserList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryLocalUserList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryLocalUserList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.QueryLocalUserList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.QueryLocalUserList)
    UnsafeMergeFrom(*source);
  }
}

void QueryLocalUserList::MergeFrom(const QueryLocalUserList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.QueryLocalUserList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QueryLocalUserList::UnsafeMergeFrom(const QueryLocalUserList& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void QueryLocalUserList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.QueryLocalUserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryLocalUserList::CopyFrom(const QueryLocalUserList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.QueryLocalUserList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QueryLocalUserList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QueryLocalUserList::Swap(QueryLocalUserList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryLocalUserList::InternalSwap(QueryLocalUserList* other) {
  std::swap(state_, other->state_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryLocalUserList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryLocalUserList_descriptor_;
  metadata.reflection = QueryLocalUserList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryLocalUserList

// required int32 state = 1;
bool QueryLocalUserList::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryLocalUserList::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryLocalUserList::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryLocalUserList::clear_state() {
  state_ = 0;
  clear_has_state();
}
::google::protobuf::int32 QueryLocalUserList::state() const {
  // @@protoc_insertion_point(field_get:Czhtdev.QueryLocalUserList.state)
  return state_;
}
void QueryLocalUserList::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.QueryLocalUserList.state)
}

// optional string name = 2;
bool QueryLocalUserList::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryLocalUserList::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryLocalUserList::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryLocalUserList::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& QueryLocalUserList::name() const {
  // @@protoc_insertion_point(field_get:Czhtdev.QueryLocalUserList.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryLocalUserList::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.QueryLocalUserList.name)
}
void QueryLocalUserList::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.QueryLocalUserList.name)
}
void QueryLocalUserList::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.QueryLocalUserList.name)
}
::std::string* QueryLocalUserList::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Czhtdev.QueryLocalUserList.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryLocalUserList::release_name() {
  // @@protoc_insertion_point(field_release:Czhtdev.QueryLocalUserList.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryLocalUserList::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.QueryLocalUserList.name)
}

inline const QueryLocalUserList* QueryLocalUserList::internal_default_instance() {
  return &QueryLocalUserList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryPassageRecord::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryPassageRecord::QueryPassageRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.QueryPassageRecord)
}

void QueryPassageRecord::InitAsDefaultInstance() {
}

QueryPassageRecord::QueryPassageRecord(const QueryPassageRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.QueryPassageRecord)
}

void QueryPassageRecord::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
}

QueryPassageRecord::~QueryPassageRecord() {
  // @@protoc_insertion_point(destructor:Czhtdev.QueryPassageRecord)
  SharedDtor();
}

void QueryPassageRecord::SharedDtor() {
}

void QueryPassageRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPassageRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPassageRecord_descriptor_;
}

const QueryPassageRecord& QueryPassageRecord::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QueryPassageRecord> QueryPassageRecord_default_instance_;

QueryPassageRecord* QueryPassageRecord::New(::google::protobuf::Arena* arena) const {
  QueryPassageRecord* n = new QueryPassageRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryPassageRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.QueryPassageRecord)
  id_ = 0;
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QueryPassageRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.QueryPassageRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 2;
      case 2: {
        if (tag == 16) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.QueryPassageRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.QueryPassageRecord)
  return false;
#undef DO_
}

void QueryPassageRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.QueryPassageRecord)
  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.QueryPassageRecord)
}

::google::protobuf::uint8* QueryPassageRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.QueryPassageRecord)
  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.QueryPassageRecord)
  return target;
}

size_t QueryPassageRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.QueryPassageRecord)
  size_t total_size = 0;

  // required int32 id = 2;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPassageRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.QueryPassageRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryPassageRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryPassageRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.QueryPassageRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.QueryPassageRecord)
    UnsafeMergeFrom(*source);
  }
}

void QueryPassageRecord::MergeFrom(const QueryPassageRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.QueryPassageRecord)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QueryPassageRecord::UnsafeMergeFrom(const QueryPassageRecord& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void QueryPassageRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.QueryPassageRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPassageRecord::CopyFrom(const QueryPassageRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.QueryPassageRecord)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QueryPassageRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QueryPassageRecord::Swap(QueryPassageRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryPassageRecord::InternalSwap(QueryPassageRecord* other) {
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryPassageRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPassageRecord_descriptor_;
  metadata.reflection = QueryPassageRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryPassageRecord

// required int32 id = 2;
bool QueryPassageRecord::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryPassageRecord::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryPassageRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryPassageRecord::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 QueryPassageRecord::id() const {
  // @@protoc_insertion_point(field_get:Czhtdev.QueryPassageRecord.id)
  return id_;
}
void QueryPassageRecord::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.QueryPassageRecord.id)
}

inline const QueryPassageRecord* QueryPassageRecord::internal_default_instance() {
  return &QueryPassageRecord_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryPassageRecordList::kStateFieldNumber;
const int QueryPassageRecordList::kNameFieldNumber;
const int QueryPassageRecordList::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryPassageRecordList::QueryPassageRecordList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.QueryPassageRecordList)
}

void QueryPassageRecordList::InitAsDefaultInstance() {
  time_ = const_cast< ::Czhtdev::TimePeriod*>(
      ::Czhtdev::TimePeriod::internal_default_instance());
}

QueryPassageRecordList::QueryPassageRecordList(const QueryPassageRecordList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.QueryPassageRecordList)
}

void QueryPassageRecordList::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = NULL;
  state_ = 0;
}

QueryPassageRecordList::~QueryPassageRecordList() {
  // @@protoc_insertion_point(destructor:Czhtdev.QueryPassageRecordList)
  SharedDtor();
}

void QueryPassageRecordList::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &QueryPassageRecordList_default_instance_.get()) {
    delete time_;
  }
}

void QueryPassageRecordList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPassageRecordList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPassageRecordList_descriptor_;
}

const QueryPassageRecordList& QueryPassageRecordList::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QueryPassageRecordList> QueryPassageRecordList_default_instance_;

QueryPassageRecordList* QueryPassageRecordList::New(::google::protobuf::Arena* arena) const {
  QueryPassageRecordList* n = new QueryPassageRecordList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryPassageRecordList::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.QueryPassageRecordList)
  if (_has_bits_[0 / 32] & 7u) {
    state_ = 0;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_time()) {
      if (time_ != NULL) time_->::Czhtdev::TimePeriod::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QueryPassageRecordList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.QueryPassageRecordList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.QueryPassageRecordList.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_time;
        break;
      }

      // optional .Czhtdev.TimePeriod time = 3;
      case 3: {
        if (tag == 26) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.QueryPassageRecordList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.QueryPassageRecordList)
  return false;
#undef DO_
}

void QueryPassageRecordList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.QueryPassageRecordList)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.QueryPassageRecordList.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .Czhtdev.TimePeriod time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->time_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.QueryPassageRecordList)
}

::google::protobuf::uint8* QueryPassageRecordList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.QueryPassageRecordList)
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.QueryPassageRecordList.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .Czhtdev.TimePeriod time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->time_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.QueryPassageRecordList)
  return target;
}

size_t QueryPassageRecordList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.QueryPassageRecordList)
  size_t total_size = 0;

  // required int32 state = 1;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .Czhtdev.TimePeriod time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->time_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPassageRecordList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.QueryPassageRecordList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryPassageRecordList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryPassageRecordList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.QueryPassageRecordList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.QueryPassageRecordList)
    UnsafeMergeFrom(*source);
  }
}

void QueryPassageRecordList::MergeFrom(const QueryPassageRecordList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.QueryPassageRecordList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QueryPassageRecordList::UnsafeMergeFrom(const QueryPassageRecordList& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_time()) {
      mutable_time()->::Czhtdev::TimePeriod::MergeFrom(from.time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void QueryPassageRecordList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.QueryPassageRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPassageRecordList::CopyFrom(const QueryPassageRecordList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.QueryPassageRecordList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QueryPassageRecordList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_time()) {
    if (!this->time_->IsInitialized()) return false;
  }
  return true;
}

void QueryPassageRecordList::Swap(QueryPassageRecordList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryPassageRecordList::InternalSwap(QueryPassageRecordList* other) {
  std::swap(state_, other->state_);
  name_.Swap(&other->name_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryPassageRecordList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPassageRecordList_descriptor_;
  metadata.reflection = QueryPassageRecordList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryPassageRecordList

// required int32 state = 1;
bool QueryPassageRecordList::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryPassageRecordList::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryPassageRecordList::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryPassageRecordList::clear_state() {
  state_ = 0;
  clear_has_state();
}
::google::protobuf::int32 QueryPassageRecordList::state() const {
  // @@protoc_insertion_point(field_get:Czhtdev.QueryPassageRecordList.state)
  return state_;
}
void QueryPassageRecordList::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.QueryPassageRecordList.state)
}

// optional string name = 2;
bool QueryPassageRecordList::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryPassageRecordList::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryPassageRecordList::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryPassageRecordList::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& QueryPassageRecordList::name() const {
  // @@protoc_insertion_point(field_get:Czhtdev.QueryPassageRecordList.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryPassageRecordList::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.QueryPassageRecordList.name)
}
void QueryPassageRecordList::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.QueryPassageRecordList.name)
}
void QueryPassageRecordList::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.QueryPassageRecordList.name)
}
::std::string* QueryPassageRecordList::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Czhtdev.QueryPassageRecordList.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryPassageRecordList::release_name() {
  // @@protoc_insertion_point(field_release:Czhtdev.QueryPassageRecordList.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryPassageRecordList::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.QueryPassageRecordList.name)
}

// optional .Czhtdev.TimePeriod time = 3;
bool QueryPassageRecordList::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QueryPassageRecordList::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
void QueryPassageRecordList::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void QueryPassageRecordList::clear_time() {
  if (time_ != NULL) time_->::Czhtdev::TimePeriod::Clear();
  clear_has_time();
}
const ::Czhtdev::TimePeriod& QueryPassageRecordList::time() const {
  // @@protoc_insertion_point(field_get:Czhtdev.QueryPassageRecordList.time)
  return time_ != NULL ? *time_
                         : *::Czhtdev::TimePeriod::internal_default_instance();
}
::Czhtdev::TimePeriod* QueryPassageRecordList::mutable_time() {
  set_has_time();
  if (time_ == NULL) {
    time_ = new ::Czhtdev::TimePeriod;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.QueryPassageRecordList.time)
  return time_;
}
::Czhtdev::TimePeriod* QueryPassageRecordList::release_time() {
  // @@protoc_insertion_point(field_release:Czhtdev.QueryPassageRecordList.time)
  clear_has_time();
  ::Czhtdev::TimePeriod* temp = time_;
  time_ = NULL;
  return temp;
}
void QueryPassageRecordList::set_allocated_time(::Czhtdev::TimePeriod* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.QueryPassageRecordList.time)
}

inline const QueryPassageRecordList* QueryPassageRecordList::internal_default_instance() {
  return &QueryPassageRecordList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimePeriod::kBegintimeFieldNumber;
const int TimePeriod::kEndtimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimePeriod::TimePeriod()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.TimePeriod)
}

void TimePeriod::InitAsDefaultInstance() {
}

TimePeriod::TimePeriod(const TimePeriod& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.TimePeriod)
}

void TimePeriod::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&begintime_, 0, reinterpret_cast<char*>(&endtime_) -
    reinterpret_cast<char*>(&begintime_) + sizeof(endtime_));
}

TimePeriod::~TimePeriod() {
  // @@protoc_insertion_point(destructor:Czhtdev.TimePeriod)
  SharedDtor();
}

void TimePeriod::SharedDtor() {
}

void TimePeriod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimePeriod::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimePeriod_descriptor_;
}

const TimePeriod& TimePeriod::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TimePeriod> TimePeriod_default_instance_;

TimePeriod* TimePeriod::New(::google::protobuf::Arena* arena) const {
  TimePeriod* n = new TimePeriod;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimePeriod::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.TimePeriod)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TimePeriod, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TimePeriod*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(begintime_, endtime_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TimePeriod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.TimePeriod)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 begintime = 1;
      case 1: {
        if (tag == 8) {
          set_has_begintime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begintime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_endtime;
        break;
      }

      // required uint64 endtime = 2;
      case 2: {
        if (tag == 16) {
         parse_endtime:
          set_has_endtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.TimePeriod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.TimePeriod)
  return false;
#undef DO_
}

void TimePeriod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.TimePeriod)
  // required uint64 begintime = 1;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->begintime(), output);
  }

  // required uint64 endtime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->endtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.TimePeriod)
}

::google::protobuf::uint8* TimePeriod::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.TimePeriod)
  // required uint64 begintime = 1;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->begintime(), target);
  }

  // required uint64 endtime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->endtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.TimePeriod)
  return target;
}

size_t TimePeriod::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Czhtdev.TimePeriod)
  size_t total_size = 0;

  if (has_begintime()) {
    // required uint64 begintime = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->begintime());
  }

  if (has_endtime()) {
    // required uint64 endtime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->endtime());
  }

  return total_size;
}
size_t TimePeriod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.TimePeriod)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 begintime = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->begintime());

    // required uint64 endtime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->endtime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimePeriod::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.TimePeriod)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TimePeriod* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimePeriod>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.TimePeriod)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.TimePeriod)
    UnsafeMergeFrom(*source);
  }
}

void TimePeriod::MergeFrom(const TimePeriod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.TimePeriod)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TimePeriod::UnsafeMergeFrom(const TimePeriod& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void TimePeriod::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.TimePeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimePeriod::CopyFrom(const TimePeriod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.TimePeriod)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TimePeriod::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TimePeriod::Swap(TimePeriod* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimePeriod::InternalSwap(TimePeriod* other) {
  std::swap(begintime_, other->begintime_);
  std::swap(endtime_, other->endtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimePeriod::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimePeriod_descriptor_;
  metadata.reflection = TimePeriod_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimePeriod

// required uint64 begintime = 1;
bool TimePeriod::has_begintime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimePeriod::set_has_begintime() {
  _has_bits_[0] |= 0x00000001u;
}
void TimePeriod::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimePeriod::clear_begintime() {
  begintime_ = GOOGLE_ULONGLONG(0);
  clear_has_begintime();
}
::google::protobuf::uint64 TimePeriod::begintime() const {
  // @@protoc_insertion_point(field_get:Czhtdev.TimePeriod.begintime)
  return begintime_;
}
void TimePeriod::set_begintime(::google::protobuf::uint64 value) {
  set_has_begintime();
  begintime_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.TimePeriod.begintime)
}

// required uint64 endtime = 2;
bool TimePeriod::has_endtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimePeriod::set_has_endtime() {
  _has_bits_[0] |= 0x00000002u;
}
void TimePeriod::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000002u;
}
void TimePeriod::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
::google::protobuf::uint64 TimePeriod::endtime() const {
  // @@protoc_insertion_point(field_get:Czhtdev.TimePeriod.endtime)
  return endtime_;
}
void TimePeriod::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.TimePeriod.endtime)
}

inline const TimePeriod* TimePeriod::internal_default_instance() {
  return &TimePeriod_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PassageRecord::kIdFieldNumber;
const int PassageRecord::kImageFieldNumber;
const int PassageRecord::kTimeFieldNumber;
const int PassageRecord::kUserIdFieldNumber;
const int PassageRecord::kNameFieldNumber;
const int PassageRecord::kPermissionTimeFieldNumber;
const int PassageRecord::kPermissionAreaFieldNumber;
const int PassageRecord::kLivingFieldNumber;
const int PassageRecord::kTypeFieldNumber;
const int PassageRecord::kScoreFieldNumber;
const int PassageRecord::kFaceparamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PassageRecord::PassageRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.PassageRecord)
}

void PassageRecord::InitAsDefaultInstance() {
  faceparam_ = const_cast< ::Czhtdev::Face_Param*>(
      ::Czhtdev::Face_Param::internal_default_instance());
}

PassageRecord::PassageRecord(const PassageRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.PassageRecord)
}

void PassageRecord::SharedCtor() {
  _cached_size_ = 0;
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  faceparam_ = NULL;
  ::memset(&time_, 0, reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&time_) + sizeof(score_));
}

PassageRecord::~PassageRecord() {
  // @@protoc_insertion_point(destructor:Czhtdev.PassageRecord)
  SharedDtor();
}

void PassageRecord::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &PassageRecord_default_instance_.get()) {
    delete faceparam_;
  }
}

void PassageRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassageRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassageRecord_descriptor_;
}

const PassageRecord& PassageRecord::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PassageRecord> PassageRecord_default_instance_;

PassageRecord* PassageRecord::New(::google::protobuf::Arena* arena) const {
  PassageRecord* n = new PassageRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PassageRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.PassageRecord)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PassageRecord, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PassageRecord*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(time_, living_);
    if (has_image()) {
      image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ZR_(type_, score_);
    if (has_faceparam()) {
      if (faceparam_ != NULL) faceparam_->::Czhtdev::Face_Param::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PassageRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.PassageRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_image;
        break;
      }

      // required bytes image = 2;
      case 2: {
        if (tag == 18) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required uint64 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_id;
        break;
      }

      // optional string user_id = 4;
      case 4: {
        if (tag == 34) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.PassageRecord.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.PassageRecord.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_permission_time;
        break;
      }

      // optional bool permission_time = 6;
      case 6: {
        if (tag == 48) {
         parse_permission_time:
          set_has_permission_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &permission_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_permission_area;
        break;
      }

      // optional bool permission_area = 7;
      case 7: {
        if (tag == 56) {
         parse_permission_area:
          set_has_permission_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &permission_area_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_living;
        break;
      }

      // optional bool living = 8;
      case 8: {
        if (tag == 64) {
         parse_living:
          set_has_living();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &living_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // optional int32 type = 9;
      case 9: {
        if (tag == 72) {
         parse_type:
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_score;
        break;
      }

      // optional int32 score = 10;
      case 10: {
        if (tag == 80) {
         parse_score:
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_faceparam;
        break;
      }

      // optional .Czhtdev.Face_Param faceparam = 11;
      case 11: {
        if (tag == 90) {
         parse_faceparam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_faceparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.PassageRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.PassageRecord)
  return false;
#undef DO_
}

void PassageRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.PassageRecord)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bytes image = 2;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->image(), output);
  }

  // required uint64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  // optional string user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.PassageRecord.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_id(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.PassageRecord.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional bool permission_time = 6;
  if (has_permission_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->permission_time(), output);
  }

  // optional bool permission_area = 7;
  if (has_permission_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->permission_area(), output);
  }

  // optional bool living = 8;
  if (has_living()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->living(), output);
  }

  // optional int32 type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->type(), output);
  }

  // optional int32 score = 10;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->score(), output);
  }

  // optional .Czhtdev.Face_Param faceparam = 11;
  if (has_faceparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->faceparam_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.PassageRecord)
}

::google::protobuf::uint8* PassageRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.PassageRecord)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bytes image = 2;
  if (has_image()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->image(), target);
  }

  // required uint64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  // optional string user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.PassageRecord.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_id(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.PassageRecord.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional bool permission_time = 6;
  if (has_permission_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->permission_time(), target);
  }

  // optional bool permission_area = 7;
  if (has_permission_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->permission_area(), target);
  }

  // optional bool living = 8;
  if (has_living()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->living(), target);
  }

  // optional int32 type = 9;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->type(), target);
  }

  // optional int32 score = 10;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->score(), target);
  }

  // optional .Czhtdev.Face_Param faceparam = 11;
  if (has_faceparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->faceparam_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.PassageRecord)
  return target;
}

size_t PassageRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Czhtdev.PassageRecord)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_image()) {
    // required bytes image = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image());
  }

  if (has_time()) {
    // required uint64 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  return total_size;
}
size_t PassageRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.PassageRecord)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required bytes image = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image());

    // required uint64 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 248u) {
    // optional string user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool permission_time = 6;
    if (has_permission_time()) {
      total_size += 1 + 1;
    }

    // optional bool permission_area = 7;
    if (has_permission_area()) {
      total_size += 1 + 1;
    }

    // optional bool living = 8;
    if (has_living()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 score = 10;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional .Czhtdev.Face_Param faceparam = 11;
    if (has_faceparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->faceparam_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassageRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.PassageRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PassageRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PassageRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.PassageRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.PassageRecord)
    UnsafeMergeFrom(*source);
  }
}

void PassageRecord::MergeFrom(const PassageRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.PassageRecord)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PassageRecord::UnsafeMergeFrom(const PassageRecord& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_image()) {
      set_has_image();
      image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_permission_time()) {
      set_permission_time(from.permission_time());
    }
    if (from.has_permission_area()) {
      set_permission_area(from.permission_area());
    }
    if (from.has_living()) {
      set_living(from.living());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_faceparam()) {
      mutable_faceparam()->::Czhtdev::Face_Param::MergeFrom(from.faceparam());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PassageRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.PassageRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassageRecord::CopyFrom(const PassageRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.PassageRecord)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PassageRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_faceparam()) {
    if (!this->faceparam_->IsInitialized()) return false;
  }
  return true;
}

void PassageRecord::Swap(PassageRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PassageRecord::InternalSwap(PassageRecord* other) {
  std::swap(id_, other->id_);
  image_.Swap(&other->image_);
  std::swap(time_, other->time_);
  user_id_.Swap(&other->user_id_);
  name_.Swap(&other->name_);
  std::swap(permission_time_, other->permission_time_);
  std::swap(permission_area_, other->permission_area_);
  std::swap(living_, other->living_);
  std::swap(type_, other->type_);
  std::swap(score_, other->score_);
  std::swap(faceparam_, other->faceparam_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PassageRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassageRecord_descriptor_;
  metadata.reflection = PassageRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PassageRecord

// required int32 id = 1;
bool PassageRecord::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PassageRecord::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PassageRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PassageRecord::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 PassageRecord::id() const {
  // @@protoc_insertion_point(field_get:Czhtdev.PassageRecord.id)
  return id_;
}
void PassageRecord::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.PassageRecord.id)
}

// required bytes image = 2;
bool PassageRecord::has_image() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PassageRecord::set_has_image() {
  _has_bits_[0] |= 0x00000002u;
}
void PassageRecord::clear_has_image() {
  _has_bits_[0] &= ~0x00000002u;
}
void PassageRecord::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image();
}
const ::std::string& PassageRecord::image() const {
  // @@protoc_insertion_point(field_get:Czhtdev.PassageRecord.image)
  return image_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PassageRecord::set_image(const ::std::string& value) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.PassageRecord.image)
}
void PassageRecord::set_image(const char* value) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.PassageRecord.image)
}
void PassageRecord::set_image(const void* value, size_t size) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.PassageRecord.image)
}
::std::string* PassageRecord::mutable_image() {
  set_has_image();
  // @@protoc_insertion_point(field_mutable:Czhtdev.PassageRecord.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PassageRecord::release_image() {
  // @@protoc_insertion_point(field_release:Czhtdev.PassageRecord.image)
  clear_has_image();
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PassageRecord::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    set_has_image();
  } else {
    clear_has_image();
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.PassageRecord.image)
}

// required uint64 time = 3;
bool PassageRecord::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PassageRecord::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
void PassageRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void PassageRecord::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 PassageRecord::time() const {
  // @@protoc_insertion_point(field_get:Czhtdev.PassageRecord.time)
  return time_;
}
void PassageRecord::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.PassageRecord.time)
}

// optional string user_id = 4;
bool PassageRecord::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PassageRecord::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
void PassageRecord::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void PassageRecord::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& PassageRecord::user_id() const {
  // @@protoc_insertion_point(field_get:Czhtdev.PassageRecord.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PassageRecord::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.PassageRecord.user_id)
}
void PassageRecord::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.PassageRecord.user_id)
}
void PassageRecord::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.PassageRecord.user_id)
}
::std::string* PassageRecord::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:Czhtdev.PassageRecord.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PassageRecord::release_user_id() {
  // @@protoc_insertion_point(field_release:Czhtdev.PassageRecord.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PassageRecord::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.PassageRecord.user_id)
}

// optional string name = 5;
bool PassageRecord::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PassageRecord::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
void PassageRecord::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void PassageRecord::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& PassageRecord::name() const {
  // @@protoc_insertion_point(field_get:Czhtdev.PassageRecord.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PassageRecord::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.PassageRecord.name)
}
void PassageRecord::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.PassageRecord.name)
}
void PassageRecord::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.PassageRecord.name)
}
::std::string* PassageRecord::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Czhtdev.PassageRecord.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PassageRecord::release_name() {
  // @@protoc_insertion_point(field_release:Czhtdev.PassageRecord.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PassageRecord::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.PassageRecord.name)
}

// optional bool permission_time = 6;
bool PassageRecord::has_permission_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PassageRecord::set_has_permission_time() {
  _has_bits_[0] |= 0x00000020u;
}
void PassageRecord::clear_has_permission_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void PassageRecord::clear_permission_time() {
  permission_time_ = false;
  clear_has_permission_time();
}
bool PassageRecord::permission_time() const {
  // @@protoc_insertion_point(field_get:Czhtdev.PassageRecord.permission_time)
  return permission_time_;
}
void PassageRecord::set_permission_time(bool value) {
  set_has_permission_time();
  permission_time_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.PassageRecord.permission_time)
}

// optional bool permission_area = 7;
bool PassageRecord::has_permission_area() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PassageRecord::set_has_permission_area() {
  _has_bits_[0] |= 0x00000040u;
}
void PassageRecord::clear_has_permission_area() {
  _has_bits_[0] &= ~0x00000040u;
}
void PassageRecord::clear_permission_area() {
  permission_area_ = false;
  clear_has_permission_area();
}
bool PassageRecord::permission_area() const {
  // @@protoc_insertion_point(field_get:Czhtdev.PassageRecord.permission_area)
  return permission_area_;
}
void PassageRecord::set_permission_area(bool value) {
  set_has_permission_area();
  permission_area_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.PassageRecord.permission_area)
}

// optional bool living = 8;
bool PassageRecord::has_living() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PassageRecord::set_has_living() {
  _has_bits_[0] |= 0x00000080u;
}
void PassageRecord::clear_has_living() {
  _has_bits_[0] &= ~0x00000080u;
}
void PassageRecord::clear_living() {
  living_ = false;
  clear_has_living();
}
bool PassageRecord::living() const {
  // @@protoc_insertion_point(field_get:Czhtdev.PassageRecord.living)
  return living_;
}
void PassageRecord::set_living(bool value) {
  set_has_living();
  living_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.PassageRecord.living)
}

// optional int32 type = 9;
bool PassageRecord::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PassageRecord::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
void PassageRecord::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void PassageRecord::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 PassageRecord::type() const {
  // @@protoc_insertion_point(field_get:Czhtdev.PassageRecord.type)
  return type_;
}
void PassageRecord::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.PassageRecord.type)
}

// optional int32 score = 10;
bool PassageRecord::has_score() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PassageRecord::set_has_score() {
  _has_bits_[0] |= 0x00000200u;
}
void PassageRecord::clear_has_score() {
  _has_bits_[0] &= ~0x00000200u;
}
void PassageRecord::clear_score() {
  score_ = 0;
  clear_has_score();
}
::google::protobuf::int32 PassageRecord::score() const {
  // @@protoc_insertion_point(field_get:Czhtdev.PassageRecord.score)
  return score_;
}
void PassageRecord::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.PassageRecord.score)
}

// optional .Czhtdev.Face_Param faceparam = 11;
bool PassageRecord::has_faceparam() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PassageRecord::set_has_faceparam() {
  _has_bits_[0] |= 0x00000400u;
}
void PassageRecord::clear_has_faceparam() {
  _has_bits_[0] &= ~0x00000400u;
}
void PassageRecord::clear_faceparam() {
  if (faceparam_ != NULL) faceparam_->::Czhtdev::Face_Param::Clear();
  clear_has_faceparam();
}
const ::Czhtdev::Face_Param& PassageRecord::faceparam() const {
  // @@protoc_insertion_point(field_get:Czhtdev.PassageRecord.faceparam)
  return faceparam_ != NULL ? *faceparam_
                         : *::Czhtdev::Face_Param::internal_default_instance();
}
::Czhtdev::Face_Param* PassageRecord::mutable_faceparam() {
  set_has_faceparam();
  if (faceparam_ == NULL) {
    faceparam_ = new ::Czhtdev::Face_Param;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.PassageRecord.faceparam)
  return faceparam_;
}
::Czhtdev::Face_Param* PassageRecord::release_faceparam() {
  // @@protoc_insertion_point(field_release:Czhtdev.PassageRecord.faceparam)
  clear_has_faceparam();
  ::Czhtdev::Face_Param* temp = faceparam_;
  faceparam_ = NULL;
  return temp;
}
void PassageRecord::set_allocated_faceparam(::Czhtdev::Face_Param* faceparam) {
  delete faceparam_;
  faceparam_ = faceparam;
  if (faceparam) {
    set_has_faceparam();
  } else {
    clear_has_faceparam();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.PassageRecord.faceparam)
}

inline const PassageRecord* PassageRecord::internal_default_instance() {
  return &PassageRecord_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Face_Param::kFaceLeftTopXFieldNumber;
const int Face_Param::kFaceLeftTopYFieldNumber;
const int Face_Param::kFaceWidthFieldNumber;
const int Face_Param::kFaceHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Face_Param::Face_Param()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.Face_Param)
}

void Face_Param::InitAsDefaultInstance() {
}

Face_Param::Face_Param(const Face_Param& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.Face_Param)
}

void Face_Param::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&facelefttopx_, 0, reinterpret_cast<char*>(&faceheight_) -
    reinterpret_cast<char*>(&facelefttopx_) + sizeof(faceheight_));
}

Face_Param::~Face_Param() {
  // @@protoc_insertion_point(destructor:Czhtdev.Face_Param)
  SharedDtor();
}

void Face_Param::SharedDtor() {
}

void Face_Param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Face_Param::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Face_Param_descriptor_;
}

const Face_Param& Face_Param::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Face_Param> Face_Param_default_instance_;

Face_Param* Face_Param::New(::google::protobuf::Arena* arena) const {
  Face_Param* n = new Face_Param;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Face_Param::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.Face_Param)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Face_Param, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Face_Param*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(facelefttopx_, faceheight_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Face_Param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.Face_Param)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 faceLeftTopX = 1;
      case 1: {
        if (tag == 8) {
          set_has_facelefttopx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &facelefttopx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_faceLeftTopY;
        break;
      }

      // required int32 faceLeftTopY = 2;
      case 2: {
        if (tag == 16) {
         parse_faceLeftTopY:
          set_has_facelefttopy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &facelefttopy_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_faceWidth;
        break;
      }

      // required int32 faceWidth = 3;
      case 3: {
        if (tag == 24) {
         parse_faceWidth:
          set_has_facewidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &facewidth_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_faceHeight;
        break;
      }

      // required int32 faceHeight = 4;
      case 4: {
        if (tag == 32) {
         parse_faceHeight:
          set_has_faceheight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &faceheight_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.Face_Param)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.Face_Param)
  return false;
#undef DO_
}

void Face_Param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.Face_Param)
  // required int32 faceLeftTopX = 1;
  if (has_facelefttopx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->facelefttopx(), output);
  }

  // required int32 faceLeftTopY = 2;
  if (has_facelefttopy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->facelefttopy(), output);
  }

  // required int32 faceWidth = 3;
  if (has_facewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->facewidth(), output);
  }

  // required int32 faceHeight = 4;
  if (has_faceheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->faceheight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.Face_Param)
}

::google::protobuf::uint8* Face_Param::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.Face_Param)
  // required int32 faceLeftTopX = 1;
  if (has_facelefttopx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->facelefttopx(), target);
  }

  // required int32 faceLeftTopY = 2;
  if (has_facelefttopy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->facelefttopy(), target);
  }

  // required int32 faceWidth = 3;
  if (has_facewidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->facewidth(), target);
  }

  // required int32 faceHeight = 4;
  if (has_faceheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->faceheight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.Face_Param)
  return target;
}

size_t Face_Param::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Czhtdev.Face_Param)
  size_t total_size = 0;

  if (has_facelefttopx()) {
    // required int32 faceLeftTopX = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->facelefttopx());
  }

  if (has_facelefttopy()) {
    // required int32 faceLeftTopY = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->facelefttopy());
  }

  if (has_facewidth()) {
    // required int32 faceWidth = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->facewidth());
  }

  if (has_faceheight()) {
    // required int32 faceHeight = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->faceheight());
  }

  return total_size;
}
size_t Face_Param::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.Face_Param)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 faceLeftTopX = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->facelefttopx());

    // required int32 faceLeftTopY = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->facelefttopy());

    // required int32 faceWidth = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->facewidth());

    // required int32 faceHeight = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->faceheight());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Face_Param::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.Face_Param)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Face_Param* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Face_Param>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.Face_Param)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.Face_Param)
    UnsafeMergeFrom(*source);
  }
}

void Face_Param::MergeFrom(const Face_Param& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.Face_Param)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Face_Param::UnsafeMergeFrom(const Face_Param& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facelefttopx()) {
      set_facelefttopx(from.facelefttopx());
    }
    if (from.has_facelefttopy()) {
      set_facelefttopy(from.facelefttopy());
    }
    if (from.has_facewidth()) {
      set_facewidth(from.facewidth());
    }
    if (from.has_faceheight()) {
      set_faceheight(from.faceheight());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Face_Param::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.Face_Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Face_Param::CopyFrom(const Face_Param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.Face_Param)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Face_Param::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Face_Param::Swap(Face_Param* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Face_Param::InternalSwap(Face_Param* other) {
  std::swap(facelefttopx_, other->facelefttopx_);
  std::swap(facelefttopy_, other->facelefttopy_);
  std::swap(facewidth_, other->facewidth_);
  std::swap(faceheight_, other->faceheight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Face_Param::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Face_Param_descriptor_;
  metadata.reflection = Face_Param_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Face_Param

// required int32 faceLeftTopX = 1;
bool Face_Param::has_facelefttopx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Face_Param::set_has_facelefttopx() {
  _has_bits_[0] |= 0x00000001u;
}
void Face_Param::clear_has_facelefttopx() {
  _has_bits_[0] &= ~0x00000001u;
}
void Face_Param::clear_facelefttopx() {
  facelefttopx_ = 0;
  clear_has_facelefttopx();
}
::google::protobuf::int32 Face_Param::facelefttopx() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Face_Param.faceLeftTopX)
  return facelefttopx_;
}
void Face_Param::set_facelefttopx(::google::protobuf::int32 value) {
  set_has_facelefttopx();
  facelefttopx_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.Face_Param.faceLeftTopX)
}

// required int32 faceLeftTopY = 2;
bool Face_Param::has_facelefttopy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Face_Param::set_has_facelefttopy() {
  _has_bits_[0] |= 0x00000002u;
}
void Face_Param::clear_has_facelefttopy() {
  _has_bits_[0] &= ~0x00000002u;
}
void Face_Param::clear_facelefttopy() {
  facelefttopy_ = 0;
  clear_has_facelefttopy();
}
::google::protobuf::int32 Face_Param::facelefttopy() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Face_Param.faceLeftTopY)
  return facelefttopy_;
}
void Face_Param::set_facelefttopy(::google::protobuf::int32 value) {
  set_has_facelefttopy();
  facelefttopy_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.Face_Param.faceLeftTopY)
}

// required int32 faceWidth = 3;
bool Face_Param::has_facewidth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Face_Param::set_has_facewidth() {
  _has_bits_[0] |= 0x00000004u;
}
void Face_Param::clear_has_facewidth() {
  _has_bits_[0] &= ~0x00000004u;
}
void Face_Param::clear_facewidth() {
  facewidth_ = 0;
  clear_has_facewidth();
}
::google::protobuf::int32 Face_Param::facewidth() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Face_Param.faceWidth)
  return facewidth_;
}
void Face_Param::set_facewidth(::google::protobuf::int32 value) {
  set_has_facewidth();
  facewidth_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.Face_Param.faceWidth)
}

// required int32 faceHeight = 4;
bool Face_Param::has_faceheight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Face_Param::set_has_faceheight() {
  _has_bits_[0] |= 0x00000008u;
}
void Face_Param::clear_has_faceheight() {
  _has_bits_[0] &= ~0x00000008u;
}
void Face_Param::clear_faceheight() {
  faceheight_ = 0;
  clear_has_faceheight();
}
::google::protobuf::int32 Face_Param::faceheight() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Face_Param.faceHeight)
  return faceheight_;
}
void Face_Param::set_faceheight(::google::protobuf::int32 value) {
  set_has_faceheight();
  faceheight_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.Face_Param.faceHeight)
}

inline const Face_Param* Face_Param::internal_default_instance() {
  return &Face_Param_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PassageRecordList::kIdFieldNumber;
const int PassageRecordList::kTimeFieldNumber;
const int PassageRecordList::kUserIdFieldNumber;
const int PassageRecordList::kNameFieldNumber;
const int PassageRecordList::kPermissionTimeFieldNumber;
const int PassageRecordList::kPermissionAreaFieldNumber;
const int PassageRecordList::kLivingFieldNumber;
const int PassageRecordList::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PassageRecordList::PassageRecordList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.PassageRecordList)
}

void PassageRecordList::InitAsDefaultInstance() {
}

PassageRecordList::PassageRecordList(const PassageRecordList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.PassageRecordList)
}

void PassageRecordList::SharedCtor() {
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&time_) + sizeof(type_));
}

PassageRecordList::~PassageRecordList() {
  // @@protoc_insertion_point(destructor:Czhtdev.PassageRecordList)
  SharedDtor();
}

void PassageRecordList::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PassageRecordList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassageRecordList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassageRecordList_descriptor_;
}

const PassageRecordList& PassageRecordList::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PassageRecordList> PassageRecordList_default_instance_;

PassageRecordList* PassageRecordList::New(::google::protobuf::Arena* arena) const {
  PassageRecordList* n = new PassageRecordList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PassageRecordList::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.PassageRecordList)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PassageRecordList, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PassageRecordList*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(time_, type_);
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PassageRecordList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.PassageRecordList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required uint64 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_id;
        break;
      }

      // optional string user_id = 4;
      case 4: {
        if (tag == 34) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.PassageRecordList.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.PassageRecordList.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_permission_time;
        break;
      }

      // optional bool permission_time = 6;
      case 6: {
        if (tag == 48) {
         parse_permission_time:
          set_has_permission_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &permission_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_permission_area;
        break;
      }

      // optional bool permission_area = 7;
      case 7: {
        if (tag == 56) {
         parse_permission_area:
          set_has_permission_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &permission_area_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_living;
        break;
      }

      // optional bool living = 8;
      case 8: {
        if (tag == 64) {
         parse_living:
          set_has_living();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &living_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // optional int32 type = 9;
      case 9: {
        if (tag == 72) {
         parse_type:
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.PassageRecordList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.PassageRecordList)
  return false;
#undef DO_
}

void PassageRecordList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.PassageRecordList)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required uint64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  // optional string user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.PassageRecordList.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_id(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.PassageRecordList.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional bool permission_time = 6;
  if (has_permission_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->permission_time(), output);
  }

  // optional bool permission_area = 7;
  if (has_permission_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->permission_area(), output);
  }

  // optional bool living = 8;
  if (has_living()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->living(), output);
  }

  // optional int32 type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.PassageRecordList)
}

::google::protobuf::uint8* PassageRecordList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.PassageRecordList)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required uint64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  // optional string user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.PassageRecordList.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_id(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.PassageRecordList.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional bool permission_time = 6;
  if (has_permission_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->permission_time(), target);
  }

  // optional bool permission_area = 7;
  if (has_permission_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->permission_area(), target);
  }

  // optional bool living = 8;
  if (has_living()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->living(), target);
  }

  // optional int32 type = 9;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.PassageRecordList)
  return target;
}

size_t PassageRecordList::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Czhtdev.PassageRecordList)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_time()) {
    // required uint64 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  return total_size;
}
size_t PassageRecordList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.PassageRecordList)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required uint64 time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 252u) {
    // optional string user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool permission_time = 6;
    if (has_permission_time()) {
      total_size += 1 + 1;
    }

    // optional bool permission_area = 7;
    if (has_permission_area()) {
      total_size += 1 + 1;
    }

    // optional bool living = 8;
    if (has_living()) {
      total_size += 1 + 1;
    }

    // optional int32 type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassageRecordList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.PassageRecordList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PassageRecordList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PassageRecordList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.PassageRecordList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.PassageRecordList)
    UnsafeMergeFrom(*source);
  }
}

void PassageRecordList::MergeFrom(const PassageRecordList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.PassageRecordList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PassageRecordList::UnsafeMergeFrom(const PassageRecordList& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_permission_time()) {
      set_permission_time(from.permission_time());
    }
    if (from.has_permission_area()) {
      set_permission_area(from.permission_area());
    }
    if (from.has_living()) {
      set_living(from.living());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PassageRecordList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.PassageRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassageRecordList::CopyFrom(const PassageRecordList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.PassageRecordList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PassageRecordList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PassageRecordList::Swap(PassageRecordList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PassageRecordList::InternalSwap(PassageRecordList* other) {
  std::swap(id_, other->id_);
  std::swap(time_, other->time_);
  user_id_.Swap(&other->user_id_);
  name_.Swap(&other->name_);
  std::swap(permission_time_, other->permission_time_);
  std::swap(permission_area_, other->permission_area_);
  std::swap(living_, other->living_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PassageRecordList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassageRecordList_descriptor_;
  metadata.reflection = PassageRecordList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PassageRecordList

// required int32 id = 1;
bool PassageRecordList::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PassageRecordList::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PassageRecordList::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PassageRecordList::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 PassageRecordList::id() const {
  // @@protoc_insertion_point(field_get:Czhtdev.PassageRecordList.id)
  return id_;
}
void PassageRecordList::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.PassageRecordList.id)
}

// required uint64 time = 3;
bool PassageRecordList::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PassageRecordList::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void PassageRecordList::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void PassageRecordList::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 PassageRecordList::time() const {
  // @@protoc_insertion_point(field_get:Czhtdev.PassageRecordList.time)
  return time_;
}
void PassageRecordList::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.PassageRecordList.time)
}

// optional string user_id = 4;
bool PassageRecordList::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PassageRecordList::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void PassageRecordList::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void PassageRecordList::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& PassageRecordList::user_id() const {
  // @@protoc_insertion_point(field_get:Czhtdev.PassageRecordList.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PassageRecordList::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.PassageRecordList.user_id)
}
void PassageRecordList::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.PassageRecordList.user_id)
}
void PassageRecordList::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.PassageRecordList.user_id)
}
::std::string* PassageRecordList::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:Czhtdev.PassageRecordList.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PassageRecordList::release_user_id() {
  // @@protoc_insertion_point(field_release:Czhtdev.PassageRecordList.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PassageRecordList::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.PassageRecordList.user_id)
}

// optional string name = 5;
bool PassageRecordList::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PassageRecordList::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
void PassageRecordList::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void PassageRecordList::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& PassageRecordList::name() const {
  // @@protoc_insertion_point(field_get:Czhtdev.PassageRecordList.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PassageRecordList::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.PassageRecordList.name)
}
void PassageRecordList::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.PassageRecordList.name)
}
void PassageRecordList::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.PassageRecordList.name)
}
::std::string* PassageRecordList::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Czhtdev.PassageRecordList.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PassageRecordList::release_name() {
  // @@protoc_insertion_point(field_release:Czhtdev.PassageRecordList.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PassageRecordList::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.PassageRecordList.name)
}

// optional bool permission_time = 6;
bool PassageRecordList::has_permission_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PassageRecordList::set_has_permission_time() {
  _has_bits_[0] |= 0x00000010u;
}
void PassageRecordList::clear_has_permission_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void PassageRecordList::clear_permission_time() {
  permission_time_ = false;
  clear_has_permission_time();
}
bool PassageRecordList::permission_time() const {
  // @@protoc_insertion_point(field_get:Czhtdev.PassageRecordList.permission_time)
  return permission_time_;
}
void PassageRecordList::set_permission_time(bool value) {
  set_has_permission_time();
  permission_time_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.PassageRecordList.permission_time)
}

// optional bool permission_area = 7;
bool PassageRecordList::has_permission_area() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PassageRecordList::set_has_permission_area() {
  _has_bits_[0] |= 0x00000020u;
}
void PassageRecordList::clear_has_permission_area() {
  _has_bits_[0] &= ~0x00000020u;
}
void PassageRecordList::clear_permission_area() {
  permission_area_ = false;
  clear_has_permission_area();
}
bool PassageRecordList::permission_area() const {
  // @@protoc_insertion_point(field_get:Czhtdev.PassageRecordList.permission_area)
  return permission_area_;
}
void PassageRecordList::set_permission_area(bool value) {
  set_has_permission_area();
  permission_area_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.PassageRecordList.permission_area)
}

// optional bool living = 8;
bool PassageRecordList::has_living() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PassageRecordList::set_has_living() {
  _has_bits_[0] |= 0x00000040u;
}
void PassageRecordList::clear_has_living() {
  _has_bits_[0] &= ~0x00000040u;
}
void PassageRecordList::clear_living() {
  living_ = false;
  clear_has_living();
}
bool PassageRecordList::living() const {
  // @@protoc_insertion_point(field_get:Czhtdev.PassageRecordList.living)
  return living_;
}
void PassageRecordList::set_living(bool value) {
  set_has_living();
  living_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.PassageRecordList.living)
}

// optional int32 type = 9;
bool PassageRecordList::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PassageRecordList::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
void PassageRecordList::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void PassageRecordList::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 PassageRecordList::type() const {
  // @@protoc_insertion_point(field_get:Czhtdev.PassageRecordList.type)
  return type_;
}
void PassageRecordList::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.PassageRecordList.type)
}

inline const PassageRecordList* PassageRecordList::internal_default_instance() {
  return &PassageRecordList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddPicture::kUserIdFieldNumber;
const int AddPicture::kPictureIdFieldNumber;
const int AddPicture::kFaceDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddPicture::AddPicture()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.AddPicture)
}

void AddPicture::InitAsDefaultInstance() {
}

AddPicture::AddPicture(const AddPicture& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.AddPicture)
}

void AddPicture::SharedCtor() {
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  face_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  picture_id_ = 0;
}

AddPicture::~AddPicture() {
  // @@protoc_insertion_point(destructor:Czhtdev.AddPicture)
  SharedDtor();
}

void AddPicture::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  face_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AddPicture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPicture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddPicture_descriptor_;
}

const AddPicture& AddPicture::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AddPicture> AddPicture_default_instance_;

AddPicture* AddPicture::New(::google::protobuf::Arena* arena) const {
  AddPicture* n = new AddPicture;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddPicture::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.AddPicture)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    picture_id_ = 0;
    if (has_face_data()) {
      face_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AddPicture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.AddPicture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.AddPicture.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_picture_id;
        break;
      }

      // required int32 picture_id = 2;
      case 2: {
        if (tag == 16) {
         parse_picture_id:
          set_has_picture_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &picture_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_face_data;
        break;
      }

      // required bytes face_data = 3;
      case 3: {
        if (tag == 26) {
         parse_face_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_face_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.AddPicture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.AddPicture)
  return false;
#undef DO_
}

void AddPicture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.AddPicture)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.AddPicture.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // required int32 picture_id = 2;
  if (has_picture_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->picture_id(), output);
  }

  // required bytes face_data = 3;
  if (has_face_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->face_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.AddPicture)
}

::google::protobuf::uint8* AddPicture::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.AddPicture)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.AddPicture.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // required int32 picture_id = 2;
  if (has_picture_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->picture_id(), target);
  }

  // required bytes face_data = 3;
  if (has_face_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->face_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.AddPicture)
  return target;
}

size_t AddPicture::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Czhtdev.AddPicture)
  size_t total_size = 0;

  if (has_user_id()) {
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  if (has_picture_id()) {
    // required int32 picture_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->picture_id());
  }

  if (has_face_data()) {
    // required bytes face_data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->face_data());
  }

  return total_size;
}
size_t AddPicture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.AddPicture)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());

    // required int32 picture_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->picture_id());

    // required bytes face_data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->face_data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPicture::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.AddPicture)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddPicture* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddPicture>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.AddPicture)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.AddPicture)
    UnsafeMergeFrom(*source);
  }
}

void AddPicture::MergeFrom(const AddPicture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.AddPicture)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AddPicture::UnsafeMergeFrom(const AddPicture& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_picture_id()) {
      set_picture_id(from.picture_id());
    }
    if (from.has_face_data()) {
      set_has_face_data();
      face_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.face_data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void AddPicture::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.AddPicture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPicture::CopyFrom(const AddPicture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.AddPicture)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AddPicture::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AddPicture::Swap(AddPicture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddPicture::InternalSwap(AddPicture* other) {
  user_id_.Swap(&other->user_id_);
  std::swap(picture_id_, other->picture_id_);
  face_data_.Swap(&other->face_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddPicture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddPicture_descriptor_;
  metadata.reflection = AddPicture_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddPicture

// required string user_id = 1;
bool AddPicture::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddPicture::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void AddPicture::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddPicture::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& AddPicture::user_id() const {
  // @@protoc_insertion_point(field_get:Czhtdev.AddPicture.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddPicture::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.AddPicture.user_id)
}
void AddPicture::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.AddPicture.user_id)
}
void AddPicture::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.AddPicture.user_id)
}
::std::string* AddPicture::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:Czhtdev.AddPicture.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddPicture::release_user_id() {
  // @@protoc_insertion_point(field_release:Czhtdev.AddPicture.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddPicture::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.AddPicture.user_id)
}

// required int32 picture_id = 2;
bool AddPicture::has_picture_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddPicture::set_has_picture_id() {
  _has_bits_[0] |= 0x00000002u;
}
void AddPicture::clear_has_picture_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddPicture::clear_picture_id() {
  picture_id_ = 0;
  clear_has_picture_id();
}
::google::protobuf::int32 AddPicture::picture_id() const {
  // @@protoc_insertion_point(field_get:Czhtdev.AddPicture.picture_id)
  return picture_id_;
}
void AddPicture::set_picture_id(::google::protobuf::int32 value) {
  set_has_picture_id();
  picture_id_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.AddPicture.picture_id)
}

// required bytes face_data = 3;
bool AddPicture::has_face_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AddPicture::set_has_face_data() {
  _has_bits_[0] |= 0x00000004u;
}
void AddPicture::clear_has_face_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void AddPicture::clear_face_data() {
  face_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_face_data();
}
const ::std::string& AddPicture::face_data() const {
  // @@protoc_insertion_point(field_get:Czhtdev.AddPicture.face_data)
  return face_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddPicture::set_face_data(const ::std::string& value) {
  set_has_face_data();
  face_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.AddPicture.face_data)
}
void AddPicture::set_face_data(const char* value) {
  set_has_face_data();
  face_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.AddPicture.face_data)
}
void AddPicture::set_face_data(const void* value, size_t size) {
  set_has_face_data();
  face_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.AddPicture.face_data)
}
::std::string* AddPicture::mutable_face_data() {
  set_has_face_data();
  // @@protoc_insertion_point(field_mutable:Czhtdev.AddPicture.face_data)
  return face_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddPicture::release_face_data() {
  // @@protoc_insertion_point(field_release:Czhtdev.AddPicture.face_data)
  clear_has_face_data();
  return face_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddPicture::set_allocated_face_data(::std::string* face_data) {
  if (face_data != NULL) {
    set_has_face_data();
  } else {
    clear_has_face_data();
  }
  face_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), face_data);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.AddPicture.face_data)
}

inline const AddPicture* AddPicture::internal_default_instance() {
  return &AddPicture_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdatePicture::kUserIdFieldNumber;
const int UpdatePicture::kPictureOldFieldNumber;
const int UpdatePicture::kPictureNewFieldNumber;
const int UpdatePicture::kFaceDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdatePicture::UpdatePicture()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.UpdatePicture)
}

void UpdatePicture::InitAsDefaultInstance() {
}

UpdatePicture::UpdatePicture(const UpdatePicture& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.UpdatePicture)
}

void UpdatePicture::SharedCtor() {
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  face_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&picture_old_, 0, reinterpret_cast<char*>(&picture_new_) -
    reinterpret_cast<char*>(&picture_old_) + sizeof(picture_new_));
}

UpdatePicture::~UpdatePicture() {
  // @@protoc_insertion_point(destructor:Czhtdev.UpdatePicture)
  SharedDtor();
}

void UpdatePicture::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  face_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdatePicture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdatePicture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdatePicture_descriptor_;
}

const UpdatePicture& UpdatePicture::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UpdatePicture> UpdatePicture_default_instance_;

UpdatePicture* UpdatePicture::New(::google::protobuf::Arena* arena) const {
  UpdatePicture* n = new UpdatePicture;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdatePicture::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.UpdatePicture)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UpdatePicture, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UpdatePicture*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(picture_old_, picture_new_);
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_face_data()) {
      face_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UpdatePicture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.UpdatePicture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.UpdatePicture.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_picture_old;
        break;
      }

      // required int32 picture_old = 2;
      case 2: {
        if (tag == 16) {
         parse_picture_old:
          set_has_picture_old();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &picture_old_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_picture_new;
        break;
      }

      // required int32 picture_new = 3;
      case 3: {
        if (tag == 24) {
         parse_picture_new:
          set_has_picture_new();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &picture_new_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_face_data;
        break;
      }

      // required bytes face_data = 4;
      case 4: {
        if (tag == 34) {
         parse_face_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_face_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.UpdatePicture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.UpdatePicture)
  return false;
#undef DO_
}

void UpdatePicture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.UpdatePicture)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.UpdatePicture.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // required int32 picture_old = 2;
  if (has_picture_old()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->picture_old(), output);
  }

  // required int32 picture_new = 3;
  if (has_picture_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->picture_new(), output);
  }

  // required bytes face_data = 4;
  if (has_face_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->face_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.UpdatePicture)
}

::google::protobuf::uint8* UpdatePicture::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.UpdatePicture)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.UpdatePicture.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // required int32 picture_old = 2;
  if (has_picture_old()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->picture_old(), target);
  }

  // required int32 picture_new = 3;
  if (has_picture_new()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->picture_new(), target);
  }

  // required bytes face_data = 4;
  if (has_face_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->face_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.UpdatePicture)
  return target;
}

size_t UpdatePicture::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Czhtdev.UpdatePicture)
  size_t total_size = 0;

  if (has_user_id()) {
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  if (has_picture_old()) {
    // required int32 picture_old = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->picture_old());
  }

  if (has_picture_new()) {
    // required int32 picture_new = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->picture_new());
  }

  if (has_face_data()) {
    // required bytes face_data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->face_data());
  }

  return total_size;
}
size_t UpdatePicture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.UpdatePicture)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());

    // required int32 picture_old = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->picture_old());

    // required int32 picture_new = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->picture_new());

    // required bytes face_data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->face_data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdatePicture::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.UpdatePicture)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UpdatePicture* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdatePicture>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.UpdatePicture)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.UpdatePicture)
    UnsafeMergeFrom(*source);
  }
}

void UpdatePicture::MergeFrom(const UpdatePicture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.UpdatePicture)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UpdatePicture::UnsafeMergeFrom(const UpdatePicture& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_picture_old()) {
      set_picture_old(from.picture_old());
    }
    if (from.has_picture_new()) {
      set_picture_new(from.picture_new());
    }
    if (from.has_face_data()) {
      set_has_face_data();
      face_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.face_data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void UpdatePicture::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.UpdatePicture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePicture::CopyFrom(const UpdatePicture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.UpdatePicture)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UpdatePicture::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UpdatePicture::Swap(UpdatePicture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdatePicture::InternalSwap(UpdatePicture* other) {
  user_id_.Swap(&other->user_id_);
  std::swap(picture_old_, other->picture_old_);
  std::swap(picture_new_, other->picture_new_);
  face_data_.Swap(&other->face_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdatePicture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdatePicture_descriptor_;
  metadata.reflection = UpdatePicture_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdatePicture

// required string user_id = 1;
bool UpdatePicture::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpdatePicture::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UpdatePicture::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpdatePicture::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& UpdatePicture::user_id() const {
  // @@protoc_insertion_point(field_get:Czhtdev.UpdatePicture.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdatePicture::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.UpdatePicture.user_id)
}
void UpdatePicture::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.UpdatePicture.user_id)
}
void UpdatePicture::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.UpdatePicture.user_id)
}
::std::string* UpdatePicture::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:Czhtdev.UpdatePicture.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdatePicture::release_user_id() {
  // @@protoc_insertion_point(field_release:Czhtdev.UpdatePicture.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdatePicture::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.UpdatePicture.user_id)
}

// required int32 picture_old = 2;
bool UpdatePicture::has_picture_old() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UpdatePicture::set_has_picture_old() {
  _has_bits_[0] |= 0x00000002u;
}
void UpdatePicture::clear_has_picture_old() {
  _has_bits_[0] &= ~0x00000002u;
}
void UpdatePicture::clear_picture_old() {
  picture_old_ = 0;
  clear_has_picture_old();
}
::google::protobuf::int32 UpdatePicture::picture_old() const {
  // @@protoc_insertion_point(field_get:Czhtdev.UpdatePicture.picture_old)
  return picture_old_;
}
void UpdatePicture::set_picture_old(::google::protobuf::int32 value) {
  set_has_picture_old();
  picture_old_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.UpdatePicture.picture_old)
}

// required int32 picture_new = 3;
bool UpdatePicture::has_picture_new() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UpdatePicture::set_has_picture_new() {
  _has_bits_[0] |= 0x00000004u;
}
void UpdatePicture::clear_has_picture_new() {
  _has_bits_[0] &= ~0x00000004u;
}
void UpdatePicture::clear_picture_new() {
  picture_new_ = 0;
  clear_has_picture_new();
}
::google::protobuf::int32 UpdatePicture::picture_new() const {
  // @@protoc_insertion_point(field_get:Czhtdev.UpdatePicture.picture_new)
  return picture_new_;
}
void UpdatePicture::set_picture_new(::google::protobuf::int32 value) {
  set_has_picture_new();
  picture_new_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.UpdatePicture.picture_new)
}

// required bytes face_data = 4;
bool UpdatePicture::has_face_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UpdatePicture::set_has_face_data() {
  _has_bits_[0] |= 0x00000008u;
}
void UpdatePicture::clear_has_face_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void UpdatePicture::clear_face_data() {
  face_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_face_data();
}
const ::std::string& UpdatePicture::face_data() const {
  // @@protoc_insertion_point(field_get:Czhtdev.UpdatePicture.face_data)
  return face_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdatePicture::set_face_data(const ::std::string& value) {
  set_has_face_data();
  face_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.UpdatePicture.face_data)
}
void UpdatePicture::set_face_data(const char* value) {
  set_has_face_data();
  face_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.UpdatePicture.face_data)
}
void UpdatePicture::set_face_data(const void* value, size_t size) {
  set_has_face_data();
  face_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.UpdatePicture.face_data)
}
::std::string* UpdatePicture::mutable_face_data() {
  set_has_face_data();
  // @@protoc_insertion_point(field_mutable:Czhtdev.UpdatePicture.face_data)
  return face_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdatePicture::release_face_data() {
  // @@protoc_insertion_point(field_release:Czhtdev.UpdatePicture.face_data)
  clear_has_face_data();
  return face_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdatePicture::set_allocated_face_data(::std::string* face_data) {
  if (face_data != NULL) {
    set_has_face_data();
  } else {
    clear_has_face_data();
  }
  face_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), face_data);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.UpdatePicture.face_data)
}

inline const UpdatePicture* UpdatePicture::internal_default_instance() {
  return &UpdatePicture_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelPicture::kUserIdFieldNumber;
const int DelPicture::kPictureIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelPicture::DelPicture()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.DelPicture)
}

void DelPicture::InitAsDefaultInstance() {
}

DelPicture::DelPicture(const DelPicture& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.DelPicture)
}

void DelPicture::SharedCtor() {
  _cached_size_ = 0;
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  picture_id_ = 0;
}

DelPicture::~DelPicture() {
  // @@protoc_insertion_point(destructor:Czhtdev.DelPicture)
  SharedDtor();
}

void DelPicture::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DelPicture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelPicture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelPicture_descriptor_;
}

const DelPicture& DelPicture::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DelPicture> DelPicture_default_instance_;

DelPicture* DelPicture::New(::google::protobuf::Arena* arena) const {
  DelPicture* n = new DelPicture;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelPicture::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.DelPicture)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    picture_id_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DelPicture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.DelPicture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.DelPicture.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_picture_id;
        break;
      }

      // required int32 picture_id = 2;
      case 2: {
        if (tag == 16) {
         parse_picture_id:
          set_has_picture_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &picture_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.DelPicture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.DelPicture)
  return false;
#undef DO_
}

void DelPicture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.DelPicture)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.DelPicture.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // required int32 picture_id = 2;
  if (has_picture_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->picture_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.DelPicture)
}

::google::protobuf::uint8* DelPicture::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.DelPicture)
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.DelPicture.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // required int32 picture_id = 2;
  if (has_picture_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->picture_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.DelPicture)
  return target;
}

size_t DelPicture::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Czhtdev.DelPicture)
  size_t total_size = 0;

  if (has_user_id()) {
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  if (has_picture_id()) {
    // required int32 picture_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->picture_id());
  }

  return total_size;
}
size_t DelPicture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.DelPicture)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string user_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());

    // required int32 picture_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->picture_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelPicture::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.DelPicture)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DelPicture* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelPicture>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.DelPicture)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.DelPicture)
    UnsafeMergeFrom(*source);
  }
}

void DelPicture::MergeFrom(const DelPicture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.DelPicture)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DelPicture::UnsafeMergeFrom(const DelPicture& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_picture_id()) {
      set_picture_id(from.picture_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void DelPicture::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.DelPicture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelPicture::CopyFrom(const DelPicture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.DelPicture)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DelPicture::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DelPicture::Swap(DelPicture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelPicture::InternalSwap(DelPicture* other) {
  user_id_.Swap(&other->user_id_);
  std::swap(picture_id_, other->picture_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DelPicture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelPicture_descriptor_;
  metadata.reflection = DelPicture_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelPicture

// required string user_id = 1;
bool DelPicture::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelPicture::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DelPicture::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelPicture::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
const ::std::string& DelPicture::user_id() const {
  // @@protoc_insertion_point(field_get:Czhtdev.DelPicture.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DelPicture::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.DelPicture.user_id)
}
void DelPicture::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.DelPicture.user_id)
}
void DelPicture::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.DelPicture.user_id)
}
::std::string* DelPicture::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:Czhtdev.DelPicture.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DelPicture::release_user_id() {
  // @@protoc_insertion_point(field_release:Czhtdev.DelPicture.user_id)
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DelPicture::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.DelPicture.user_id)
}

// required int32 picture_id = 2;
bool DelPicture::has_picture_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DelPicture::set_has_picture_id() {
  _has_bits_[0] |= 0x00000002u;
}
void DelPicture::clear_has_picture_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void DelPicture::clear_picture_id() {
  picture_id_ = 0;
  clear_has_picture_id();
}
::google::protobuf::int32 DelPicture::picture_id() const {
  // @@protoc_insertion_point(field_get:Czhtdev.DelPicture.picture_id)
  return picture_id_;
}
void DelPicture::set_picture_id(::google::protobuf::int32 value) {
  set_has_picture_id();
  picture_id_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.DelPicture.picture_id)
}

inline const DelPicture* DelPicture::internal_default_instance() {
  return &DelPicture_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IDCard::kCardIdFieldNumber;
const int IDCard::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IDCard::IDCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.IDCard)
}

void IDCard::InitAsDefaultInstance() {
}

IDCard::IDCard(const IDCard& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.IDCard)
}

void IDCard::SharedCtor() {
  _cached_size_ = 0;
  card_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

IDCard::~IDCard() {
  // @@protoc_insertion_point(destructor:Czhtdev.IDCard)
  SharedDtor();
}

void IDCard::SharedDtor() {
  card_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IDCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IDCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IDCard_descriptor_;
}

const IDCard& IDCard::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<IDCard> IDCard_default_instance_;

IDCard* IDCard::New(::google::protobuf::Arena* arena) const {
  IDCard* n = new IDCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IDCard::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.IDCard)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_card_id()) {
      card_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    status_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IDCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.IDCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string card_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_id().data(), this->card_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.IDCard.card_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.IDCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.IDCard)
  return false;
#undef DO_
}

void IDCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.IDCard)
  // required string card_id = 1;
  if (has_card_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.IDCard.card_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->card_id(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.IDCard)
}

::google::protobuf::uint8* IDCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.IDCard)
  // required string card_id = 1;
  if (has_card_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.IDCard.card_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->card_id(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.IDCard)
  return target;
}

size_t IDCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.IDCard)
  size_t total_size = 0;

  // required string card_id = 1;
  if (has_card_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->card_id());
  }
  // optional int32 status = 2;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IDCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.IDCard)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IDCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IDCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.IDCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.IDCard)
    UnsafeMergeFrom(*source);
  }
}

void IDCard::MergeFrom(const IDCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.IDCard)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void IDCard::UnsafeMergeFrom(const IDCard& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card_id()) {
      set_has_card_id();
      card_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.card_id_);
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void IDCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.IDCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IDCard::CopyFrom(const IDCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.IDCard)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool IDCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IDCard::Swap(IDCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IDCard::InternalSwap(IDCard* other) {
  card_id_.Swap(&other->card_id_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IDCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IDCard_descriptor_;
  metadata.reflection = IDCard_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IDCard

// required string card_id = 1;
bool IDCard::has_card_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IDCard::set_has_card_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IDCard::clear_has_card_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IDCard::clear_card_id() {
  card_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_card_id();
}
const ::std::string& IDCard::card_id() const {
  // @@protoc_insertion_point(field_get:Czhtdev.IDCard.card_id)
  return card_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IDCard::set_card_id(const ::std::string& value) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.IDCard.card_id)
}
void IDCard::set_card_id(const char* value) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.IDCard.card_id)
}
void IDCard::set_card_id(const char* value, size_t size) {
  set_has_card_id();
  card_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.IDCard.card_id)
}
::std::string* IDCard::mutable_card_id() {
  set_has_card_id();
  // @@protoc_insertion_point(field_mutable:Czhtdev.IDCard.card_id)
  return card_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IDCard::release_card_id() {
  // @@protoc_insertion_point(field_release:Czhtdev.IDCard.card_id)
  clear_has_card_id();
  return card_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IDCard::set_allocated_card_id(::std::string* card_id) {
  if (card_id != NULL) {
    set_has_card_id();
  } else {
    clear_has_card_id();
  }
  card_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), card_id);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.IDCard.card_id)
}

// optional int32 status = 2;
bool IDCard::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IDCard::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void IDCard::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void IDCard::clear_status() {
  status_ = 0;
  clear_has_status();
}
::google::protobuf::int32 IDCard::status() const {
  // @@protoc_insertion_point(field_get:Czhtdev.IDCard.status)
  return status_;
}
void IDCard::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.IDCard.status)
}

inline const IDCard* IDCard::internal_default_instance() {
  return &IDCard_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IPTable::kIpFieldNumber;
const int IPTable::kHouseNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IPTable::IPTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.IPTable)
}

void IPTable::InitAsDefaultInstance() {
}

IPTable::IPTable(const IPTable& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.IPTable)
}

void IPTable::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  house_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

IPTable::~IPTable() {
  // @@protoc_insertion_point(destructor:Czhtdev.IPTable)
  SharedDtor();
}

void IPTable::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  house_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IPTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IPTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPTable_descriptor_;
}

const IPTable& IPTable::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<IPTable> IPTable_default_instance_;

IPTable* IPTable::New(::google::protobuf::Arena* arena) const {
  IPTable* n = new IPTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IPTable::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.IPTable)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_house_number()) {
      house_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IPTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.IPTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.IPTable.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_house_number;
        break;
      }

      // required string house_number = 2;
      case 2: {
        if (tag == 18) {
         parse_house_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_house_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->house_number().data(), this->house_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.IPTable.house_number");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.IPTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.IPTable)
  return false;
#undef DO_
}

void IPTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.IPTable)
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.IPTable.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // required string house_number = 2;
  if (has_house_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->house_number().data(), this->house_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.IPTable.house_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->house_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.IPTable)
}

::google::protobuf::uint8* IPTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.IPTable)
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.IPTable.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required string house_number = 2;
  if (has_house_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->house_number().data(), this->house_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.IPTable.house_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->house_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.IPTable)
  return target;
}

size_t IPTable::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Czhtdev.IPTable)
  size_t total_size = 0;

  if (has_ip()) {
    // required string ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (has_house_number()) {
    // required string house_number = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->house_number());
  }

  return total_size;
}
size_t IPTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.IPTable)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string ip = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

    // required string house_number = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->house_number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IPTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.IPTable)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IPTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IPTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.IPTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.IPTable)
    UnsafeMergeFrom(*source);
  }
}

void IPTable::MergeFrom(const IPTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.IPTable)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void IPTable::UnsafeMergeFrom(const IPTable& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_house_number()) {
      set_has_house_number();
      house_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.house_number_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void IPTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.IPTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPTable::CopyFrom(const IPTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.IPTable)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool IPTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IPTable::Swap(IPTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IPTable::InternalSwap(IPTable* other) {
  ip_.Swap(&other->ip_);
  house_number_.Swap(&other->house_number_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IPTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IPTable_descriptor_;
  metadata.reflection = IPTable_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IPTable

// required string ip = 1;
bool IPTable::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IPTable::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void IPTable::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void IPTable::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& IPTable::ip() const {
  // @@protoc_insertion_point(field_get:Czhtdev.IPTable.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IPTable::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.IPTable.ip)
}
void IPTable::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.IPTable.ip)
}
void IPTable::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.IPTable.ip)
}
::std::string* IPTable::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:Czhtdev.IPTable.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IPTable::release_ip() {
  // @@protoc_insertion_point(field_release:Czhtdev.IPTable.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IPTable::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.IPTable.ip)
}

// required string house_number = 2;
bool IPTable::has_house_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IPTable::set_has_house_number() {
  _has_bits_[0] |= 0x00000002u;
}
void IPTable::clear_has_house_number() {
  _has_bits_[0] &= ~0x00000002u;
}
void IPTable::clear_house_number() {
  house_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_house_number();
}
const ::std::string& IPTable::house_number() const {
  // @@protoc_insertion_point(field_get:Czhtdev.IPTable.house_number)
  return house_number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IPTable::set_house_number(const ::std::string& value) {
  set_has_house_number();
  house_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.IPTable.house_number)
}
void IPTable::set_house_number(const char* value) {
  set_has_house_number();
  house_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.IPTable.house_number)
}
void IPTable::set_house_number(const char* value, size_t size) {
  set_has_house_number();
  house_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.IPTable.house_number)
}
::std::string* IPTable::mutable_house_number() {
  set_has_house_number();
  // @@protoc_insertion_point(field_mutable:Czhtdev.IPTable.house_number)
  return house_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IPTable::release_house_number() {
  // @@protoc_insertion_point(field_release:Czhtdev.IPTable.house_number)
  clear_has_house_number();
  return house_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IPTable::set_allocated_house_number(::std::string* house_number) {
  if (house_number != NULL) {
    set_has_house_number();
  } else {
    clear_has_house_number();
  }
  house_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), house_number);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.IPTable.house_number)
}

inline const IPTable* IPTable::internal_default_instance() {
  return &IPTable_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IP::kIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IP::IP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.IP)
}

void IP::InitAsDefaultInstance() {
}

IP::IP(const IP& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.IP)
}

void IP::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

IP::~IP() {
  // @@protoc_insertion_point(destructor:Czhtdev.IP)
  SharedDtor();
}

void IP::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IP_descriptor_;
}

const IP& IP::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<IP> IP_default_instance_;

IP* IP::New(::google::protobuf::Arena* arena) const {
  IP* n = new IP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IP::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.IP)
  if (has_ip()) {
    ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.IP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.IP.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.IP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.IP)
  return false;
#undef DO_
}

void IP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.IP)
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.IP.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.IP)
}

::google::protobuf::uint8* IP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.IP)
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.IP.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.IP)
  return target;
}

size_t IP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.IP)
  size_t total_size = 0;

  // required string ip = 1;
  if (has_ip()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.IP)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.IP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.IP)
    UnsafeMergeFrom(*source);
  }
}

void IP::MergeFrom(const IP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.IP)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void IP::UnsafeMergeFrom(const IP& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void IP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.IP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IP::CopyFrom(const IP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.IP)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool IP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IP::Swap(IP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IP::InternalSwap(IP* other) {
  ip_.Swap(&other->ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IP_descriptor_;
  metadata.reflection = IP_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IP

// required string ip = 1;
bool IP::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IP::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void IP::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void IP::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& IP::ip() const {
  // @@protoc_insertion_point(field_get:Czhtdev.IP.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IP::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.IP.ip)
}
void IP::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.IP.ip)
}
void IP::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.IP.ip)
}
::std::string* IP::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:Czhtdev.IP.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IP::release_ip() {
  // @@protoc_insertion_point(field_release:Czhtdev.IP.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IP::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.IP.ip)
}

inline const IP* IP::internal_default_instance() {
  return &IP_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kAddUserFieldNumber;
const int Request::kDeteleUserFieldNumber;
const int Request::kUpdateUserFieldNumber;
const int Request::kQueryUserFieldNumber;
const int Request::kQueryUserListFieldNumber;
const int Request::kAddPictureFieldNumber;
const int Request::kUpdatePictureFieldNumber;
const int Request::kDetelePictureFieldNumber;
const int Request::kQueryRecordFieldNumber;
const int Request::kQueryRecordListFieldNumber;
const int Request::kSynchronousRecordFieldNumber;
const int Request::kModifyCfgFieldNumber;
const int Request::kQueryCfgFieldNumber;
const int Request::kAddCardFieldNumber;
const int Request::kDeteleCardFieldNumber;
const int Request::kAddIpFieldNumber;
const int Request::kDeteleIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.Request)
}

void Request::InitAsDefaultInstance() {
  add_user_ = const_cast< ::Czhtdev::User*>(
      ::Czhtdev::User::internal_default_instance());
  detele_user_ = const_cast< ::Czhtdev::DeleteLocalUser*>(
      ::Czhtdev::DeleteLocalUser::internal_default_instance());
  update_user_ = const_cast< ::Czhtdev::User*>(
      ::Czhtdev::User::internal_default_instance());
  query_user_ = const_cast< ::Czhtdev::QueryLocalUser*>(
      ::Czhtdev::QueryLocalUser::internal_default_instance());
  query_user_list_ = const_cast< ::Czhtdev::QueryLocalUserList*>(
      ::Czhtdev::QueryLocalUserList::internal_default_instance());
  add_picture_ = const_cast< ::Czhtdev::AddPicture*>(
      ::Czhtdev::AddPicture::internal_default_instance());
  update_picture_ = const_cast< ::Czhtdev::UpdatePicture*>(
      ::Czhtdev::UpdatePicture::internal_default_instance());
  detele_picture_ = const_cast< ::Czhtdev::DelPicture*>(
      ::Czhtdev::DelPicture::internal_default_instance());
  query_record_ = const_cast< ::Czhtdev::QueryPassageRecord*>(
      ::Czhtdev::QueryPassageRecord::internal_default_instance());
  query_record_list_ = const_cast< ::Czhtdev::QueryPassageRecordList*>(
      ::Czhtdev::QueryPassageRecordList::internal_default_instance());
  synchronous_record_ = const_cast< ::Czhtdev::QueryPassageRecord*>(
      ::Czhtdev::QueryPassageRecord::internal_default_instance());
  modify_cfg_ = const_cast< ::Czhtdev::ModifyConfig*>(
      ::Czhtdev::ModifyConfig::internal_default_instance());
  query_cfg_ = const_cast< ::Czhtdev::QueryConfig*>(
      ::Czhtdev::QueryConfig::internal_default_instance());
  add_card_ = const_cast< ::Czhtdev::IDCard*>(
      ::Czhtdev::IDCard::internal_default_instance());
  detele_card_ = const_cast< ::Czhtdev::IDCard*>(
      ::Czhtdev::IDCard::internal_default_instance());
  add_ip_ = const_cast< ::Czhtdev::IPTable*>(
      ::Czhtdev::IPTable::internal_default_instance());
  detele_ip_ = const_cast< ::Czhtdev::IP*>(
      ::Czhtdev::IP::internal_default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  add_user_ = NULL;
  detele_user_ = NULL;
  update_user_ = NULL;
  query_user_ = NULL;
  query_user_list_ = NULL;
  add_picture_ = NULL;
  update_picture_ = NULL;
  detele_picture_ = NULL;
  query_record_ = NULL;
  query_record_list_ = NULL;
  synchronous_record_ = NULL;
  modify_cfg_ = NULL;
  query_cfg_ = NULL;
  add_card_ = NULL;
  detele_card_ = NULL;
  add_ip_ = NULL;
  detele_ip_ = NULL;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:Czhtdev.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != &Request_default_instance_.get()) {
    delete add_user_;
    delete detele_user_;
    delete update_user_;
    delete query_user_;
    delete query_user_list_;
    delete add_picture_;
    delete update_picture_;
    delete detele_picture_;
    delete query_record_;
    delete query_record_list_;
    delete synchronous_record_;
    delete modify_cfg_;
    delete query_cfg_;
    delete add_card_;
    delete detele_card_;
    delete add_ip_;
    delete detele_ip_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Request> Request_default_instance_;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.Request)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_add_user()) {
      if (add_user_ != NULL) add_user_->::Czhtdev::User::Clear();
    }
    if (has_detele_user()) {
      if (detele_user_ != NULL) detele_user_->::Czhtdev::DeleteLocalUser::Clear();
    }
    if (has_update_user()) {
      if (update_user_ != NULL) update_user_->::Czhtdev::User::Clear();
    }
    if (has_query_user()) {
      if (query_user_ != NULL) query_user_->::Czhtdev::QueryLocalUser::Clear();
    }
    if (has_query_user_list()) {
      if (query_user_list_ != NULL) query_user_list_->::Czhtdev::QueryLocalUserList::Clear();
    }
    if (has_add_picture()) {
      if (add_picture_ != NULL) add_picture_->::Czhtdev::AddPicture::Clear();
    }
    if (has_update_picture()) {
      if (update_picture_ != NULL) update_picture_->::Czhtdev::UpdatePicture::Clear();
    }
    if (has_detele_picture()) {
      if (detele_picture_ != NULL) detele_picture_->::Czhtdev::DelPicture::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_query_record()) {
      if (query_record_ != NULL) query_record_->::Czhtdev::QueryPassageRecord::Clear();
    }
    if (has_query_record_list()) {
      if (query_record_list_ != NULL) query_record_list_->::Czhtdev::QueryPassageRecordList::Clear();
    }
    if (has_synchronous_record()) {
      if (synchronous_record_ != NULL) synchronous_record_->::Czhtdev::QueryPassageRecord::Clear();
    }
    if (has_modify_cfg()) {
      if (modify_cfg_ != NULL) modify_cfg_->::Czhtdev::ModifyConfig::Clear();
    }
    if (has_query_cfg()) {
      if (query_cfg_ != NULL) query_cfg_->::Czhtdev::QueryConfig::Clear();
    }
    if (has_add_card()) {
      if (add_card_ != NULL) add_card_->::Czhtdev::IDCard::Clear();
    }
    if (has_detele_card()) {
      if (detele_card_ != NULL) detele_card_->::Czhtdev::IDCard::Clear();
    }
    if (has_add_ip()) {
      if (add_ip_ != NULL) add_ip_->::Czhtdev::IPTable::Clear();
    }
  }
  if (has_detele_ip()) {
    if (detele_ip_ != NULL) detele_ip_->::Czhtdev::IP::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Czhtdev.User add_user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_detele_user;
        break;
      }

      // optional .Czhtdev.DeleteLocalUser detele_user = 2;
      case 2: {
        if (tag == 18) {
         parse_detele_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detele_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_update_user;
        break;
      }

      // optional .Czhtdev.User update_user = 3;
      case 3: {
        if (tag == 26) {
         parse_update_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_query_user;
        break;
      }

      // optional .Czhtdev.QueryLocalUser query_user = 4;
      case 4: {
        if (tag == 34) {
         parse_query_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_query_user_list;
        break;
      }

      // optional .Czhtdev.QueryLocalUserList query_user_list = 5;
      case 5: {
        if (tag == 42) {
         parse_query_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query_user_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_add_picture;
        break;
      }

      // optional .Czhtdev.AddPicture add_picture = 6;
      case 6: {
        if (tag == 50) {
         parse_add_picture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_picture()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_update_picture;
        break;
      }

      // optional .Czhtdev.UpdatePicture update_picture = 7;
      case 7: {
        if (tag == 58) {
         parse_update_picture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_picture()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_detele_picture;
        break;
      }

      // optional .Czhtdev.DelPicture detele_picture = 8;
      case 8: {
        if (tag == 66) {
         parse_detele_picture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detele_picture()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_query_record;
        break;
      }

      // optional .Czhtdev.QueryPassageRecord query_record = 9;
      case 9: {
        if (tag == 74) {
         parse_query_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_query_record_list;
        break;
      }

      // optional .Czhtdev.QueryPassageRecordList query_record_list = 10;
      case 10: {
        if (tag == 82) {
         parse_query_record_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query_record_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_synchronous_record;
        break;
      }

      // optional .Czhtdev.QueryPassageRecord synchronous_record = 11;
      case 11: {
        if (tag == 90) {
         parse_synchronous_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_synchronous_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_modify_cfg;
        break;
      }

      // optional .Czhtdev.ModifyConfig modify_cfg = 12;
      case 12: {
        if (tag == 98) {
         parse_modify_cfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modify_cfg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_query_cfg;
        break;
      }

      // optional .Czhtdev.QueryConfig query_cfg = 13;
      case 13: {
        if (tag == 106) {
         parse_query_cfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query_cfg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_add_card;
        break;
      }

      // optional .Czhtdev.IDCard add_card = 14;
      case 14: {
        if (tag == 114) {
         parse_add_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_detele_card;
        break;
      }

      // optional .Czhtdev.IDCard detele_card = 15;
      case 15: {
        if (tag == 122) {
         parse_detele_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detele_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_add_ip;
        break;
      }

      // optional .Czhtdev.IPTable add_ip = 16;
      case 16: {
        if (tag == 130) {
         parse_add_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_detele_ip;
        break;
      }

      // optional .Czhtdev.IP detele_ip = 17;
      case 17: {
        if (tag == 138) {
         parse_detele_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detele_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.Request)
  // optional .Czhtdev.User add_user = 1;
  if (has_add_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->add_user_, output);
  }

  // optional .Czhtdev.DeleteLocalUser detele_user = 2;
  if (has_detele_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->detele_user_, output);
  }

  // optional .Czhtdev.User update_user = 3;
  if (has_update_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->update_user_, output);
  }

  // optional .Czhtdev.QueryLocalUser query_user = 4;
  if (has_query_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->query_user_, output);
  }

  // optional .Czhtdev.QueryLocalUserList query_user_list = 5;
  if (has_query_user_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->query_user_list_, output);
  }

  // optional .Czhtdev.AddPicture add_picture = 6;
  if (has_add_picture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->add_picture_, output);
  }

  // optional .Czhtdev.UpdatePicture update_picture = 7;
  if (has_update_picture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->update_picture_, output);
  }

  // optional .Czhtdev.DelPicture detele_picture = 8;
  if (has_detele_picture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->detele_picture_, output);
  }

  // optional .Czhtdev.QueryPassageRecord query_record = 9;
  if (has_query_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->query_record_, output);
  }

  // optional .Czhtdev.QueryPassageRecordList query_record_list = 10;
  if (has_query_record_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->query_record_list_, output);
  }

  // optional .Czhtdev.QueryPassageRecord synchronous_record = 11;
  if (has_synchronous_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->synchronous_record_, output);
  }

  // optional .Czhtdev.ModifyConfig modify_cfg = 12;
  if (has_modify_cfg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->modify_cfg_, output);
  }

  // optional .Czhtdev.QueryConfig query_cfg = 13;
  if (has_query_cfg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->query_cfg_, output);
  }

  // optional .Czhtdev.IDCard add_card = 14;
  if (has_add_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->add_card_, output);
  }

  // optional .Czhtdev.IDCard detele_card = 15;
  if (has_detele_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->detele_card_, output);
  }

  // optional .Czhtdev.IPTable add_ip = 16;
  if (has_add_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->add_ip_, output);
  }

  // optional .Czhtdev.IP detele_ip = 17;
  if (has_detele_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->detele_ip_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.Request)
  // optional .Czhtdev.User add_user = 1;
  if (has_add_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->add_user_, false, target);
  }

  // optional .Czhtdev.DeleteLocalUser detele_user = 2;
  if (has_detele_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->detele_user_, false, target);
  }

  // optional .Czhtdev.User update_user = 3;
  if (has_update_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->update_user_, false, target);
  }

  // optional .Czhtdev.QueryLocalUser query_user = 4;
  if (has_query_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->query_user_, false, target);
  }

  // optional .Czhtdev.QueryLocalUserList query_user_list = 5;
  if (has_query_user_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->query_user_list_, false, target);
  }

  // optional .Czhtdev.AddPicture add_picture = 6;
  if (has_add_picture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->add_picture_, false, target);
  }

  // optional .Czhtdev.UpdatePicture update_picture = 7;
  if (has_update_picture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->update_picture_, false, target);
  }

  // optional .Czhtdev.DelPicture detele_picture = 8;
  if (has_detele_picture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->detele_picture_, false, target);
  }

  // optional .Czhtdev.QueryPassageRecord query_record = 9;
  if (has_query_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->query_record_, false, target);
  }

  // optional .Czhtdev.QueryPassageRecordList query_record_list = 10;
  if (has_query_record_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->query_record_list_, false, target);
  }

  // optional .Czhtdev.QueryPassageRecord synchronous_record = 11;
  if (has_synchronous_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->synchronous_record_, false, target);
  }

  // optional .Czhtdev.ModifyConfig modify_cfg = 12;
  if (has_modify_cfg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->modify_cfg_, false, target);
  }

  // optional .Czhtdev.QueryConfig query_cfg = 13;
  if (has_query_cfg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->query_cfg_, false, target);
  }

  // optional .Czhtdev.IDCard add_card = 14;
  if (has_add_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->add_card_, false, target);
  }

  // optional .Czhtdev.IDCard detele_card = 15;
  if (has_detele_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->detele_card_, false, target);
  }

  // optional .Czhtdev.IPTable add_ip = 16;
  if (has_add_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->add_ip_, false, target);
  }

  // optional .Czhtdev.IP detele_ip = 17;
  if (has_detele_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->detele_ip_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.Request)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .Czhtdev.User add_user = 1;
    if (has_add_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->add_user_);
    }

    // optional .Czhtdev.DeleteLocalUser detele_user = 2;
    if (has_detele_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->detele_user_);
    }

    // optional .Czhtdev.User update_user = 3;
    if (has_update_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_user_);
    }

    // optional .Czhtdev.QueryLocalUser query_user = 4;
    if (has_query_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->query_user_);
    }

    // optional .Czhtdev.QueryLocalUserList query_user_list = 5;
    if (has_query_user_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->query_user_list_);
    }

    // optional .Czhtdev.AddPicture add_picture = 6;
    if (has_add_picture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->add_picture_);
    }

    // optional .Czhtdev.UpdatePicture update_picture = 7;
    if (has_update_picture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_picture_);
    }

    // optional .Czhtdev.DelPicture detele_picture = 8;
    if (has_detele_picture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->detele_picture_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .Czhtdev.QueryPassageRecord query_record = 9;
    if (has_query_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->query_record_);
    }

    // optional .Czhtdev.QueryPassageRecordList query_record_list = 10;
    if (has_query_record_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->query_record_list_);
    }

    // optional .Czhtdev.QueryPassageRecord synchronous_record = 11;
    if (has_synchronous_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->synchronous_record_);
    }

    // optional .Czhtdev.ModifyConfig modify_cfg = 12;
    if (has_modify_cfg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->modify_cfg_);
    }

    // optional .Czhtdev.QueryConfig query_cfg = 13;
    if (has_query_cfg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->query_cfg_);
    }

    // optional .Czhtdev.IDCard add_card = 14;
    if (has_add_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->add_card_);
    }

    // optional .Czhtdev.IDCard detele_card = 15;
    if (has_detele_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->detele_card_);
    }

    // optional .Czhtdev.IPTable add_ip = 16;
    if (has_add_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->add_ip_);
    }

  }
  // optional .Czhtdev.IP detele_ip = 17;
  if (has_detele_ip()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->detele_ip_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.Request)
    UnsafeMergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.Request)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Request::UnsafeMergeFrom(const Request& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_add_user()) {
      mutable_add_user()->::Czhtdev::User::MergeFrom(from.add_user());
    }
    if (from.has_detele_user()) {
      mutable_detele_user()->::Czhtdev::DeleteLocalUser::MergeFrom(from.detele_user());
    }
    if (from.has_update_user()) {
      mutable_update_user()->::Czhtdev::User::MergeFrom(from.update_user());
    }
    if (from.has_query_user()) {
      mutable_query_user()->::Czhtdev::QueryLocalUser::MergeFrom(from.query_user());
    }
    if (from.has_query_user_list()) {
      mutable_query_user_list()->::Czhtdev::QueryLocalUserList::MergeFrom(from.query_user_list());
    }
    if (from.has_add_picture()) {
      mutable_add_picture()->::Czhtdev::AddPicture::MergeFrom(from.add_picture());
    }
    if (from.has_update_picture()) {
      mutable_update_picture()->::Czhtdev::UpdatePicture::MergeFrom(from.update_picture());
    }
    if (from.has_detele_picture()) {
      mutable_detele_picture()->::Czhtdev::DelPicture::MergeFrom(from.detele_picture());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_query_record()) {
      mutable_query_record()->::Czhtdev::QueryPassageRecord::MergeFrom(from.query_record());
    }
    if (from.has_query_record_list()) {
      mutable_query_record_list()->::Czhtdev::QueryPassageRecordList::MergeFrom(from.query_record_list());
    }
    if (from.has_synchronous_record()) {
      mutable_synchronous_record()->::Czhtdev::QueryPassageRecord::MergeFrom(from.synchronous_record());
    }
    if (from.has_modify_cfg()) {
      mutable_modify_cfg()->::Czhtdev::ModifyConfig::MergeFrom(from.modify_cfg());
    }
    if (from.has_query_cfg()) {
      mutable_query_cfg()->::Czhtdev::QueryConfig::MergeFrom(from.query_cfg());
    }
    if (from.has_add_card()) {
      mutable_add_card()->::Czhtdev::IDCard::MergeFrom(from.add_card());
    }
    if (from.has_detele_card()) {
      mutable_detele_card()->::Czhtdev::IDCard::MergeFrom(from.detele_card());
    }
    if (from.has_add_ip()) {
      mutable_add_ip()->::Czhtdev::IPTable::MergeFrom(from.add_ip());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_detele_ip()) {
      mutable_detele_ip()->::Czhtdev::IP::MergeFrom(from.detele_ip());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.Request)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Request::IsInitialized() const {

  if (has_add_user()) {
    if (!this->add_user_->IsInitialized()) return false;
  }
  if (has_detele_user()) {
    if (!this->detele_user_->IsInitialized()) return false;
  }
  if (has_update_user()) {
    if (!this->update_user_->IsInitialized()) return false;
  }
  if (has_query_user()) {
    if (!this->query_user_->IsInitialized()) return false;
  }
  if (has_query_user_list()) {
    if (!this->query_user_list_->IsInitialized()) return false;
  }
  if (has_add_picture()) {
    if (!this->add_picture_->IsInitialized()) return false;
  }
  if (has_update_picture()) {
    if (!this->update_picture_->IsInitialized()) return false;
  }
  if (has_detele_picture()) {
    if (!this->detele_picture_->IsInitialized()) return false;
  }
  if (has_query_record()) {
    if (!this->query_record_->IsInitialized()) return false;
  }
  if (has_query_record_list()) {
    if (!this->query_record_list_->IsInitialized()) return false;
  }
  if (has_synchronous_record()) {
    if (!this->synchronous_record_->IsInitialized()) return false;
  }
  if (has_modify_cfg()) {
    if (!this->modify_cfg_->IsInitialized()) return false;
  }
  if (has_add_card()) {
    if (!this->add_card_->IsInitialized()) return false;
  }
  if (has_detele_card()) {
    if (!this->detele_card_->IsInitialized()) return false;
  }
  if (has_add_ip()) {
    if (!this->add_ip_->IsInitialized()) return false;
  }
  if (has_detele_ip()) {
    if (!this->detele_ip_->IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(add_user_, other->add_user_);
  std::swap(detele_user_, other->detele_user_);
  std::swap(update_user_, other->update_user_);
  std::swap(query_user_, other->query_user_);
  std::swap(query_user_list_, other->query_user_list_);
  std::swap(add_picture_, other->add_picture_);
  std::swap(update_picture_, other->update_picture_);
  std::swap(detele_picture_, other->detele_picture_);
  std::swap(query_record_, other->query_record_);
  std::swap(query_record_list_, other->query_record_list_);
  std::swap(synchronous_record_, other->synchronous_record_);
  std::swap(modify_cfg_, other->modify_cfg_);
  std::swap(query_cfg_, other->query_cfg_);
  std::swap(add_card_, other->add_card_);
  std::swap(detele_card_, other->detele_card_);
  std::swap(add_ip_, other->add_ip_);
  std::swap(detele_ip_, other->detele_ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional .Czhtdev.User add_user = 1;
bool Request::has_add_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request::set_has_add_user() {
  _has_bits_[0] |= 0x00000001u;
}
void Request::clear_has_add_user() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request::clear_add_user() {
  if (add_user_ != NULL) add_user_->::Czhtdev::User::Clear();
  clear_has_add_user();
}
const ::Czhtdev::User& Request::add_user() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Request.add_user)
  return add_user_ != NULL ? *add_user_
                         : *::Czhtdev::User::internal_default_instance();
}
::Czhtdev::User* Request::mutable_add_user() {
  set_has_add_user();
  if (add_user_ == NULL) {
    add_user_ = new ::Czhtdev::User;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Request.add_user)
  return add_user_;
}
::Czhtdev::User* Request::release_add_user() {
  // @@protoc_insertion_point(field_release:Czhtdev.Request.add_user)
  clear_has_add_user();
  ::Czhtdev::User* temp = add_user_;
  add_user_ = NULL;
  return temp;
}
void Request::set_allocated_add_user(::Czhtdev::User* add_user) {
  delete add_user_;
  add_user_ = add_user;
  if (add_user) {
    set_has_add_user();
  } else {
    clear_has_add_user();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Request.add_user)
}

// optional .Czhtdev.DeleteLocalUser detele_user = 2;
bool Request::has_detele_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request::set_has_detele_user() {
  _has_bits_[0] |= 0x00000002u;
}
void Request::clear_has_detele_user() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request::clear_detele_user() {
  if (detele_user_ != NULL) detele_user_->::Czhtdev::DeleteLocalUser::Clear();
  clear_has_detele_user();
}
const ::Czhtdev::DeleteLocalUser& Request::detele_user() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Request.detele_user)
  return detele_user_ != NULL ? *detele_user_
                         : *::Czhtdev::DeleteLocalUser::internal_default_instance();
}
::Czhtdev::DeleteLocalUser* Request::mutable_detele_user() {
  set_has_detele_user();
  if (detele_user_ == NULL) {
    detele_user_ = new ::Czhtdev::DeleteLocalUser;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Request.detele_user)
  return detele_user_;
}
::Czhtdev::DeleteLocalUser* Request::release_detele_user() {
  // @@protoc_insertion_point(field_release:Czhtdev.Request.detele_user)
  clear_has_detele_user();
  ::Czhtdev::DeleteLocalUser* temp = detele_user_;
  detele_user_ = NULL;
  return temp;
}
void Request::set_allocated_detele_user(::Czhtdev::DeleteLocalUser* detele_user) {
  delete detele_user_;
  detele_user_ = detele_user;
  if (detele_user) {
    set_has_detele_user();
  } else {
    clear_has_detele_user();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Request.detele_user)
}

// optional .Czhtdev.User update_user = 3;
bool Request::has_update_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Request::set_has_update_user() {
  _has_bits_[0] |= 0x00000004u;
}
void Request::clear_has_update_user() {
  _has_bits_[0] &= ~0x00000004u;
}
void Request::clear_update_user() {
  if (update_user_ != NULL) update_user_->::Czhtdev::User::Clear();
  clear_has_update_user();
}
const ::Czhtdev::User& Request::update_user() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Request.update_user)
  return update_user_ != NULL ? *update_user_
                         : *::Czhtdev::User::internal_default_instance();
}
::Czhtdev::User* Request::mutable_update_user() {
  set_has_update_user();
  if (update_user_ == NULL) {
    update_user_ = new ::Czhtdev::User;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Request.update_user)
  return update_user_;
}
::Czhtdev::User* Request::release_update_user() {
  // @@protoc_insertion_point(field_release:Czhtdev.Request.update_user)
  clear_has_update_user();
  ::Czhtdev::User* temp = update_user_;
  update_user_ = NULL;
  return temp;
}
void Request::set_allocated_update_user(::Czhtdev::User* update_user) {
  delete update_user_;
  update_user_ = update_user;
  if (update_user) {
    set_has_update_user();
  } else {
    clear_has_update_user();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Request.update_user)
}

// optional .Czhtdev.QueryLocalUser query_user = 4;
bool Request::has_query_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Request::set_has_query_user() {
  _has_bits_[0] |= 0x00000008u;
}
void Request::clear_has_query_user() {
  _has_bits_[0] &= ~0x00000008u;
}
void Request::clear_query_user() {
  if (query_user_ != NULL) query_user_->::Czhtdev::QueryLocalUser::Clear();
  clear_has_query_user();
}
const ::Czhtdev::QueryLocalUser& Request::query_user() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Request.query_user)
  return query_user_ != NULL ? *query_user_
                         : *::Czhtdev::QueryLocalUser::internal_default_instance();
}
::Czhtdev::QueryLocalUser* Request::mutable_query_user() {
  set_has_query_user();
  if (query_user_ == NULL) {
    query_user_ = new ::Czhtdev::QueryLocalUser;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Request.query_user)
  return query_user_;
}
::Czhtdev::QueryLocalUser* Request::release_query_user() {
  // @@protoc_insertion_point(field_release:Czhtdev.Request.query_user)
  clear_has_query_user();
  ::Czhtdev::QueryLocalUser* temp = query_user_;
  query_user_ = NULL;
  return temp;
}
void Request::set_allocated_query_user(::Czhtdev::QueryLocalUser* query_user) {
  delete query_user_;
  query_user_ = query_user;
  if (query_user) {
    set_has_query_user();
  } else {
    clear_has_query_user();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Request.query_user)
}

// optional .Czhtdev.QueryLocalUserList query_user_list = 5;
bool Request::has_query_user_list() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Request::set_has_query_user_list() {
  _has_bits_[0] |= 0x00000010u;
}
void Request::clear_has_query_user_list() {
  _has_bits_[0] &= ~0x00000010u;
}
void Request::clear_query_user_list() {
  if (query_user_list_ != NULL) query_user_list_->::Czhtdev::QueryLocalUserList::Clear();
  clear_has_query_user_list();
}
const ::Czhtdev::QueryLocalUserList& Request::query_user_list() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Request.query_user_list)
  return query_user_list_ != NULL ? *query_user_list_
                         : *::Czhtdev::QueryLocalUserList::internal_default_instance();
}
::Czhtdev::QueryLocalUserList* Request::mutable_query_user_list() {
  set_has_query_user_list();
  if (query_user_list_ == NULL) {
    query_user_list_ = new ::Czhtdev::QueryLocalUserList;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Request.query_user_list)
  return query_user_list_;
}
::Czhtdev::QueryLocalUserList* Request::release_query_user_list() {
  // @@protoc_insertion_point(field_release:Czhtdev.Request.query_user_list)
  clear_has_query_user_list();
  ::Czhtdev::QueryLocalUserList* temp = query_user_list_;
  query_user_list_ = NULL;
  return temp;
}
void Request::set_allocated_query_user_list(::Czhtdev::QueryLocalUserList* query_user_list) {
  delete query_user_list_;
  query_user_list_ = query_user_list;
  if (query_user_list) {
    set_has_query_user_list();
  } else {
    clear_has_query_user_list();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Request.query_user_list)
}

// optional .Czhtdev.AddPicture add_picture = 6;
bool Request::has_add_picture() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Request::set_has_add_picture() {
  _has_bits_[0] |= 0x00000020u;
}
void Request::clear_has_add_picture() {
  _has_bits_[0] &= ~0x00000020u;
}
void Request::clear_add_picture() {
  if (add_picture_ != NULL) add_picture_->::Czhtdev::AddPicture::Clear();
  clear_has_add_picture();
}
const ::Czhtdev::AddPicture& Request::add_picture() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Request.add_picture)
  return add_picture_ != NULL ? *add_picture_
                         : *::Czhtdev::AddPicture::internal_default_instance();
}
::Czhtdev::AddPicture* Request::mutable_add_picture() {
  set_has_add_picture();
  if (add_picture_ == NULL) {
    add_picture_ = new ::Czhtdev::AddPicture;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Request.add_picture)
  return add_picture_;
}
::Czhtdev::AddPicture* Request::release_add_picture() {
  // @@protoc_insertion_point(field_release:Czhtdev.Request.add_picture)
  clear_has_add_picture();
  ::Czhtdev::AddPicture* temp = add_picture_;
  add_picture_ = NULL;
  return temp;
}
void Request::set_allocated_add_picture(::Czhtdev::AddPicture* add_picture) {
  delete add_picture_;
  add_picture_ = add_picture;
  if (add_picture) {
    set_has_add_picture();
  } else {
    clear_has_add_picture();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Request.add_picture)
}

// optional .Czhtdev.UpdatePicture update_picture = 7;
bool Request::has_update_picture() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Request::set_has_update_picture() {
  _has_bits_[0] |= 0x00000040u;
}
void Request::clear_has_update_picture() {
  _has_bits_[0] &= ~0x00000040u;
}
void Request::clear_update_picture() {
  if (update_picture_ != NULL) update_picture_->::Czhtdev::UpdatePicture::Clear();
  clear_has_update_picture();
}
const ::Czhtdev::UpdatePicture& Request::update_picture() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Request.update_picture)
  return update_picture_ != NULL ? *update_picture_
                         : *::Czhtdev::UpdatePicture::internal_default_instance();
}
::Czhtdev::UpdatePicture* Request::mutable_update_picture() {
  set_has_update_picture();
  if (update_picture_ == NULL) {
    update_picture_ = new ::Czhtdev::UpdatePicture;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Request.update_picture)
  return update_picture_;
}
::Czhtdev::UpdatePicture* Request::release_update_picture() {
  // @@protoc_insertion_point(field_release:Czhtdev.Request.update_picture)
  clear_has_update_picture();
  ::Czhtdev::UpdatePicture* temp = update_picture_;
  update_picture_ = NULL;
  return temp;
}
void Request::set_allocated_update_picture(::Czhtdev::UpdatePicture* update_picture) {
  delete update_picture_;
  update_picture_ = update_picture;
  if (update_picture) {
    set_has_update_picture();
  } else {
    clear_has_update_picture();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Request.update_picture)
}

// optional .Czhtdev.DelPicture detele_picture = 8;
bool Request::has_detele_picture() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Request::set_has_detele_picture() {
  _has_bits_[0] |= 0x00000080u;
}
void Request::clear_has_detele_picture() {
  _has_bits_[0] &= ~0x00000080u;
}
void Request::clear_detele_picture() {
  if (detele_picture_ != NULL) detele_picture_->::Czhtdev::DelPicture::Clear();
  clear_has_detele_picture();
}
const ::Czhtdev::DelPicture& Request::detele_picture() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Request.detele_picture)
  return detele_picture_ != NULL ? *detele_picture_
                         : *::Czhtdev::DelPicture::internal_default_instance();
}
::Czhtdev::DelPicture* Request::mutable_detele_picture() {
  set_has_detele_picture();
  if (detele_picture_ == NULL) {
    detele_picture_ = new ::Czhtdev::DelPicture;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Request.detele_picture)
  return detele_picture_;
}
::Czhtdev::DelPicture* Request::release_detele_picture() {
  // @@protoc_insertion_point(field_release:Czhtdev.Request.detele_picture)
  clear_has_detele_picture();
  ::Czhtdev::DelPicture* temp = detele_picture_;
  detele_picture_ = NULL;
  return temp;
}
void Request::set_allocated_detele_picture(::Czhtdev::DelPicture* detele_picture) {
  delete detele_picture_;
  detele_picture_ = detele_picture;
  if (detele_picture) {
    set_has_detele_picture();
  } else {
    clear_has_detele_picture();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Request.detele_picture)
}

// optional .Czhtdev.QueryPassageRecord query_record = 9;
bool Request::has_query_record() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Request::set_has_query_record() {
  _has_bits_[0] |= 0x00000100u;
}
void Request::clear_has_query_record() {
  _has_bits_[0] &= ~0x00000100u;
}
void Request::clear_query_record() {
  if (query_record_ != NULL) query_record_->::Czhtdev::QueryPassageRecord::Clear();
  clear_has_query_record();
}
const ::Czhtdev::QueryPassageRecord& Request::query_record() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Request.query_record)
  return query_record_ != NULL ? *query_record_
                         : *::Czhtdev::QueryPassageRecord::internal_default_instance();
}
::Czhtdev::QueryPassageRecord* Request::mutable_query_record() {
  set_has_query_record();
  if (query_record_ == NULL) {
    query_record_ = new ::Czhtdev::QueryPassageRecord;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Request.query_record)
  return query_record_;
}
::Czhtdev::QueryPassageRecord* Request::release_query_record() {
  // @@protoc_insertion_point(field_release:Czhtdev.Request.query_record)
  clear_has_query_record();
  ::Czhtdev::QueryPassageRecord* temp = query_record_;
  query_record_ = NULL;
  return temp;
}
void Request::set_allocated_query_record(::Czhtdev::QueryPassageRecord* query_record) {
  delete query_record_;
  query_record_ = query_record;
  if (query_record) {
    set_has_query_record();
  } else {
    clear_has_query_record();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Request.query_record)
}

// optional .Czhtdev.QueryPassageRecordList query_record_list = 10;
bool Request::has_query_record_list() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Request::set_has_query_record_list() {
  _has_bits_[0] |= 0x00000200u;
}
void Request::clear_has_query_record_list() {
  _has_bits_[0] &= ~0x00000200u;
}
void Request::clear_query_record_list() {
  if (query_record_list_ != NULL) query_record_list_->::Czhtdev::QueryPassageRecordList::Clear();
  clear_has_query_record_list();
}
const ::Czhtdev::QueryPassageRecordList& Request::query_record_list() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Request.query_record_list)
  return query_record_list_ != NULL ? *query_record_list_
                         : *::Czhtdev::QueryPassageRecordList::internal_default_instance();
}
::Czhtdev::QueryPassageRecordList* Request::mutable_query_record_list() {
  set_has_query_record_list();
  if (query_record_list_ == NULL) {
    query_record_list_ = new ::Czhtdev::QueryPassageRecordList;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Request.query_record_list)
  return query_record_list_;
}
::Czhtdev::QueryPassageRecordList* Request::release_query_record_list() {
  // @@protoc_insertion_point(field_release:Czhtdev.Request.query_record_list)
  clear_has_query_record_list();
  ::Czhtdev::QueryPassageRecordList* temp = query_record_list_;
  query_record_list_ = NULL;
  return temp;
}
void Request::set_allocated_query_record_list(::Czhtdev::QueryPassageRecordList* query_record_list) {
  delete query_record_list_;
  query_record_list_ = query_record_list;
  if (query_record_list) {
    set_has_query_record_list();
  } else {
    clear_has_query_record_list();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Request.query_record_list)
}

// optional .Czhtdev.QueryPassageRecord synchronous_record = 11;
bool Request::has_synchronous_record() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Request::set_has_synchronous_record() {
  _has_bits_[0] |= 0x00000400u;
}
void Request::clear_has_synchronous_record() {
  _has_bits_[0] &= ~0x00000400u;
}
void Request::clear_synchronous_record() {
  if (synchronous_record_ != NULL) synchronous_record_->::Czhtdev::QueryPassageRecord::Clear();
  clear_has_synchronous_record();
}
const ::Czhtdev::QueryPassageRecord& Request::synchronous_record() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Request.synchronous_record)
  return synchronous_record_ != NULL ? *synchronous_record_
                         : *::Czhtdev::QueryPassageRecord::internal_default_instance();
}
::Czhtdev::QueryPassageRecord* Request::mutable_synchronous_record() {
  set_has_synchronous_record();
  if (synchronous_record_ == NULL) {
    synchronous_record_ = new ::Czhtdev::QueryPassageRecord;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Request.synchronous_record)
  return synchronous_record_;
}
::Czhtdev::QueryPassageRecord* Request::release_synchronous_record() {
  // @@protoc_insertion_point(field_release:Czhtdev.Request.synchronous_record)
  clear_has_synchronous_record();
  ::Czhtdev::QueryPassageRecord* temp = synchronous_record_;
  synchronous_record_ = NULL;
  return temp;
}
void Request::set_allocated_synchronous_record(::Czhtdev::QueryPassageRecord* synchronous_record) {
  delete synchronous_record_;
  synchronous_record_ = synchronous_record;
  if (synchronous_record) {
    set_has_synchronous_record();
  } else {
    clear_has_synchronous_record();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Request.synchronous_record)
}

// optional .Czhtdev.ModifyConfig modify_cfg = 12;
bool Request::has_modify_cfg() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Request::set_has_modify_cfg() {
  _has_bits_[0] |= 0x00000800u;
}
void Request::clear_has_modify_cfg() {
  _has_bits_[0] &= ~0x00000800u;
}
void Request::clear_modify_cfg() {
  if (modify_cfg_ != NULL) modify_cfg_->::Czhtdev::ModifyConfig::Clear();
  clear_has_modify_cfg();
}
const ::Czhtdev::ModifyConfig& Request::modify_cfg() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Request.modify_cfg)
  return modify_cfg_ != NULL ? *modify_cfg_
                         : *::Czhtdev::ModifyConfig::internal_default_instance();
}
::Czhtdev::ModifyConfig* Request::mutable_modify_cfg() {
  set_has_modify_cfg();
  if (modify_cfg_ == NULL) {
    modify_cfg_ = new ::Czhtdev::ModifyConfig;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Request.modify_cfg)
  return modify_cfg_;
}
::Czhtdev::ModifyConfig* Request::release_modify_cfg() {
  // @@protoc_insertion_point(field_release:Czhtdev.Request.modify_cfg)
  clear_has_modify_cfg();
  ::Czhtdev::ModifyConfig* temp = modify_cfg_;
  modify_cfg_ = NULL;
  return temp;
}
void Request::set_allocated_modify_cfg(::Czhtdev::ModifyConfig* modify_cfg) {
  delete modify_cfg_;
  modify_cfg_ = modify_cfg;
  if (modify_cfg) {
    set_has_modify_cfg();
  } else {
    clear_has_modify_cfg();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Request.modify_cfg)
}

// optional .Czhtdev.QueryConfig query_cfg = 13;
bool Request::has_query_cfg() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Request::set_has_query_cfg() {
  _has_bits_[0] |= 0x00001000u;
}
void Request::clear_has_query_cfg() {
  _has_bits_[0] &= ~0x00001000u;
}
void Request::clear_query_cfg() {
  if (query_cfg_ != NULL) query_cfg_->::Czhtdev::QueryConfig::Clear();
  clear_has_query_cfg();
}
const ::Czhtdev::QueryConfig& Request::query_cfg() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Request.query_cfg)
  return query_cfg_ != NULL ? *query_cfg_
                         : *::Czhtdev::QueryConfig::internal_default_instance();
}
::Czhtdev::QueryConfig* Request::mutable_query_cfg() {
  set_has_query_cfg();
  if (query_cfg_ == NULL) {
    query_cfg_ = new ::Czhtdev::QueryConfig;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Request.query_cfg)
  return query_cfg_;
}
::Czhtdev::QueryConfig* Request::release_query_cfg() {
  // @@protoc_insertion_point(field_release:Czhtdev.Request.query_cfg)
  clear_has_query_cfg();
  ::Czhtdev::QueryConfig* temp = query_cfg_;
  query_cfg_ = NULL;
  return temp;
}
void Request::set_allocated_query_cfg(::Czhtdev::QueryConfig* query_cfg) {
  delete query_cfg_;
  query_cfg_ = query_cfg;
  if (query_cfg) {
    set_has_query_cfg();
  } else {
    clear_has_query_cfg();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Request.query_cfg)
}

// optional .Czhtdev.IDCard add_card = 14;
bool Request::has_add_card() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Request::set_has_add_card() {
  _has_bits_[0] |= 0x00002000u;
}
void Request::clear_has_add_card() {
  _has_bits_[0] &= ~0x00002000u;
}
void Request::clear_add_card() {
  if (add_card_ != NULL) add_card_->::Czhtdev::IDCard::Clear();
  clear_has_add_card();
}
const ::Czhtdev::IDCard& Request::add_card() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Request.add_card)
  return add_card_ != NULL ? *add_card_
                         : *::Czhtdev::IDCard::internal_default_instance();
}
::Czhtdev::IDCard* Request::mutable_add_card() {
  set_has_add_card();
  if (add_card_ == NULL) {
    add_card_ = new ::Czhtdev::IDCard;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Request.add_card)
  return add_card_;
}
::Czhtdev::IDCard* Request::release_add_card() {
  // @@protoc_insertion_point(field_release:Czhtdev.Request.add_card)
  clear_has_add_card();
  ::Czhtdev::IDCard* temp = add_card_;
  add_card_ = NULL;
  return temp;
}
void Request::set_allocated_add_card(::Czhtdev::IDCard* add_card) {
  delete add_card_;
  add_card_ = add_card;
  if (add_card) {
    set_has_add_card();
  } else {
    clear_has_add_card();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Request.add_card)
}

// optional .Czhtdev.IDCard detele_card = 15;
bool Request::has_detele_card() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Request::set_has_detele_card() {
  _has_bits_[0] |= 0x00004000u;
}
void Request::clear_has_detele_card() {
  _has_bits_[0] &= ~0x00004000u;
}
void Request::clear_detele_card() {
  if (detele_card_ != NULL) detele_card_->::Czhtdev::IDCard::Clear();
  clear_has_detele_card();
}
const ::Czhtdev::IDCard& Request::detele_card() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Request.detele_card)
  return detele_card_ != NULL ? *detele_card_
                         : *::Czhtdev::IDCard::internal_default_instance();
}
::Czhtdev::IDCard* Request::mutable_detele_card() {
  set_has_detele_card();
  if (detele_card_ == NULL) {
    detele_card_ = new ::Czhtdev::IDCard;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Request.detele_card)
  return detele_card_;
}
::Czhtdev::IDCard* Request::release_detele_card() {
  // @@protoc_insertion_point(field_release:Czhtdev.Request.detele_card)
  clear_has_detele_card();
  ::Czhtdev::IDCard* temp = detele_card_;
  detele_card_ = NULL;
  return temp;
}
void Request::set_allocated_detele_card(::Czhtdev::IDCard* detele_card) {
  delete detele_card_;
  detele_card_ = detele_card;
  if (detele_card) {
    set_has_detele_card();
  } else {
    clear_has_detele_card();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Request.detele_card)
}

// optional .Czhtdev.IPTable add_ip = 16;
bool Request::has_add_ip() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Request::set_has_add_ip() {
  _has_bits_[0] |= 0x00008000u;
}
void Request::clear_has_add_ip() {
  _has_bits_[0] &= ~0x00008000u;
}
void Request::clear_add_ip() {
  if (add_ip_ != NULL) add_ip_->::Czhtdev::IPTable::Clear();
  clear_has_add_ip();
}
const ::Czhtdev::IPTable& Request::add_ip() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Request.add_ip)
  return add_ip_ != NULL ? *add_ip_
                         : *::Czhtdev::IPTable::internal_default_instance();
}
::Czhtdev::IPTable* Request::mutable_add_ip() {
  set_has_add_ip();
  if (add_ip_ == NULL) {
    add_ip_ = new ::Czhtdev::IPTable;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Request.add_ip)
  return add_ip_;
}
::Czhtdev::IPTable* Request::release_add_ip() {
  // @@protoc_insertion_point(field_release:Czhtdev.Request.add_ip)
  clear_has_add_ip();
  ::Czhtdev::IPTable* temp = add_ip_;
  add_ip_ = NULL;
  return temp;
}
void Request::set_allocated_add_ip(::Czhtdev::IPTable* add_ip) {
  delete add_ip_;
  add_ip_ = add_ip;
  if (add_ip) {
    set_has_add_ip();
  } else {
    clear_has_add_ip();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Request.add_ip)
}

// optional .Czhtdev.IP detele_ip = 17;
bool Request::has_detele_ip() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Request::set_has_detele_ip() {
  _has_bits_[0] |= 0x00010000u;
}
void Request::clear_has_detele_ip() {
  _has_bits_[0] &= ~0x00010000u;
}
void Request::clear_detele_ip() {
  if (detele_ip_ != NULL) detele_ip_->::Czhtdev::IP::Clear();
  clear_has_detele_ip();
}
const ::Czhtdev::IP& Request::detele_ip() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Request.detele_ip)
  return detele_ip_ != NULL ? *detele_ip_
                         : *::Czhtdev::IP::internal_default_instance();
}
::Czhtdev::IP* Request::mutable_detele_ip() {
  set_has_detele_ip();
  if (detele_ip_ == NULL) {
    detele_ip_ = new ::Czhtdev::IP;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Request.detele_ip)
  return detele_ip_;
}
::Czhtdev::IP* Request::release_detele_ip() {
  // @@protoc_insertion_point(field_release:Czhtdev.Request.detele_ip)
  clear_has_detele_ip();
  ::Czhtdev::IP* temp = detele_ip_;
  detele_ip_ = NULL;
  return temp;
}
void Request::set_allocated_detele_ip(::Czhtdev::IP* detele_ip) {
  delete detele_ip_;
  detele_ip_ = detele_ip;
  if (detele_ip) {
    set_has_detele_ip();
  } else {
    clear_has_detele_ip();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Request.detele_ip)
}

inline const Request* Request::internal_default_instance() {
  return &Request_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kResultFieldNumber;
const int Response::kErrorCodeFieldNumber;
const int Response::kErrorDescriptionFieldNumber;
const int Response::kUserFieldNumber;
const int Response::kUserListFieldNumber;
const int Response::kPassgeRecordFieldNumber;
const int Response::kPassgeRecordListFieldNumber;
const int Response::kPassgeSynchronousFieldNumber;
const int Response::kCfgFieldNumber;
const int Response::kDevinfoFieldNumber;
const int Response::kCardListFieldNumber;
const int Response::kIpListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.Response)
}

void Response::InitAsDefaultInstance() {
  user_ = const_cast< ::Czhtdev::User*>(
      ::Czhtdev::User::internal_default_instance());
  passge_record_ = const_cast< ::Czhtdev::PassageRecord*>(
      ::Czhtdev::PassageRecord::internal_default_instance());
  passge_synchronous_ = const_cast< ::Czhtdev::PassageRecord*>(
      ::Czhtdev::PassageRecord::internal_default_instance());
  cfg_ = const_cast< ::Czhtdev::DevConfig*>(
      ::Czhtdev::DevConfig::internal_default_instance());
  devinfo_ = const_cast< ::Czhtdev::DeviceInfo*>(
      ::Czhtdev::DeviceInfo::internal_default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.Response)
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  error_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_ = NULL;
  passge_record_ = NULL;
  passge_synchronous_ = NULL;
  cfg_ = NULL;
  devinfo_ = NULL;
  ::memset(&result_, 0, reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&result_) + sizeof(error_code_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:Czhtdev.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  error_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &Response_default_instance_.get()) {
    delete user_;
    delete passge_record_;
    delete passge_synchronous_;
    delete cfg_;
    delete devinfo_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Response> Response_default_instance_;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.Response)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Response, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Response*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 175u) {
    ZR_(result_, error_code_);
    if (has_error_description()) {
      error_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user()) {
      if (user_ != NULL) user_->::Czhtdev::User::Clear();
    }
    if (has_passge_record()) {
      if (passge_record_ != NULL) passge_record_->::Czhtdev::PassageRecord::Clear();
    }
    if (has_passge_synchronous()) {
      if (passge_synchronous_ != NULL) passge_synchronous_->::Czhtdev::PassageRecord::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_cfg()) {
      if (cfg_ != NULL) cfg_->::Czhtdev::DevConfig::Clear();
    }
    if (has_devinfo()) {
      if (devinfo_ != NULL) devinfo_->::Czhtdev::DeviceInfo::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  user_list_.Clear();
  passge_record_list_.Clear();
  card_list_.Clear();
  ip_list_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (tag == 8) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // optional .Czhtdev.ErrorType error_code = 2;
      case 2: {
        if (tag == 16) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Czhtdev::ErrorType_IsValid(value)) {
            set_error_code(static_cast< ::Czhtdev::ErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error_description;
        break;
      }

      // optional string error_description = 3;
      case 3: {
        if (tag == 26) {
         parse_error_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_description().data(), this->error_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Czhtdev.Response.error_description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // optional .Czhtdev.User user = 5;
      case 5: {
        if (tag == 42) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_user_list;
        break;
      }

      // repeated .Czhtdev.UserList user_list = 6;
      case 6: {
        if (tag == 50) {
         parse_user_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_user_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(58)) goto parse_passge_record;
        break;
      }

      // optional .Czhtdev.PassageRecord passge_record = 7;
      case 7: {
        if (tag == 58) {
         parse_passge_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_passge_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_passge_record_list;
        break;
      }

      // repeated .Czhtdev.PassageRecordList passge_record_list = 8;
      case 8: {
        if (tag == 66) {
         parse_passge_record_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_passge_record_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_passge_record_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_passge_record_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(74)) goto parse_passge_synchronous;
        break;
      }

      // optional .Czhtdev.PassageRecord passge_synchronous = 9;
      case 9: {
        if (tag == 74) {
         parse_passge_synchronous:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_passge_synchronous()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_cfg;
        break;
      }

      // optional .Czhtdev.DevConfig cfg = 10;
      case 10: {
        if (tag == 82) {
         parse_cfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cfg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_devinfo;
        break;
      }

      // optional .Czhtdev.DeviceInfo devinfo = 11;
      case 11: {
        if (tag == 90) {
         parse_devinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_devinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_card_list;
        break;
      }

      // repeated .Czhtdev.IDCard card_list = 13;
      case 13: {
        if (tag == 106) {
         parse_card_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_card_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_card_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_card_list;
        if (input->ExpectTag(114)) goto parse_loop_ip_list;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Czhtdev.IPTable ip_list = 14;
      case 14: {
        if (tag == 114) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_ip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ip_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_ip_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.Response)
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional .Czhtdev.ErrorType error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error_code(), output);
  }

  // optional string error_description = 3;
  if (has_error_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_description().data(), this->error_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.Response.error_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_description(), output);
  }

  // optional .Czhtdev.User user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->user_, output);
  }

  // repeated .Czhtdev.UserList user_list = 6;
  for (unsigned int i = 0, n = this->user_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->user_list(i), output);
  }

  // optional .Czhtdev.PassageRecord passge_record = 7;
  if (has_passge_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->passge_record_, output);
  }

  // repeated .Czhtdev.PassageRecordList passge_record_list = 8;
  for (unsigned int i = 0, n = this->passge_record_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->passge_record_list(i), output);
  }

  // optional .Czhtdev.PassageRecord passge_synchronous = 9;
  if (has_passge_synchronous()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->passge_synchronous_, output);
  }

  // optional .Czhtdev.DevConfig cfg = 10;
  if (has_cfg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->cfg_, output);
  }

  // optional .Czhtdev.DeviceInfo devinfo = 11;
  if (has_devinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->devinfo_, output);
  }

  // repeated .Czhtdev.IDCard card_list = 13;
  for (unsigned int i = 0, n = this->card_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->card_list(i), output);
  }

  // repeated .Czhtdev.IPTable ip_list = 14;
  for (unsigned int i = 0, n = this->ip_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->ip_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.Response)
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional .Czhtdev.ErrorType error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error_code(), target);
  }

  // optional string error_description = 3;
  if (has_error_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_description().data(), this->error_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Czhtdev.Response.error_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_description(), target);
  }

  // optional .Czhtdev.User user = 5;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->user_, false, target);
  }

  // repeated .Czhtdev.UserList user_list = 6;
  for (unsigned int i = 0, n = this->user_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->user_list(i), false, target);
  }

  // optional .Czhtdev.PassageRecord passge_record = 7;
  if (has_passge_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->passge_record_, false, target);
  }

  // repeated .Czhtdev.PassageRecordList passge_record_list = 8;
  for (unsigned int i = 0, n = this->passge_record_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->passge_record_list(i), false, target);
  }

  // optional .Czhtdev.PassageRecord passge_synchronous = 9;
  if (has_passge_synchronous()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->passge_synchronous_, false, target);
  }

  // optional .Czhtdev.DevConfig cfg = 10;
  if (has_cfg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->cfg_, false, target);
  }

  // optional .Czhtdev.DeviceInfo devinfo = 11;
  if (has_devinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->devinfo_, false, target);
  }

  // repeated .Czhtdev.IDCard card_list = 13;
  for (unsigned int i = 0, n = this->card_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->card_list(i), false, target);
  }

  // repeated .Czhtdev.IPTable ip_list = 14;
  for (unsigned int i = 0, n = this->ip_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->ip_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.Response)
  size_t total_size = 0;

  // required bool result = 1;
  if (has_result()) {
    total_size += 1 + 1;
  }
  if (_has_bits_[1 / 32] & 174u) {
    // optional .Czhtdev.ErrorType error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional string error_description = 3;
    if (has_error_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_description());
    }

    // optional .Czhtdev.User user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_);
    }

    // optional .Czhtdev.PassageRecord passge_record = 7;
    if (has_passge_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->passge_record_);
    }

    // optional .Czhtdev.PassageRecord passge_synchronous = 9;
    if (has_passge_synchronous()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->passge_synchronous_);
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .Czhtdev.DevConfig cfg = 10;
    if (has_cfg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cfg_);
    }

    // optional .Czhtdev.DeviceInfo devinfo = 11;
    if (has_devinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->devinfo_);
    }

  }
  // repeated .Czhtdev.UserList user_list = 6;
  {
    unsigned int count = this->user_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_list(i));
    }
  }

  // repeated .Czhtdev.PassageRecordList passge_record_list = 8;
  {
    unsigned int count = this->passge_record_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->passge_record_list(i));
    }
  }

  // repeated .Czhtdev.IDCard card_list = 13;
  {
    unsigned int count = this->card_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card_list(i));
    }
  }

  // repeated .Czhtdev.IPTable ip_list = 14;
  {
    unsigned int count = this->ip_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ip_list(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.Response)
    UnsafeMergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.Response)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Response::UnsafeMergeFrom(const Response& from) {
  GOOGLE_DCHECK(&from != this);
  user_list_.MergeFrom(from.user_list_);
  passge_record_list_.MergeFrom(from.passge_record_list_);
  card_list_.MergeFrom(from.card_list_);
  ip_list_.MergeFrom(from.ip_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_error_description()) {
      set_has_error_description();
      error_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_description_);
    }
    if (from.has_user()) {
      mutable_user()->::Czhtdev::User::MergeFrom(from.user());
    }
    if (from.has_passge_record()) {
      mutable_passge_record()->::Czhtdev::PassageRecord::MergeFrom(from.passge_record());
    }
    if (from.has_passge_synchronous()) {
      mutable_passge_synchronous()->::Czhtdev::PassageRecord::MergeFrom(from.passge_synchronous());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cfg()) {
      mutable_cfg()->::Czhtdev::DevConfig::MergeFrom(from.cfg());
    }
    if (from.has_devinfo()) {
      mutable_devinfo()->::Czhtdev::DeviceInfo::MergeFrom(from.devinfo());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.Response)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->user_list())) return false;
  if (has_passge_record()) {
    if (!this->passge_record_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->passge_record_list())) return false;
  if (has_passge_synchronous()) {
    if (!this->passge_synchronous_->IsInitialized()) return false;
  }
  if (has_cfg()) {
    if (!this->cfg_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->card_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ip_list())) return false;
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(result_, other->result_);
  std::swap(error_code_, other->error_code_);
  error_description_.Swap(&other->error_description_);
  std::swap(user_, other->user_);
  user_list_.UnsafeArenaSwap(&other->user_list_);
  std::swap(passge_record_, other->passge_record_);
  passge_record_list_.UnsafeArenaSwap(&other->passge_record_list_);
  std::swap(passge_synchronous_, other->passge_synchronous_);
  std::swap(cfg_, other->cfg_);
  std::swap(devinfo_, other->devinfo_);
  card_list_.UnsafeArenaSwap(&other->card_list_);
  ip_list_.UnsafeArenaSwap(&other->ip_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// required bool result = 1;
bool Response::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void Response::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response::clear_result() {
  result_ = false;
  clear_has_result();
}
bool Response::result() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Response.result)
  return result_;
}
void Response::set_result(bool value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.Response.result)
}

// optional .Czhtdev.ErrorType error_code = 2;
bool Response::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Response::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
void Response::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void Response::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
::Czhtdev::ErrorType Response::error_code() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Response.error_code)
  return static_cast< ::Czhtdev::ErrorType >(error_code_);
}
void Response::set_error_code(::Czhtdev::ErrorType value) {
  assert(::Czhtdev::ErrorType_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.Response.error_code)
}

// optional string error_description = 3;
bool Response::has_error_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Response::set_has_error_description() {
  _has_bits_[0] |= 0x00000004u;
}
void Response::clear_has_error_description() {
  _has_bits_[0] &= ~0x00000004u;
}
void Response::clear_error_description() {
  error_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_description();
}
const ::std::string& Response::error_description() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Response.error_description)
  return error_description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Response::set_error_description(const ::std::string& value) {
  set_has_error_description();
  error_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Czhtdev.Response.error_description)
}
void Response::set_error_description(const char* value) {
  set_has_error_description();
  error_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Czhtdev.Response.error_description)
}
void Response::set_error_description(const char* value, size_t size) {
  set_has_error_description();
  error_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Czhtdev.Response.error_description)
}
::std::string* Response::mutable_error_description() {
  set_has_error_description();
  // @@protoc_insertion_point(field_mutable:Czhtdev.Response.error_description)
  return error_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Response::release_error_description() {
  // @@protoc_insertion_point(field_release:Czhtdev.Response.error_description)
  clear_has_error_description();
  return error_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Response::set_allocated_error_description(::std::string* error_description) {
  if (error_description != NULL) {
    set_has_error_description();
  } else {
    clear_has_error_description();
  }
  error_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_description);
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Response.error_description)
}

// optional .Czhtdev.User user = 5;
bool Response::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Response::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
void Response::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
void Response::clear_user() {
  if (user_ != NULL) user_->::Czhtdev::User::Clear();
  clear_has_user();
}
const ::Czhtdev::User& Response::user() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Response.user)
  return user_ != NULL ? *user_
                         : *::Czhtdev::User::internal_default_instance();
}
::Czhtdev::User* Response::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::Czhtdev::User;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Response.user)
  return user_;
}
::Czhtdev::User* Response::release_user() {
  // @@protoc_insertion_point(field_release:Czhtdev.Response.user)
  clear_has_user();
  ::Czhtdev::User* temp = user_;
  user_ = NULL;
  return temp;
}
void Response::set_allocated_user(::Czhtdev::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Response.user)
}

// repeated .Czhtdev.UserList user_list = 6;
int Response::user_list_size() const {
  return user_list_.size();
}
void Response::clear_user_list() {
  user_list_.Clear();
}
const ::Czhtdev::UserList& Response::user_list(int index) const {
  // @@protoc_insertion_point(field_get:Czhtdev.Response.user_list)
  return user_list_.Get(index);
}
::Czhtdev::UserList* Response::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:Czhtdev.Response.user_list)
  return user_list_.Mutable(index);
}
::Czhtdev::UserList* Response::add_user_list() {
  // @@protoc_insertion_point(field_add:Czhtdev.Response.user_list)
  return user_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::Czhtdev::UserList >*
Response::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:Czhtdev.Response.user_list)
  return &user_list_;
}
const ::google::protobuf::RepeatedPtrField< ::Czhtdev::UserList >&
Response::user_list() const {
  // @@protoc_insertion_point(field_list:Czhtdev.Response.user_list)
  return user_list_;
}

// optional .Czhtdev.PassageRecord passge_record = 7;
bool Response::has_passge_record() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Response::set_has_passge_record() {
  _has_bits_[0] |= 0x00000020u;
}
void Response::clear_has_passge_record() {
  _has_bits_[0] &= ~0x00000020u;
}
void Response::clear_passge_record() {
  if (passge_record_ != NULL) passge_record_->::Czhtdev::PassageRecord::Clear();
  clear_has_passge_record();
}
const ::Czhtdev::PassageRecord& Response::passge_record() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Response.passge_record)
  return passge_record_ != NULL ? *passge_record_
                         : *::Czhtdev::PassageRecord::internal_default_instance();
}
::Czhtdev::PassageRecord* Response::mutable_passge_record() {
  set_has_passge_record();
  if (passge_record_ == NULL) {
    passge_record_ = new ::Czhtdev::PassageRecord;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Response.passge_record)
  return passge_record_;
}
::Czhtdev::PassageRecord* Response::release_passge_record() {
  // @@protoc_insertion_point(field_release:Czhtdev.Response.passge_record)
  clear_has_passge_record();
  ::Czhtdev::PassageRecord* temp = passge_record_;
  passge_record_ = NULL;
  return temp;
}
void Response::set_allocated_passge_record(::Czhtdev::PassageRecord* passge_record) {
  delete passge_record_;
  passge_record_ = passge_record;
  if (passge_record) {
    set_has_passge_record();
  } else {
    clear_has_passge_record();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Response.passge_record)
}

// repeated .Czhtdev.PassageRecordList passge_record_list = 8;
int Response::passge_record_list_size() const {
  return passge_record_list_.size();
}
void Response::clear_passge_record_list() {
  passge_record_list_.Clear();
}
const ::Czhtdev::PassageRecordList& Response::passge_record_list(int index) const {
  // @@protoc_insertion_point(field_get:Czhtdev.Response.passge_record_list)
  return passge_record_list_.Get(index);
}
::Czhtdev::PassageRecordList* Response::mutable_passge_record_list(int index) {
  // @@protoc_insertion_point(field_mutable:Czhtdev.Response.passge_record_list)
  return passge_record_list_.Mutable(index);
}
::Czhtdev::PassageRecordList* Response::add_passge_record_list() {
  // @@protoc_insertion_point(field_add:Czhtdev.Response.passge_record_list)
  return passge_record_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::Czhtdev::PassageRecordList >*
Response::mutable_passge_record_list() {
  // @@protoc_insertion_point(field_mutable_list:Czhtdev.Response.passge_record_list)
  return &passge_record_list_;
}
const ::google::protobuf::RepeatedPtrField< ::Czhtdev::PassageRecordList >&
Response::passge_record_list() const {
  // @@protoc_insertion_point(field_list:Czhtdev.Response.passge_record_list)
  return passge_record_list_;
}

// optional .Czhtdev.PassageRecord passge_synchronous = 9;
bool Response::has_passge_synchronous() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Response::set_has_passge_synchronous() {
  _has_bits_[0] |= 0x00000080u;
}
void Response::clear_has_passge_synchronous() {
  _has_bits_[0] &= ~0x00000080u;
}
void Response::clear_passge_synchronous() {
  if (passge_synchronous_ != NULL) passge_synchronous_->::Czhtdev::PassageRecord::Clear();
  clear_has_passge_synchronous();
}
const ::Czhtdev::PassageRecord& Response::passge_synchronous() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Response.passge_synchronous)
  return passge_synchronous_ != NULL ? *passge_synchronous_
                         : *::Czhtdev::PassageRecord::internal_default_instance();
}
::Czhtdev::PassageRecord* Response::mutable_passge_synchronous() {
  set_has_passge_synchronous();
  if (passge_synchronous_ == NULL) {
    passge_synchronous_ = new ::Czhtdev::PassageRecord;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Response.passge_synchronous)
  return passge_synchronous_;
}
::Czhtdev::PassageRecord* Response::release_passge_synchronous() {
  // @@protoc_insertion_point(field_release:Czhtdev.Response.passge_synchronous)
  clear_has_passge_synchronous();
  ::Czhtdev::PassageRecord* temp = passge_synchronous_;
  passge_synchronous_ = NULL;
  return temp;
}
void Response::set_allocated_passge_synchronous(::Czhtdev::PassageRecord* passge_synchronous) {
  delete passge_synchronous_;
  passge_synchronous_ = passge_synchronous;
  if (passge_synchronous) {
    set_has_passge_synchronous();
  } else {
    clear_has_passge_synchronous();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Response.passge_synchronous)
}

// optional .Czhtdev.DevConfig cfg = 10;
bool Response::has_cfg() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Response::set_has_cfg() {
  _has_bits_[0] |= 0x00000100u;
}
void Response::clear_has_cfg() {
  _has_bits_[0] &= ~0x00000100u;
}
void Response::clear_cfg() {
  if (cfg_ != NULL) cfg_->::Czhtdev::DevConfig::Clear();
  clear_has_cfg();
}
const ::Czhtdev::DevConfig& Response::cfg() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Response.cfg)
  return cfg_ != NULL ? *cfg_
                         : *::Czhtdev::DevConfig::internal_default_instance();
}
::Czhtdev::DevConfig* Response::mutable_cfg() {
  set_has_cfg();
  if (cfg_ == NULL) {
    cfg_ = new ::Czhtdev::DevConfig;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Response.cfg)
  return cfg_;
}
::Czhtdev::DevConfig* Response::release_cfg() {
  // @@protoc_insertion_point(field_release:Czhtdev.Response.cfg)
  clear_has_cfg();
  ::Czhtdev::DevConfig* temp = cfg_;
  cfg_ = NULL;
  return temp;
}
void Response::set_allocated_cfg(::Czhtdev::DevConfig* cfg) {
  delete cfg_;
  cfg_ = cfg;
  if (cfg) {
    set_has_cfg();
  } else {
    clear_has_cfg();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Response.cfg)
}

// optional .Czhtdev.DeviceInfo devinfo = 11;
bool Response::has_devinfo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Response::set_has_devinfo() {
  _has_bits_[0] |= 0x00000200u;
}
void Response::clear_has_devinfo() {
  _has_bits_[0] &= ~0x00000200u;
}
void Response::clear_devinfo() {
  if (devinfo_ != NULL) devinfo_->::Czhtdev::DeviceInfo::Clear();
  clear_has_devinfo();
}
const ::Czhtdev::DeviceInfo& Response::devinfo() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Response.devinfo)
  return devinfo_ != NULL ? *devinfo_
                         : *::Czhtdev::DeviceInfo::internal_default_instance();
}
::Czhtdev::DeviceInfo* Response::mutable_devinfo() {
  set_has_devinfo();
  if (devinfo_ == NULL) {
    devinfo_ = new ::Czhtdev::DeviceInfo;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Response.devinfo)
  return devinfo_;
}
::Czhtdev::DeviceInfo* Response::release_devinfo() {
  // @@protoc_insertion_point(field_release:Czhtdev.Response.devinfo)
  clear_has_devinfo();
  ::Czhtdev::DeviceInfo* temp = devinfo_;
  devinfo_ = NULL;
  return temp;
}
void Response::set_allocated_devinfo(::Czhtdev::DeviceInfo* devinfo) {
  delete devinfo_;
  devinfo_ = devinfo;
  if (devinfo) {
    set_has_devinfo();
  } else {
    clear_has_devinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Response.devinfo)
}

// repeated .Czhtdev.IDCard card_list = 13;
int Response::card_list_size() const {
  return card_list_.size();
}
void Response::clear_card_list() {
  card_list_.Clear();
}
const ::Czhtdev::IDCard& Response::card_list(int index) const {
  // @@protoc_insertion_point(field_get:Czhtdev.Response.card_list)
  return card_list_.Get(index);
}
::Czhtdev::IDCard* Response::mutable_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:Czhtdev.Response.card_list)
  return card_list_.Mutable(index);
}
::Czhtdev::IDCard* Response::add_card_list() {
  // @@protoc_insertion_point(field_add:Czhtdev.Response.card_list)
  return card_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::Czhtdev::IDCard >*
Response::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:Czhtdev.Response.card_list)
  return &card_list_;
}
const ::google::protobuf::RepeatedPtrField< ::Czhtdev::IDCard >&
Response::card_list() const {
  // @@protoc_insertion_point(field_list:Czhtdev.Response.card_list)
  return card_list_;
}

// repeated .Czhtdev.IPTable ip_list = 14;
int Response::ip_list_size() const {
  return ip_list_.size();
}
void Response::clear_ip_list() {
  ip_list_.Clear();
}
const ::Czhtdev::IPTable& Response::ip_list(int index) const {
  // @@protoc_insertion_point(field_get:Czhtdev.Response.ip_list)
  return ip_list_.Get(index);
}
::Czhtdev::IPTable* Response::mutable_ip_list(int index) {
  // @@protoc_insertion_point(field_mutable:Czhtdev.Response.ip_list)
  return ip_list_.Mutable(index);
}
::Czhtdev::IPTable* Response::add_ip_list() {
  // @@protoc_insertion_point(field_add:Czhtdev.Response.ip_list)
  return ip_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::Czhtdev::IPTable >*
Response::mutable_ip_list() {
  // @@protoc_insertion_point(field_mutable_list:Czhtdev.Response.ip_list)
  return &ip_list_;
}
const ::google::protobuf::RepeatedPtrField< ::Czhtdev::IPTable >&
Response::ip_list() const {
  // @@protoc_insertion_point(field_list:Czhtdev.Response.ip_list)
  return ip_list_;
}

inline const Response* Response::internal_default_instance() {
  return &Response_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kTypeFieldNumber;
const int Message::kRequestFieldNumber;
const int Message::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_czhtdev_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Czhtdev.Message)
}

void Message::InitAsDefaultInstance() {
  request_ = const_cast< ::Czhtdev::Request*>(
      ::Czhtdev::Request::internal_default_instance());
  response_ = const_cast< ::Czhtdev::Response*>(
      ::Czhtdev::Response::internal_default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Czhtdev.Message)
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  request_ = NULL;
  response_ = NULL;
  type_ = 1;
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:Czhtdev.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != &Message_default_instance_.get()) {
    delete request_;
    delete response_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  protobuf_InitDefaults_czhtdev_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Message> Message_default_instance_;

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:Czhtdev.Message)
  if (_has_bits_[0 / 32] & 7u) {
    type_ = 1;
    if (has_request()) {
      if (request_ != NULL) request_->::Czhtdev::Request::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::Czhtdev::Response::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Czhtdev.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Czhtdev.MessageType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Czhtdev::MessageType_IsValid(value)) {
            set_type(static_cast< ::Czhtdev::MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request;
        break;
      }

      // optional .Czhtdev.Request request = 2;
      case 2: {
        if (tag == 18) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_response;
        break;
      }

      // optional .Czhtdev.Response response = 3;
      case 3: {
        if (tag == 26) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Czhtdev.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Czhtdev.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Czhtdev.Message)
  // required .Czhtdev.MessageType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Czhtdev.Request request = 2;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->request_, output);
  }

  // optional .Czhtdev.Response response = 3;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->response_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Czhtdev.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Czhtdev.Message)
  // required .Czhtdev.MessageType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .Czhtdev.Request request = 2;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->request_, false, target);
  }

  // optional .Czhtdev.Response response = 3;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->response_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Czhtdev.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Czhtdev.Message)
  size_t total_size = 0;

  // required .Czhtdev.MessageType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional .Czhtdev.Request request = 2;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->request_);
    }

    // optional .Czhtdev.Response response = 3;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->response_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Czhtdev.Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Czhtdev.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Czhtdev.Message)
    UnsafeMergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Czhtdev.Message)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Message::UnsafeMergeFrom(const Message& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_request()) {
      mutable_request()->::Czhtdev::Request::MergeFrom(from.request());
    }
    if (from.has_response()) {
      mutable_response()->::Czhtdev::Response::MergeFrom(from.response());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Czhtdev.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Czhtdev.Message)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_request()) {
    if (!this->request_->IsInitialized()) return false;
  }
  if (has_response()) {
    if (!this->response_->IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  std::swap(type_, other->type_);
  std::swap(request_, other->request_);
  std::swap(response_, other->response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// required .Czhtdev.MessageType type = 1;
bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Message::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Message::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Message::clear_type() {
  type_ = 1;
  clear_has_type();
}
::Czhtdev::MessageType Message::type() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Message.type)
  return static_cast< ::Czhtdev::MessageType >(type_);
}
void Message::set_type(::Czhtdev::MessageType value) {
  assert(::Czhtdev::MessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Czhtdev.Message.type)
}

// optional .Czhtdev.Request request = 2;
bool Message::has_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Message::set_has_request() {
  _has_bits_[0] |= 0x00000002u;
}
void Message::clear_has_request() {
  _has_bits_[0] &= ~0x00000002u;
}
void Message::clear_request() {
  if (request_ != NULL) request_->::Czhtdev::Request::Clear();
  clear_has_request();
}
const ::Czhtdev::Request& Message::request() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Message.request)
  return request_ != NULL ? *request_
                         : *::Czhtdev::Request::internal_default_instance();
}
::Czhtdev::Request* Message::mutable_request() {
  set_has_request();
  if (request_ == NULL) {
    request_ = new ::Czhtdev::Request;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Message.request)
  return request_;
}
::Czhtdev::Request* Message::release_request() {
  // @@protoc_insertion_point(field_release:Czhtdev.Message.request)
  clear_has_request();
  ::Czhtdev::Request* temp = request_;
  request_ = NULL;
  return temp;
}
void Message::set_allocated_request(::Czhtdev::Request* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Message.request)
}

// optional .Czhtdev.Response response = 3;
bool Message::has_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Message::set_has_response() {
  _has_bits_[0] |= 0x00000004u;
}
void Message::clear_has_response() {
  _has_bits_[0] &= ~0x00000004u;
}
void Message::clear_response() {
  if (response_ != NULL) response_->::Czhtdev::Response::Clear();
  clear_has_response();
}
const ::Czhtdev::Response& Message::response() const {
  // @@protoc_insertion_point(field_get:Czhtdev.Message.response)
  return response_ != NULL ? *response_
                         : *::Czhtdev::Response::internal_default_instance();
}
::Czhtdev::Response* Message::mutable_response() {
  set_has_response();
  if (response_ == NULL) {
    response_ = new ::Czhtdev::Response;
  }
  // @@protoc_insertion_point(field_mutable:Czhtdev.Message.response)
  return response_;
}
::Czhtdev::Response* Message::release_response() {
  // @@protoc_insertion_point(field_release:Czhtdev.Message.response)
  clear_has_response();
  ::Czhtdev::Response* temp = response_;
  response_ = NULL;
  return temp;
}
void Message::set_allocated_response(::Czhtdev::Response* response) {
  delete response_;
  response_ = response;
  if (response) {
    set_has_response();
  } else {
    clear_has_response();
  }
  // @@protoc_insertion_point(field_set_allocated:Czhtdev.Message.response)
}

inline const Message* Message::internal_default_instance() {
  return &Message_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Czhtdev

// @@protoc_insertion_point(global_scope)
